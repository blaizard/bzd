{#- Enum -#}
{%- macro declareEnum(element) %}
{{ element.comment | commentBlockToStr }}enum class {{ element.name }} : bzd::UInt8
{
	{% for i, value in element.values %}
		{% if i %},{% end %}
	{{ value.comment | commentBlockToStr }}{{ value.name }}
	{% end %}
};
{% end -%}

{#- Parameters for call -#}
{%- macro declareParametersCall(parameters) -%}
	{%- for i, expression in parameters %}{% if i %}, {% end %}{{ expression.name }}{% end -%}
{% end -%}

{#- Structure -#}
{%- macro declareStruct(element) %}
{{ element.comment | commentBlockToStr }}struct {{ element.name }}{% if element.hasInheritance %} : {{ element.inheritanceList | inheritanceToStr }}{% end %}
{
	{{ declareTrivialTypes(element.interface.sequence) }}
	{% for expression in element.interface.expressionList %}
	{{ expression.comment | commentBlockToStr }}
	{{- expressionToDefinition(expression) }};
	{% end %}
};
{% end -%}

{#- Build types -#}
{%- macro declareTrivialTypes(trivialTypes) %}
	{% for data in trivialTypes %}
		{% if not data.isExtern %}
			{% if data.category == Category.using %}
{{ data.comment | commentBlockToStr }}using {{ data.name }} = {{ data.symbol | symbolToStr }};
			{% elif data.category == Category.enum %}
{{ declareEnum(data) }}
			{% elif data.category == Category.struct %}
{{ declareStruct(data) }}
			{% end %}
		{% end %}
	{% end %}
{% end -%}

{#- Declare a method given a method entity.
For example:
```c++
void myFunction(bzd::MyType& a, const OtherType& b)
```
Note: methods do not have optional parameters, they are feed by the method callee, this is because
it gives a restriction to optional parameters to be put only at the end.-#}
{%- macro declareMethod(method) -%}
{{ method.symbol | symbolToStr }} {{ method.name }}(
	{%- for i, item in method.parameters %}{% if i %}, {% end -%}
		{{- item.symbol | symbolReferenceToStr }} {{ item.name }}
	{%-end -%})
{%- end -%}
