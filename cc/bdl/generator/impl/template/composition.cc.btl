{#- Reusable macros. -#}
{%- include "cc/bdl/generator/impl/template/declarations.h.btl" -%}

{#- Generate calls for all init members associated with an expression. -#}
{%- macro callInitMembers(entry) -%}
	{% for dep in entry.deps %}
co_await !registry.{{ dep.fqn | fqnToNameStr }}_.init(registry);
	{% end %}
	{% for dep in entry.init %}
co_await !{{ dep.symbol | symbolRegistryToStr }}();
	{% end %}
{% end -%}

{#- Generate calls for all shutdown members associated with an expression. -#}
{%- macro callShutdownMembers(entry) -%}
	{% for dep in entry.shutdown %}
co_await !{{ dep.symbol | symbolRegistryToStr }}();
	{% end %}
	{% for dep in entry.deps %}
co_await !registry.{{ dep.fqn | fqnToNameStr }}_.shutdown(registry);
	{% end %}
{% end -%}

{#- Generate the list of includes for a specific target. -#}
{%- macro generateIncludesForTarget(target) -%}
	{% for includesTarget, includes in data.cc.includes -%}
		{% if target == includesTarget -%}
			{% for path in includes %}
#include "{{ path }}"
			{% end -%}
		{% end -%}
	{% end -%}
{%- end -%}

// Includes for all target.
#include "cc/bzd/core/logger.hh"
#include "cc/bzd/core/assert.hh"
#include "cc/bzd/core/io/buffer.hh"
#include "cc/bzd/platform/atomic.hh"
#include "cc/bzd/algorithm/copy_n.hh"
#include "cc/bzd/meta/string_literal.hh"
#include "cc/bzd/utility/synchronization/spin_mutex.hh"
#include "cc/bzd/utility/synchronization/sync_lock_guard.hh"
#include "cc/bdl/generator/impl/adapter/context.hh"
{{ generateIncludesForTarget("all") }}
// Includes for '{{ target }}' target.
{{ generateIncludesForTarget(target) }}

namespace {

enum class Status
{
	uninitialized,
	initializing,
	initialized,
	shuttingDown,
};

/// Helper to handle return code.
template <class Promise>
[[nodiscard]] constexpr bzd::Bool verifyReturnedPromise(bzd::Logger& logger, Promise&& promise, const bzd::StringView taskName) noexcept
{
	if (!promise.hasResult())
	{
		logger.error("Task '{}' did not terminate correctly."_csv, taskName).sync();
		return false;
	}
	
	const auto result{promise.moveResultOut()};
	if (result.hasError())
	{
		logger.error("Task '{}' terminated with an error."_csv, taskName).sync();
		logger.error(result.error()).sync();
		return false;
	}

	return true;
}

class Output : public bzd::OStream
{
public:
	bzd::Async<> write(const bzd::Span<const bzd::Byte> data) noexcept final
	{
		if (out_)
		{
			co_await !out_->write(data);
		}
		co_return {};
	}

	[[nodiscard]] bzd::Async<bzd::lockGuard::Type<bzd::Mutex>> getLock() noexcept
	{
		if (out_)
		{
			return out_->getLock();
		}
		return bzd::OStream::getLock();
	}

public:
	constexpr void set(bzd::OStream& out) noexcept
	{
		out_ = &out;
	}

	constexpr void clear() noexcept
	{
		out_ = nullptr;
	}

private:
	bzd::OStream* out_{nullptr};
};

} // namespace

// ==== Identifiers ===========================================================

namespace bzd {

template <meta::StringLiteral name>
struct Data
{
	static UInt32 id;
};

{% for fqn, uid in uids %}
// template <> UInt32 Data<"{{ fqn }}">::id = {{ uid }}u;
{% end %}

} // namespace bzd

{% for context in contexts %}

// ============================================================================
// Executor: {{ context.executor }}
// ============================================================================

// ==== Specializations =======================================================

namespace bzd::registry::{{ context.executor | fqnToNameStr }} {

template <bzd::meta::StringLiteral name>
class ResourceSpecialization;

/// Wrapper around a registry entry.
///
/// \tparam name The FQN of the resource.
/// \tparam T The data type of the resource.
/// \tparam Registry The registry type to be used with this resource.
template <bzd::meta::StringLiteral name, class T>
class Resource : public ResourceSpecialization<name>
{
public: // Constructor.
	Resource(T& obj) noexcept : obj_{obj} {}

public: // Init/Shutdown.
	bzd::Async<> init(auto& registry) noexcept
	{
		const auto scope = bzd::makeSyncLockGuard(mutex_);
		++refCount_;
		if (this->status_ == Status::uninitialized)
		{
			this->status_ = Status::initializing;
			co_await !ResourceSpecialization<name>::init(registry);
			this->status_ = Status::initialized;
		}
		co_return {};
	}
	bzd::Async<> shutdown(auto& registry) noexcept
	{
		const auto scope = bzd::makeSyncLockGuard(mutex_);
		if (refCount_ == 1u)
		{
			this->status_ = Status::shuttingDown;
			co_await !ResourceSpecialization<name>::shutdown(registry);
			this->status_ = Status::uninitialized;
		}
		--refCount_;
		bzd::assert::isTrue(refCount_ >= 0, "Reference counter went < 0: {}"_csv, refCount_);
		co_return {};
	}

public: // Accessors.
	[[nodiscard]] auto& get() noexcept { return obj_; }
	[[nodiscard]] const auto& get() const noexcept { return obj_; }

protected:
	T& obj_;
	Status status_{Status::uninitialized};
	bzd::SpinMutex mutex_{};
	bzd::Int32 refCount_{0};
};

	{% for fqn, entry in registry[context] %}

// Specialization for '{{ fqn | fqnToStr }}'.
template <>
class ResourceSpecialization<"{{ fqn }}">
{
public:
	{{ paramsTemplateDefinition(entry.expression.parametersResolved) }}
	struct Config
	{
		{% for index, item in entry.expression.parametersResolved %}
		{{ item.comment | commentBlockToStr }}
		{{- paramToDefinition(item, index) }}
		{% end %}
	};

	{{ iterableTemplateDefinition(iosRegistry[fqn].keys()) }}
	struct IO
	{
		{% for index, name in iosRegistry[fqn].keys() %}
		T{{ index }} {{ name }};
		{% end %}
	};

protected:
	bzd::Async<> init([[maybe_unused]] auto& registry) noexcept
	{
		{{ callInitMembers(entry) }}
		{% if fqn.endswith(".out") %}
		registry.out.set(registry.{{ fqn | fqnToNameStr }}_.get());
		{% end %}
		co_return {};
	}
	bzd::Async<> shutdown([[maybe_unused]] auto& registry) noexcept
	{
		{% if fqn.endswith(".out") %}
		registry.out.clear();
		{% end %}
		{{ callShutdownMembers(entry) }}
		co_return {};
	}
};
	{% end %}

// ==== Registry ==============================================================

[[nodiscard]] static auto& make() noexcept
{
	// Definition of communication ring buffers.
	{% for connection in ios[context] %}
	static bzd::io::Buffer<{{ connection.symbol | symbolToStr }}, {{ connection | connectionCount }}u, "{{ connection.identifier }}"> io_buffer_{{ connection.identifier | fqnToNameStr }}{};
	{% end %}

	// Definition of all registry entries and their configuration.
	{% for fqn, entry in registry[context] %}
	// {{ fqn }}
	static auto context_{{ fqn | fqnToNameStr }} = bzd::generator::makeContext(
		ResourceSpecialization<"{{ fqn }}">::Config{ {{- paramsDesignatedInitializers(entry.expression.parametersResolved | paramsFilterOutLiterals) -}} },
		ResourceSpecialization<"{{ fqn }}">::IO{ {{- registryConnectionsDeclaration(iosRegistry[fqn]) -}} }
	);
	static {{ entry.expression.typeResolved | symbolDefinitionToStr }} {{ fqn | fqnToNameStr }}{context_{{ fqn | fqnToNameStr }}};
	{% end %}

	// Declaration of the registry.
	struct Registry
	{
		{% for fqn, entry in registry[context] %}
		Resource<"{{ fqn }}", decltype({{ fqn | fqnToNameStr }})> {{ fqn | fqnToNameStr }}_;
		{% end %}
		::Output out;
	};
	static Registry registry{ {%- for fqn, entry in registry[context] %}{% if not loop.first %}, {% end %}{{ fqn | fqnToNameStr }}{% end -%}, {}};
	return registry;
}

} // namespace bzd::registry::{{ context.executor | fqnToNameStr }}

// ==== Execution =============================================================

/// Initialize and compose the application.
bool run{{ context.executorWithoutTarget | fqnToCapitalized }}() noexcept
{
	// Create registry.
	auto& registry = bzd::registry::{{ context.executor | fqnToNameStr }}::make();

	// Create the logger.
	bzd::Logger logger{registry.out};

	// Initialize executors.
	registry.{{ context.executor | fqnToNameStr }}_.init(registry).sync();
	logger.info("[{{ context.executor }}] Initialization completed."_csv).sync();

	// Composition.
	logger.info("[{{ context.executor }}] Composition phase."_csv).sync();
	{# Note, workloads are first to make sure the indexing matches the checks below with `verifyReturnedPromise`. #}
	{% for entry in btl.merge(workloads[context], services[context]) %}

	// {{ entry.entryType.value }}: {{ entry.expression.symbol | symbolToStr }}()
	auto async_{{loop.parent.index}}_{{ loop.index }} = [&]() -> bzd::Async<> {
		{{ callInitMembers(entry) }}
		co_await !{{ entry.expression.symbol | symbolRegistryToStr }}({{- paramsDeclaration(entry.expression.parametersResolved, true) -}} );
		{{ callShutdownMembers(entry) }}
		co_return {};
	};
	auto promise_{{loop.parent.index}}_{{ loop.index }} = async_{{loop.parent.index}}_{{ loop.index }}();
	registry.{{ context.executor | fqnToNameStr }}_.get().schedule(promise_{{loop.parent.index}}_{{ loop.index }}, {{ entry.entryType | asyncTypeToStr }});
	{% end %}

	// Execute.
	logger.info("[{{ context.executor }}] Execution phase."_csv).sync();
	registry.{{ context.executor | fqnToNameStr }}_.get().start();

	// Wait until completion.
	registry.{{ context.executor | fqnToNameStr }}_.get().stop();
	logger.info("[{{ context.executor }}] Completion."_csv).sync();

	// Compute the return code.
	bool isSuccess{true};
	{% for entry in workloads[context] %}
	isSuccess &= verifyReturnedPromise(logger, bzd::move(promise_{{loop.parent.index}}_{{ loop.index }}), "{{ entry.expression.symbol | symbolToStr }}()"_sv);
	{% end %}
	return isSuccess;
}

{% end %}
