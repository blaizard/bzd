import pathlib
import datetime
import typing
import argparse
import traceback
import os
import time

from bzd.http.client import HttpClient, HttpClientException
from bzd.logging import Logger
from apps.artifacts.api.python.node.node import Node
from apps.trader_python.recording.config_polygon import apiKey

logger = Logger("polygon.io")


class Generator:
	"""Generate recording using polygon.io data."""

	def __init__(self, ticker: str, node: Node) -> None:
		self.ticker = ticker
		self.node = node

	def generate(self, dateStr: str) -> None:
		url = f"https://api.polygon.io/v2/aggs/ticker/{self.ticker}/range/1/minute/{dateStr}/{dateStr}?apiKey={apiKey}&limit=50000"

		while url:
			try:
				response = HttpClient.get(url)
				data = response.json
				url = data.get("next_url")

				# Save all the data to remote.
				with self.node.publishBulk(path=["ohlc", self.ticker, "USD", "polygon.io"],
				                           isFixedTimestamp=True) as publish:
					for item in data.get("results", []):
						publish(timestamp=item["t"],
						        data={
						            "price": item.get("vw") or (item["o"] + item["l"] + item["c"] + item["l"]) / 4,
						            "volume": item["v"],
						            "open": item["o"],
						            "close": item["c"],
						            "high": item["h"],
						            "low": item["l"],
						        })

			except HttpClientException as e:
				if e.status == 429:
					logger.info("Reached API limit, waiting 15s...")
					time.sleep(15)
				else:
					raise


if __name__ == "__main__":
	parser = argparse.ArgumentParser(description="Polygon data scrapper.")
	parser.add_argument("--node-token",
	                    type=str,
	                    default=os.environ.get("BZD_NODE_TOKEN"),
	                    help="A token to be used to access the node server.")
	parser.add_argument(
	    "uid",
	    default=os.environ.get("BZD_NODE_UID"),
	    help=
	    "The UID of this node. If no UID is provided, the application will report the monitoring on the command line.")

	args = parser.parse_args()
	node = Node(uid=args.uid)

	tickerList = [
	    "A",
	    "ABBV",
	    "ABNB",
	    "ABT",
	    "ACGL",
	    "ACN",  # codespell:ignore
	    "ADBE",
	    "ADI",
	    "ADM",
	    "ADP",
	    "ADSK",
	    "AEE",
	    "AEP",
	    "AES",
	    "AFL",
	    "AIG",
	    "AIZ",
	    "AJG",
	    "AKAM",
	    "ALB",
	    "ALGN",
	    "ALL",
	    "ALLE",  # codespell:ignore
	    "AMAT",
	    "AMCR",
	    "AMD",
	    "AME",
	    "AMGN",
	    "AMP",
	    "AMT",
	    "AMZN",
	    "ANET",
	    "AON",
	    "AOS",
	    "APA",
	    "APD",
	    "APH",
	    "APO",
	    "APTV",
	    "ARE",
	    "ATO",
	    "AVB",
	    "AVGO",
	    "AVY",
	    "AWK",
	    "AXON",
	    "AXP",
	    "AZO",
	    "BA",
	    "BAC",
	    "BALL",
	    "BAX",
	    "BBY",
	    "BDX",
	    "BEN",
	    "BF.B",
	    "BG",
	    "BIIB",
	    "BK",
	    "BKNG",
	    "BKR",
	    "BLDR",
	    "BLK",
	    "BMY",
	    "BR",
	    "BRK.B",
	    "BRO",
	    "BSX",
	    "BX",
	    "BXP",
	    "C",
	    "CAG",
	    "CAH",
	    "CARR",
	    "CAT",
	    "CB",
	    "CBOE",
	    "CBRE",
	    "CCI",
	    "CCL",
	    "CDNS",
	    "CDW",
	    "CEG",
	    "CF",
	    "CFG",
	    "CHD",
	    "CHRW",
	    "CHTR",
	    "CI",
	    "CINF",
	    "CL",
	    "CLX",
	    "CMCSA",
	    "CME",
	    "CMG",
	    "CMI",
	    "CMS",
	    "CNC",
	    "CNP",
	    "COF",
	    "COIN",
	    "COUP",
	    "COP",
	    "COR",
	    "COST",
	    "CPAY",
	    "CPB",
	    "CPRT",
	    "CPT",
	    "CRL",
	    "CRM",
	    "CRWD",
	    "CSCO",
	    "CSGP",
	    "CSX",
	    "CTAS",
	    "CTRA",
	    "CTSH",
	    "CTVA",
	    "CVS",
	    "CVX",
	    "CZR",
	    "D",
	    "DAL",
	    "DASH",
	    "DAY",
	    "DD",
	    "DDOG",
	    "DE",
	    "DECK",
	    "DELL",
	    "DG",
	    "DGX",
	    "DHI",
	    "DHR",
	    "DIS",
	    "DLR",
	    "DLTR",
	    "DOC",
	    "DOV",
	    "DOW",
	    "DPZ",
	    "DRI",
	    "DTE",
	    "DUK",
	    "DVA",
	    "DVN",
	    "DXCM",
	    "EA",
	    "EBAY",
	    "ECL",
	    "ED",
	    "EFX",
	    "EG",
	    "EIX",
	    "EL",
	    "ELV",
	    "EMN",
	    "EMR",
	    "ENPH",
	    "EOG",
	    "EPAM",
	    "EQIX",
	    "EQR",
	    "EQT",
	    "ERIE",
	    "ES",
	    "ESS",
	    "ETN",
	    "ETR",
	    "EVRG",
	    "EW",
	    "EXC",
	    "EXE",
	    "EXPD",
	    "EXPE",
	    "EXR",
	    "F",
	    "FANG",
	    "FAST",
	    "FCX",
	    "FDS",
	    "FDX",
	    "FE",
	    "FFIV",
	    "FI",
	    "FICO",
	    "FIS",
	    "FITB",
	    "FOX",
	    "FOXA",
	    "FRT",
	    "FSLR",
	    "FTNT",
	    "FTV",
	    "GD",
	    "GDDY",
	    "GE",
	    "GEHC",
	    "GEN",
	    "GEV",
	    "GILD",
	    "GIS",
	    "GL",
	    "GLW",
	    "GM",
	    "GNRC",
	    "GOOG",
	    "GOOGL",
	    "GPC",
	    "GPN",
	    "GRMN",
	    "GS",
	    "GWW",
	    "HAL",
	    "HAS",
	    "HBAN",
	    "HCA",
	    "HD",
	    "HIG",
	    "HII",
	    "HLT",
	    "HOLX",
	    "HON",
	    "HPE",
	    "HPQ",
	    "HRL",
	    "HSIC",
	    "HST",
	    "HSY",
	    "HUBB",
	    "HUM",
	    "HWM",
	    "IBKR",
	    "IBM",
	    "ICE",
	    "IDXX",
	    "IEX",
	    "IFF",
	    "INCY",
	    "INTC",
	    "INTU",
	    "INVH",
	    "IP",
	    "IPG",
	    "IQV",
	    "IR",
	    "IRM",
	    "ISRG",
	    "IT",
	    "ITW",
	    "IVZ",
	    "J",
	    "JBHT",
	    "JBL",
	    "JCI",
	    "JKHY",
	    "JNJ",
	    "JPM",
	    "K",
	    "KDP",
	    "KEY",
	    "KEYS",
	    "KHC",
	    "KIM",
	    "KKR",
	    "KLAC",
	    "KMB",
	    "KMI",
	    "KMX",
	    "KO",
	    "KR",
	    "KVUE",
	    "L",
	    "LDOS",
	    "LEN",
	    "LH",
	    "LHX",
	    "LII",
	    "LIN",
	    "LKQ",
	    "LLY",
	    "LMT",
	    "LNT",
	    "LOW",
	    "LRCX",
	    "LULU",
	    "LUV",
	    "LVS",
	    "LW",
	    "LYB",
	    "LYV",
	    "MA",
	    "MAA",
	    "MAR",
	    "MAS",
	    "MCD",
	    "MCHP",
	    "MCK",
	    "MCO",
	    "MDLZ",
	    "MDT",
	    "MET",
	    "META",
	    "MGM",
	    "MHK",
	    "MKC",
	    "MKTX",
	    "MLM",
	    "MMC",
	    "MMM",
	    "MNST",
	    "MO",
	    "MOH",
	    "MOS",
	    "MPC",
	    "MPWR",
	    "MRK",
	    "MRNA",
	    "MS",
	    "MSCI",
	    "MSI",
	    "MTB",
	    "MTCH",
	    "MTD",
	    "MU",
	    "NCLH",
	    "NDAQ",
	    "NDSN",
	    "NEE",
	    "NEM",
	    "NFLX",
	    "NI",
	    "NKE",
	    "NOC",
	    "NOW",
	    "NRG",
	    "NSC",
	    "NTAP",
	    "NTRS",
	    "NUE",
	    "NVDA",
	    "NVR",
	    "NWS",
	    "NWSA",
	    "NXPI",
	    "O",
	    "ODFL",
	    "OKE",
	    "OMC",
	    "ON",
	    "ORCL",
	    "ORLY",
	    "OTIS",
	    "OXY",
	    "PANW",
	    "PAYC",
	    "PAYX",
	    "PCAR",
	    "PCG",
	    "PEG",
	    "PEP",
	    "PFE",
	    "PFG",
	    "PG",
	    "PGR",
	    "PH",
	    "PHM",
	    "PKG",
	    "PLD",
	    "PLTR",
	    "PM",
	    "PNC",
	    "PNR",
	    "PNW",
	    "PODD",
	    "POOL",
	    "PPG",
	    "PPL",
	    "PRU",
	    "PSA",
	    "PSKY",
	    "PSX",
	    "PTC",
	    "PWR",
	    "PYPL",
	    "QCOM",
	    "RCL",
	    "REG",
	    "REGN",
	    "RF",
	    "RJF",
	    "RL",
	    "RMD",
	    "ROK",
	    "ROL",
	    "ROP",
	    "ROST",
	    "RSG",
	    "RTX",
	    "RVTY",
	    "SBAC",
	    "SBUX",
	    "SCHW",
	    "SHW",
	    "SJM",
	    "SLB",
	    "SMCI",
	    "SNA",
	    "SNPS",
	    "SO",
	    "SOLV",
	    "SPG",
	    "SPGI",
	    "SRE",
	    "STE",
	    "STLD",
	    "STT",
	    "STX",
	    "STZ",
	    "SW",
	    "SWK",
	    "SWKS",
	    "SYF",
	    "SYK",
	    "SYY",
	    "T",
	    "TAP",
	    "TDG",
	    "TDY",
	    "TECH",
	    "TEL",
	    "TER",
	    "TFC",
	    "TGT",
	    "TJX",
	    "TKO",
	    "TMO",
	    "TMUS",
	    "TPL",
	    "TPR",
	    "TRGP",
	    "TRMB",
	    "TROW",
	    "TRV",
	    "TSCO",
	    "TSLA",
	    "TSN",
	    "TT",
	    "TTD",
	    "TTWO",
	    "TXN",
	    "TXT",
	    "TYL",
	    "UAL",
	    "UBER",
	    "UDR",
	    "UHS",
	    "ULTA",
	    "UNH",
	    "UNP",
	    "UPS",
	    "URI",
	    "USB",
	    "V",
	    "VICI",
	    "VLO",
	    "VLTO",
	    "VMC",
	    "VRSK",
	    "VRSN",
	    "VRTX",
	    "VST",
	    "VTR",
	    "VTRS",
	    "VZ",
	    "WAB",
	    "WAT",
	    "WBD",
	    "WDAY",
	    "WDC",
	    "WEC",
	    "WELL",
	    "WFC",
	    "WM",
	    "WMB",
	    "WMT",
	    "WRB",
	    "WSM",
	    "WST",
	    "WTW",
	    "WY",
	    "WYNN",
	    "XEL",
	    "XOM",
	    "XYL",
	    "XYZ",
	    "YUM",
	    "ZBH",
	    "ZBRA",
	    "ZTS"
	]

	for ticker in tickerList:

		date = datetime.date(2024, 1, 1)
		dateEnd = datetime.date(2024, 12, 31)
		dateIncrement = datetime.timedelta(days=1)

		logger.info(f"Processing '{ticker}' ticker from {date} - {dateEnd}")

		while date <= dateEnd:
			dateStr = date.strftime("%Y-%m-%d")
			logger.info(f"- Day: {dateStr}")
			Generator(ticker, node).generate(dateStr)
			date += dateIncrement
