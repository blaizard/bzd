{
    "tests": [
        {
            "expects": {
                "data": "content for a",
                "status": 200
            },
            "request": [
                "get",
                "/file/memory/a.txt"
            ]
        },
        {
            "expects": {
                "status": 404
            },
            "request": [
                "get",
                "/file/memory/not/found/a.txt"
            ]
        },
        {
            "expects": {
                "headers": {
                    "www-authenticate": [
                        "Basic",
                        "Bearer"
                    ]
                },
                "status": 401
            },
            "request": [
                "get",
                "/file/memory_private/a.txt"
            ]
        },
        {
            "expects": {
                "data": "content for locked a",
                "status": 200
            },
            "request": [
                "get",
                "/file/memory_private/a.txt",
                {
                    "headers": {
                        "authorization": "basic aGVsbG86YWJjMTIz"
                    }
                }
            ]
        }
    ],
    "tokens": {
        "aGVsbG86YWJjMTIz": {
            "doc": "base64 user:password token for hello:abc123",
            "scopes": [
                "memory_private"
            ]
        },
        "tokenscope1": {
            "doc": "Some useful documentation",
            "scopes": [
                "scope1"
            ]
        }
    },
    "volumes": {
        "disk": {
            "storage": {
                "options": {
                    "mustExists": true
                },
                "path": "/",
                "type": "disk"
            },
            "type": "storage"
        },
        "memory": {
            "storage": {
                "data": {
                    "a.txt": "content for a",
                    "b.txt": "content for b",
                    "empty": {},
                    "nested": {
                        "deeper": {
                            "c.txt": "content for c"
                        },
                        "e.txt": "content for e",
                        "f.txt": "content for b"
                    },
                    "with space.txt": "content for with space"
                },
                "tests": true,
                "type": "memory",
                "write": true
            },
            "type": "storage",
            "webdav": {}
        },
        "memory_private": {
            "private": true,
            "storage": {
                "data": {
                    "a.txt": "content for locked a"
                },
                "tests": true,
                "type": "memory",
                "write": true
            },
            "type": "storage",
            "webdav": {}
        },
        "nodes": {
            "nodes.dashboards": [
                {
                    "inputs": {
                        "/data/cpu/{name}": {}
                    },
                    "max": 1,
                    "min": 0,
                    "title": "CPU {name}",
                    "type": "linear",
                    "unit": "percent"
                },
                {
                    "inputs": {
                        "/data/disk/{name}/total": {},
                        "/data/disk/{name}/used": {}
                    },
                    "min": 0,
                    "title": "Disk {name}",
                    "type": "linear",
                    "unit": "bytes"
                },
                {
                    "inputs": {
                        "/data/memory/{name}/total": {},
                        "/data/memory/{name}/used": {}
                    },
                    "min": 0,
                    "title": "Memory {name}",
                    "type": "linear",
                    "unit": "bytes"
                },
                {
                    "inputs": {
                        "/data/temperature/{name}": {}
                    },
                    "min": 0,
                    "title": "Temperature {name}",
                    "type": "linear",
                    "unit": "celsius"
                },
                {
                    "inputs": {
                        "/data/io/{name}/in": {},
                        "/data/io/{name}/out": {}
                    },
                    "min": 0,
                    "title": "IO {name}",
                    "type": "linear",
                    "unit": "bytes/s"
                },
                {
                    "inputs": {
                        "/data/network/{name}/in": {},
                        "/data/network/{name}/out": {}
                    },
                    "min": 0,
                    "title": "Network {name}",
                    "type": "linear",
                    "unit": "bytes/s"
                }
            ],
            "nodes.data": {
                "testnode": {
                    "a": 12,
                    "b": {
                        "c": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "d": {
                            "e": null,
                            "f": []
                        },
                        "dict": [
                            {
                                "hello": "world",
                                "test": 1
                            },
                            {
                                "complex": "yes"
                            }
                        ]
                    },
                    "path.with.dots": {
                        "nested": "a simple string"
                    },
                    "path/with/slashes": {
                        "nested": -42
                    }
                }
            },
            "nodes.handlers": {
                "/data/log": {
                    "history": 100,
                    "toString": "[{level}] [{name}] [{source}] {message}"
                }
            },
            "nodes.records": {
                "path": "./nodes.records"
            },
            "type": "nodes"
        },
        "nodes_mirror": {
            "nodes.records": {
                "path": "./nodes_mirror.records"
            },
            "nodes.sources": {
                "nodes": {
                    "host": "http://localhost:8081",
                    "type": "nodes"
                }
            },
            "type": "nodes"
        }
    }
}