#!/usr/bin/env groovy

// Do not modify, this file has been generated by //tools/ci

pipeline
{
	triggers
	{
		cron("@weekly")
		pollSCM("0 3 * * *") // Every day at 3:00am if there is any change.
	}
	agent
	{
		dockerfile
		{
			filename "tools/ci/jenkins/Dockerfile"
			// Only a single args argument can be used
			args "-v /cache:/cache -e DOCKER_HOST=tcp://localhost:2375 --network host"
		}
	}
	stages
	{
		stage("Environment")
		{
			steps
			{
				sh "cp tools/ci/jenkins/.bazelrc.local .bazelrc.local"
				sh "git submodule foreach --recursive git clean -xfd"
				sh "git submodule foreach --recursive git reset --hard"
				sh "git submodule update --init --recursive"
				sh "ls -ll /"
				sh "./info.sh"
			}
		}
		stage("Fetch")
		{
			steps
			{
				sh "./tools/bazel fetch //..."
				sh "./tools/bazel run tools/docker_images:xtensa_qemu"
			}
		}
		// Parallelized tests are done here
		stage("Tests")
		{
			parallel
			{
				{% for stage in stages %}
				stage("[{{ stage.category }}] {{ stage.name }}")
				{
					steps
					{
						{% if stage.category == "coverage" %}
						lock("coverage")
						{
							{% for command in stage.commands %}
							sh "{{ command }}"
							{% end %}
						}
						archiveArtifacts artifacts: "{{ stage.output }}/**/*", onlyIfSuccessful: true
						{% else %}
							{% for command in stage.commands %}
						sh "{{ command }}"
							{% end %}
						{% end %}
					}
				}
				{% end %}
			}
		}
		// Auto publish some artifacts
		stage("Publish")
		{
			steps
			{
				sh "./tools/bazel run apps/dashboard:push"
				sh "./tools/bazel run apps/family:push"
				sh "./tools/bazel run apps/artifacts:push"
			}
		}
	}
    post {
        always {
			sh "./info.sh"
        }
    }
}
