{
    "stages": [
        {
            "commands": [
                "./tools/bazel test ... --output_groups=+metadata --config=dev --config=clang_tidy --platform_suffix=clang_tidy"
            ],
            "name": "clang-tidy",
            "tags": [
                "x86_64",
                "clang"
            ]
        },
        {
            "commands": [
                "./tools/bazel test ... --output_groups=+metadata --config=linux_x86_64_clang --config=prod --config=cc --platform_suffix=linux_x86_64_clang_prod"
            ],
            "name": "linux_x86_64_clang prod",
            "tags": [
                "x86_64",
                "clang"
            ]
        },
        {
            "commands": [
                "./tools/bazel test ... --output_groups=+metadata --config=linux_x86_64_gcc --config=prod --config=cc --platform_suffix=linux_x86_64_gcc_prod"
            ],
            "name": "linux_x86_64_gcc prod",
            "tags": [
                "x86_64",
                "gcc"
            ]
        },
        {
            "commands": [
                "./tools/bazel run tools/docker_images:xtensa_qemu",
                "./tools/bazel test ... --output_groups=+metadata --config=esp32_xtensa_lx6_gcc --config=prod --config=cc --platform_suffix=esp32_xtensa_lx6_gcc_prod"
            ],
            "name": "esp32_xtensa_lx6_gcc prod",
            "tags": [
                "esp32",
                "gcc"
            ]
        },
        {
            "category": "stress",
            "commands": [
                "./tools/bazel test ... --build_tests_only --test_tag_filters=stress,-cc-coverage --config=dev --runs_per_test={runs} --platform_suffix=stress_dev"
            ],
            "name": "dev ({runs} runs)",
            "tags": [
                "x86_64",
                "clang",
                "dev"
            ]
        },
        {
            "category": "stress",
            "commands": [
                "./tools/bazel test ... --build_tests_only --test_tag_filters=stress,-cc-coverage --config=prod --runs_per_test={runs} --platform_suffix=stress_prod"
            ],
            "name": "prod ({runs} runs)",
            "tags": [
                "x86_64",
                "clang",
                "prod"
            ]
        },
        {
            "category": "sanitizer",
            "commands": [
                "./tools/bazel test ... --config=linux_x86_64_clang --config=cc --config=sanitizer --config=asan --config=lsan --config=ubsan --platform_suffix=clang_asan_lsan_ubsan"
            ],
            "name": "asan/lsan/ubsan",
            "tags": [
                "x86_64",
                "clang",
                "static_analyzer"
            ]
        },
        {
            "category": "sanitizer",
            "commands": [
                "./tools/bazel test ... --config=linux_x86_64_clang --config=cc --config=sanitizer --config=tsan --platform_suffix=clang_tsan"
            ],
            "name": "tsan",
            "tags": [
                "x86_64",
                "clang",
                "static_analyzer"
            ]
        },
        {
            "category": "coverage",
            "commands": [
                "./tools/bazel coverage cc/... --config=linux_x86_64_gcc --config=cc --platform_suffix=coverage_cc && ./tools/bazel run tools/coverage --platform_suffix=coverage_cc -- --output bazel-out/coverage_cc"
            ],
            "name": "C++",
            "output": "bazel-out/coverage_cc",
            "tags": [
                "x86_64",
                "cc"
            ]
        },
        {
            "category": "coverage",
            "commands": [
                "./tools/bazel coverage ... --config=nodejs --platform_suffix=coverage_nodejs && ./tools/bazel run tools/coverage --platform_suffix=coverage_nodejs -- --output bazel-out/coverage_nodejs"
            ],
            "name": "NodeJs",
            "output": "bazel-out/coverage_nodejs",
            "tags": [
                "x86_64",
                "nodejs"
            ]
        },
        {
            "category": "sanitizer",
            "commands": [
                "./sanitize.sh"
            ],
            "name": "sanitizer",
            "tags": []
        }
    ]
}