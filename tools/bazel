#!/usr/bin/python3
# -*- coding: iso-8859-1 -*-

import argparse
import os
import sys
import subprocess
import urllib.request
import stat
import shutil

if __name__== "__main__":

	parser = argparse.ArgumentParser()
	parser.add_argument("command", nargs="?", default=None)
	args, unknown = parser.parse_known_args()

	bazelDirectory = os.path.dirname(os.path.realpath(__file__))
	workspaceDirectory = os.path.dirname(bazelDirectory)
	bazeliskInstallPath = os.path.join(bazelDirectory, "bazelisk")
	bazelExecPath = os.environ["BAZEL_REAL"] if "BAZEL_REAL" in os.environ else bazeliskInstallPath

	# If bazel is not installed / available
	if not os.path.exists(bazelExecPath):
		url = "https://github.com/bazelbuild/bazelisk/releases/download/v1.5.0/bazelisk-linux-amd64"
		print("No bazel binary detected, downloading bazelisk from {}...".format(url))
		with urllib.request.urlopen(url) as response, open(bazeliskInstallPath, 'wb') as f:
			shutil.copyfileobj(response, f)

		# Set permissions and update bazel binary path
		st = os.stat(bazeliskInstallPath)
		os.chmod(bazeliskInstallPath, st.st_mode | stat.S_IEXEC)
		bazelExecPath = bazeliskInstallPath

	# Forward commands to the real bazel
	subprocess.run([bazelExecPath] + sys.argv[1:])

	# Generate the coverage report
	if args.command == "coverage":
		subprocess.run([bazelExecPath, "run", "//tools/coverage:report", "--",
				"--show-details",
				"--sort",
				"--function-coverage",
				"--output-directory",
				"bazel-out/coverage",
				"bazel-out/_coverage/_coverage_report.dat"])
		print("Coverage report: {}".format(os.path.join(workspaceDirectory, "bazel-out/coverage/index.html")))
