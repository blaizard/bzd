{#- macro section -#}

{%- macro declareUsing(data) %}
{{ data.comment | normalComment }}using {{ data.name }} = {{ data.type | typeToStr }}{% if not data.contracts.empty %} [{% for i, contract in data.contracts %}{% if i %}, {% end %}{{ contract.comment | inlineComment }}{{ contract.type }}{% if contract.isValue %} = {{ contract.value }}{% end %}{% end %}]{% end %};{% end -%}

{%- macro declareMethod(data) %}
{{ data.comment | normalComment }}method {{ data.name }}({% for i, var in data.args %}{{ var.name }} = {% if var.const %}const {% end %}{{ var.type | typeToStr }}{% for i, arg in var.args %}({%if i %}, {% end %}{{ arg.value }}){% end %}{% if i %},{% end %}{% end %}){% if data.isType %} -> {{ data.type | typeToStr }}{% end %};{% end -%}

{%- macro declareEnum(data) %}
{{ data.comment | normalComment }}enum {{ data.name }}
{
	{% for i, value in data.values %}
		{% if i %},{% end %}
	{{ value.comment | normalComment }}{{ value.name }}
	{% end %}
}
{% end -%}

{%- macro declareNested(data) %}
{{ data.comment | normalComment }}{{ data.type }} {{ data.name }}{% if data.hasInheritance %} : {{ data.inheritanceList | inheritanceToStr }}
{% end %}
{
	{{ declareSymbols(data.nested.symbols) }}
	{% if data.isConfig %}
config:
	{{ declareSymbols(data.config.symbols) }}
	{% end %}
	{% if data.isComposition %}
composition:
	{{ declareSymbols(data.composition.symbols) }}
	{% end %}
}
{% end -%}

{%- macro declareExpression(data) %}
{{ data.comment | normalComment }}{{ data.name }} = {% if data.const %}const {% end %}{{ data.type | typeToStr }}{% for i, arg in data.args %}({%if i %}, {% end %}{{ arg.value }}){% end %}{% if not data.contracts.empty %} [{% for i, contract in data.contracts %}{% if i %}, {% end %}{{ contract.comment | inlineComment }}{{ contract.type }}{% if contract.isValue %} = {{ contract.value }}{% end %}{% end %}]{% end %};{% end -%}

{%- macro declareSymbols(sequence) %}
	{% for data in sequence %}
		{% if data.category == "using" %}
{{ declareUsing(data) }}
		{% elif data.category == "enum" %}
{{ declareEnum(data) }}
		{% elif data.category == "method" %}
{{ declareMethod(data) }}
		{% elif data.category == "nested" %}
{{ declareNested(data) }}
		{% elif data.category == "expression" %}
{{ declareExpression(data) }}
		{% end %}
	{% end %}
{% end -%}


{#- end of macros -#}

{% for use in useList %}
use "{{ use.path }}"
{% end %}

{%- if isNamespace %}
namespace {{ namespace | namespaceToStr }};
{% end %}

{{ declareSymbols(symbols) }}
