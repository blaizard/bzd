{#- macro section -#}

{%- macro declareContract(contracts) -%}
{% if not contracts.empty %} [{% for i, contract in contracts %}{% if i %} {% end %}{{ contract.comment | inlineComment }}{{ contract.type }}{% if contract.isValue %}({% for i, value in contract.values %}{% if i %},{% end %}{{ value }}{% end %}){% end %}{% end %}]{% end %}
{%- end -%}

{%- macro declareUsing(data) %}
{{ data.comment | normalComment }}using {{ data.name }} = {{ data.symbol | symbolToStr }}{{ declareContract(data.contracts) }};{% end -%}

{%- macro declareMethod(data) %}
{{ data.comment | normalComment }}method {{ data.name }}({{ printParameters(data.parameters) }}){{ declareContract(data.contracts) }}{% if data.isSymbol %} -> {{ data.symbol | symbolToStr }}{% end %};{% end -%}

{%- macro declareEnum(data) %}
{{ data.comment | normalComment }}enum {{ data.name }}
{
	{% for i, value in data.values %}
		{% if i %},{% end %}
	{{ value.comment | normalComment }}{{ value.name }}
	{% end %}
}
{% end -%}

{%- macro declareNested(data) %}
{{ data.comment | normalComment }}{{ data.category.value }}{% if data.isName %} {{ data.name }}{% end %}{{ declareContract(data.contracts) }}{% if data.hasInheritance %} : {{ data.inheritanceList | inheritanceToStr }}
{%- end %} {
	{% if data.isInterface %}
		{% if data.category.value == "component" %}
interface:
		{% end %}
	{{ declareSymbols(data.interface.sequence) }}
	{% end %}
	{% if data.isConfigRaw %}
config:
	{{ declareSymbols(data.configRaw.sequence) }}
	{% end %}
	{% if data.isComposition %}
		{% if data.category.value != "composition" %}
composition:
		{% end %}
	{{ declareSymbols(data.composition.sequence) }}
	{% end %}
}
{% end -%}

{%- macro declareExpressionFragments(fragments) -%}
	{%- for fragment in fragments %}
		{%- if not loop.first %} {% end %}
		{%- if fragment.isValue %}
			{{- fragment.value }}
		{%- elif fragment.isSymbol %}
			{{- fragment.symbol | symbolToStr }}
			{%- if fragment.isParameters %}({{ printParameters(fragment.parameters) }}){% end %}
		{%- elif fragment.isOperator %}
			{{- fragment.operator }}
		{%- elif fragment.isRegexprAttr -%}
			/{{ fragment.regexprAttr }}/
		{%- end %}
	{%- end %}
{%- end -%}

{%- macro declareExpression(data) -%}
	{{ data.comment | normalComment }}{% if data.isName %}{{ data.name }}{% if data.isVarArgs %}...{% end %}{% if data.isInterfaceType %}: {{ data.interfaceType | symbolToStr }}{% end %} = {% end %}{{- declareExpressionFragments(data.fragments) -}}{{ declareContract(data.contracts) }}
{%- end -%}

{%- macro printParameters(parameters) -%}
	{% for i, expression in parameters %}{%if i %}, {% end %}{{ declareExpression(expression) }}{% end %}
{%- end -%}

{%- macro declareSymbols(data) %}
	{% for entity in data %}
		{% if not entity.isExtern %}
			{% if entity.category == Category.using %}
{{ declareUsing(entity) }}
			{% elif entity.category == Category.enum %}
{{ declareEnum(entity) }}
			{% elif entity.category == Category.method %}
{{ declareMethod(entity) }}
			{% elif entity.category == Category.struct %}
{{ declareNested(entity) }}
			{% elif entity.category == Category.interface %}
{{ declareNested(entity) }}
			{% elif entity.category == Category.component %}
{{ declareNested(entity) }}
			{% elif entity.category == Category.composition %}
{{ declareNested(entity) }}
			{% elif entity.category == Category.expression %}
{{ declareExpression(entity) }};
			{% end %}
		{% end %}
	{% end %}
{% end -%}

{#- end of macros -#}

{% for use in useList %}
use "{{ use.path }}"
{% end %}

{% for entity in namespaceList %}
namespace {{ entity | namespaceToStr }};
{% end %}

{% for entity in sequence %}
	{% if entity.isExtern %}
{{ entity.comment | normalComment }}extern {{ entity.category.value }} {{ entity.name }};
	{% end %}
{% end %}

{{ declareSymbols(sequence) }}
