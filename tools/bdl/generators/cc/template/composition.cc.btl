{#- Re-usable macros -#}
{%- include "tools/bdl/generators/cc/template/declarations.h.btl" -%}

#include "cc/bzd/core/logger.hh"
#include "cc/bzd/platform/clock.hh"
#include "cc/bzd/platform/stream.hh"
{% for path in includes %}
#include "{{ path }}"
{% end %}

// Backend platform symbols
namespace bzd::platform::backend {

bzd::OStream* out{nullptr};
bzd::IStream* in{nullptr};
bzd::Clock* steadyClock{nullptr};
bzd::Clock* systemClock{nullptr};

} // namespace bzd::platform::backend

// for deploy in deployments

/**
 * Auto-generated application registry.
 */
[[nodiscard]] auto makeRegistry() noexcept
{
	// Definition of all registry entries.
	{% for expresssion in registry %}
	static {{ expresssion.typeResolved | typeDefinitionToStr }} {{ expresssion.fqn | fqnToNameStr }}{ {{- declareParametersResolvedValues(expresssion.parametersResolved, false) -}} };
	{% end %}

	// Declaration of the registry.
	struct Registry
	{
		{% for expresssion in registry %}
		decltype({{ expresssion.fqn | fqnToNameStr }})& {{ expresssion.fqn | fqnToNameStr }}_;
		{% end %}
	};
	return Registry{ {%- for i, expresssion in registry %}{% if i %}, {% end %}{{ expresssion.fqn | fqnToNameStr }}{% end -%} };
}

/**
 * Initialize and compose the application.
 */
bool execute() noexcept
{
	// Create registry.
	[[maybe_unused]] auto registry = makeRegistry();

	// Initialize registry if needed and assign special symbols
	// to their platform backend if applicable.
	//bzd::log::info(CSTR("Initialization phase.")).sync();
	{% for item in initialization %}
		{% if item.isCall %}
	{{ item.call.type | typeRegistryToStr }}( {{- declareParametersResolvedValues(item.call.parametersResolved, true) -}} );
		{% end %}
		{% if item.fqn == "out" %}
	bzd::platform::backend::out = &registry.{{ item.fqn | fqnToNameStr }}_;
		{% elif item.fqn == "in" %}
	bzd::platform::backend::in = &registry.{{ item.fqn | fqnToNameStr }}_;
		{% elif item.fqn == "steadyClock" %}
	bzd::platform::backend::steadyClock = &registry.{{ item.fqn | fqnToNameStr }}_;
		{% elif item.fqn == "systemClock" %}
	bzd::platform::backend::systemClock = &registry.{{ item.fqn | fqnToNameStr }}_;
		{% end %}
	{% end %}

	// Compose.
	bzd::log::info(CSTR("Composition phase.")).sync();
	{% for index, expresssion in composition %}
	auto promise{{ index }} = {{ expresssion.type | typeRegistryToStr }}( {{- declareParametersResolvedValues(expresssion.parametersResolved, true) -}} );
	registry.{{ expresssion.executor | fqnToNameStr }}_.enqueue(promise{{ index }});
	{% end %}

	// Execute.
	bzd::log::info(CSTR("Execution phase.")).sync();
	{% for executor in executors %}
	registry.{{ executor | fqnToNameStr }}_.start();
	{% end %}

	// Wait until completion.
	{% for executor in executors %}
	registry.{{ executor | fqnToNameStr }}_.stop();
	{% end %}

	bzd::log::info(CSTR("Completion.")).sync();

	bool isSuccess{true};
	{% for index, expresssion in composition %}
	isSuccess &= promise{{ index }}.moveResultOut()->hasValue();
	{% end %}

	return isSuccess;
}
