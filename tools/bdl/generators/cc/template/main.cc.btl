{#- Re-usable macros -#}
{%- include "tools/bdl/generators/cc/template/declarations.h.btl" -%}

#include "cc/bzd/core/logger.hh"
#include "cc/bzd/platform/backend/backend.hh"
{% for path in includes %}
#include "{{ path }}"
{% end %}

// for deploy in deployments

/**
 * Auto-generated application registry.
 */
[[nodiscard]] auto getOrMakeRegistry() noexcept
{
	// Definition of all registry entries.
	{% for expresssion in registry %}
	static {{ expresssion.typeResolved | typeDefinitionToStr }} {{ expresssion.fqn | fqnToNameStr }}{ {{- declareParametersResolvedValues(expresssion.parametersResolved, false) -}} };
	{% end %}

	// Declaration of the registry.
	struct Registry
	{
		{% for expresssion in registry %}
		decltype({{ expresssion.fqn | fqnToNameStr }})& {{ expresssion.fqn | fqnToNameStr }}_;
		{% end %}
	};
	return Registry{ {%- for i, expresssion in registry %}{% if i %}, {% end %}{{ expresssion.fqn | fqnToNameStr }}{% end -%} };
}

/**
 * Initialize and compose the application.
 */
void execute() noexcept
{
	// Create registry.
	[[maybe_unused]] auto registry = getOrMakeRegistry();

	// Initialize.
	bzd::log::info(CSTR("Initialization phase.")).sync();
	{% for index, expresssion in compositions.init %}
	{{ expresssion.type | typeRegistryToStr }}( {{- declareParametersResolvedValues(expresssion.parametersResolved, true) -}} );
	{% end %}

	// Assign special symbols to public registry
	{% for expresssion in registry %}
		{% if expresssion.fqn == "out" %}
	bzd::platform::backend::setOut(registry.{{ expresssion.fqn | fqnToNameStr }}_);
		{% end %}
	{% end %}

	// Compose.
	bzd::log::info(CSTR("Composition phase.")).sync();
	{% for index, expresssion in compositions.compose %}
	auto promise{{ index }} = {{ expresssion.type | typeRegistryToStr }}( {{- declareParametersResolvedValues(expresssion.parametersResolved, true) -}} );
	registry.{{ expresssion.executor | fqnToNameStr }}_.enqueue(promise{{ index }});
	{% end %}

	// Execute.
	bzd::log::info(CSTR("Execution phase.")).sync();
	{% for executor in executors %}
	registry.{{ executor | fqnToNameStr }}_.start();
	{% end %}

	// Wait until completion.
	{% for executor in executors %}
	registry.{{ executor | fqnToNameStr }}_.stop();
	{% end %}

	bzd::log::info(CSTR("Completion.")).sync();
}

// Deployment part

int main()
{
	execute();

	return 0;
}

/*
{ deployment.main.declaration }

int main()
{
	{ deploy.main.execution }

	return 0;
}

{ deployment.core2.declaration }

int main2()
{
	{ deploy.core2.execution }

	return 0;
}
*/
