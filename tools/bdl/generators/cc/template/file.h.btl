{#- Re-usable macros -#}
{%- include "tools/bdl/generators/cc/template/declarations.h.btl" -%}

{#- Contract assertion -#}
{%- macro makeContractAssertions(contracts) %}
	{% for contract in contracts %}
		{% if contract.type == "min" %}
// Minimum contract
assert(value >= {{ contract.value }});
		{% elif contract.type == "max" %}
// Maximum contract
assert(value <= {{ contract.value }});
		{% end %}
	{% end %} 
{% end -%}

{#- Start of the actual template -#}

#pragma once

#include <cassert>

#include "tools/bdl/generators/cc/adapter/types.hh"

// **** Dependencies ****
{% for path in includes %}
#include "{{ path }}"
{% end %}
// ****

{% if isNamespace %}
namespace {{ namespace | namespaceToStr }}
{
{% end %}

{{- declareTrivialTypes(sequence) -}}

{% for data in nestedList %}
	{% if not data.isExtern %}
		{% if data.category == Category.interface %}

// ==== Interface {{ data.name }}
template <class Impl>
{{ data.comment | commentBlockToStr }}class {{ data.name }}{% if data.hasInheritance %} : {{ data.inheritanceList | inheritanceToStr }}{% end %}
{
public: // Types
	{{ declareTrivialTypes(data.interface.sequence) }}

public: // Methods

			{% for method in data.interface.methodList %}
	{{ method.comment | commentBlockToStr }}{% if method.isSymbol %}[[nodiscard]] {% end %}{{ declareMethod(method) }} noexcept
	{
		return ::bzd::impl::getImplementation(this, &{{ data.name }}::{{ method.name }}, &Impl::{{ method.name }})->{{ method.name }}({{ declareParametersCall(method.parameters) }});
	}

			{% end %}

public: // Variable accessors.

			{% for var in data.interface.expressionList %}
	// Getter for the variable '{{ var.name }}'.
	{{ var.comment | commentBlockToStr -}}
	// \return The value of '{{ var.name }}'.
	[[nodiscard]] constexpr {{ var.symbol | typeReferenceToStr }} {{ var.name }}() const noexcept
	{
		return static_cast<Impl*>(this)->{{ var.name }};
	}

			{% end %}
};

		{%- end -%}
	{%- end -%}

{%- end %}

{%- if isNamespace %}
}
{%- end %}

namespace bzd
{
{% for data in nestedList %}
	{% if data.category == Category.interface %}
template <>
struct Interface<"{{ data.fqn }}">
{
	template <class Impl>
	[[nodiscard]] static constexpr auto& cast(Impl& impl) noexcept
	{
		return ::bzd::impl::getInterface<{{ namespace | namespaceToStr }}::{{ data.name }}>(impl);
	}
};
	{% end %}
{% end %}
{% for data in nestedList %}
	{% if not data.isExtern %}
		{% if data.category in btl.set(Category.component, Category.interface) %}
			{% for var in data.interface.expressionList %}
template <>
struct Data<"{{ var.fqn }}">
{
	using Type = {{ var.symbol | typeNonConstToStr }};
	static UInt32 id;
};
			{% end %}
		{% end %}
	{% end %}
{% end %}
}
