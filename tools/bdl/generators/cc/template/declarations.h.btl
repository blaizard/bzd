{#- Enum -#}
{%- macro declareEnum(element) %}
{{ element.comment | commentBlockToStr }}enum class {{ element.name }} : bzd::UInt8Type
{
	{% for i, value in element.values %}
		{% if i %},{% end %}
	{{ value.comment | commentBlockToStr }}{{ value.name }}
	{% end %}
};
{% end -%}

{#- Expressions
	normal           -> /* comment */ int myvar = int{value}
	no default value -> /* comment */ int myvar
	unamed           -> /* comment */ int{value}
	unamed literal   -> /* comment */ 12
	literal          -> /* comment */ myvar = 12

	Used when:
	- Define a variable.
	- Define parameter list of a function.
-#}
{%- macro declareExpression(element, prepend, reference) -%}
	{{ element.comment | commentEmbeddedToStr }}
	{%- if element.isType -%}
	{% if element.isName %}{% if reference %}{{- element.type | typeReferenceToStr }}{% else %}{{- element.type | typeToStr }}{% end %} {{ element.name }}{{ prepend }}{% end %}{% if element.parametersResolved.size > 0 %} = {{ element.type | typeToStr }}{ {{- declareParametersResolvedValues(element.parametersResolved, false) -}} }{% end %}
	{%- elif element.isValue -%}
	{% if element.isName %} {{ element.name }}{{ prepend }} = {% end %}{{ element.value }}
	{%- end -%}
{%- end -%}

{#- Parameters types -#}
{%- macro declareParametersResolvedTypes(parameters) -%}
	{%- for i, expression in parameters %}{% if i %}, {% end -%}
		{{- expression | commentParametersResolvedToStr -}}
		{%- if expression.isType -%}
			{# Must be a type. #}
			{{- expression.type | typeToStr }}
		{%- end -%}
	{%- end -%}
{%- end -%}

{#- Parameters values -#}
{%- macro declareParametersResolvedValues(parameters, registry) -%}
	{%- for i, expression in parameters %}{% if i %}, {% end -%}
		{{- expression | commentParametersResolvedToStr -}}
		{%- if expression.isType -%}
			{%- if expression.isName -%}
				{# On values there must be a FQN available. #}
				{%- if registry -%}
					{{- expression.fqnToType | typeRegistryToStr -}}
				{%- else -%}
					{{- expression.fqnToType | typeToStr -}}
				{%- end -%}
			{%- else -%}
				{# Object instanciation. #}
				{{- expression.type | typeToStr }}{ {{- declareParametersResolvedValues(expression.parametersResolved, registry) -}} }
			{%- end -%}
		{%- else -%}
			{# Literal. #}
			{{- expression.value -}}
		{%- end -%}
	{%- end -%}
{%- end -%}

{#- Parameters -#}
{%- macro declareParameters(parameters, reference) -%}
	{%- for i, expression in parameters %}{% if i %}, {% end %}{{ declareExpression(expression, "", reference) }}{% end -%}
{% end -%}

{#- Parameters for call -#}
{%- macro declareParametersCall(parameters) -%}
	{%- for i, expression in parameters %}{% if i %}, {% end %}{{ expression.name }}{% end -%}
{% end -%}

{#- Nested structure -#}
{%- macro declareStruct(element) %}
{{ element.comment | commentBlockToStr }}struct {{ element.name }}{% if element.hasInheritance %} : {{ element.inheritanceList | inheritanceToStr }}{% end %}
{
	{{ declareTrivialTypes(element.nested.sequence) }}
	{% for element in element.nested.expressionList %}
	{{ declareExpression(element, "", false) }};
	{% end %}
};
{% end -%}

{#- Build types -#}
{%- macro declareTrivialTypes(trivialTypes) %}
	{% for data in trivialTypes %}
		{% if data.category == "using" %}
{{ data.comment | commentBlockToStr }}using {{ data.name }} = {{ data.type | typeToStr }};
		{% elif data.category == "enum" %}
{{ declareEnum(data) }}
		{% elif data.category == "nested" %}
			{% if data.type == "struct" %} 
{{ declareStruct(data) }}
			{% end %}
		{% end %}
	{% end %}
{% end -%}
