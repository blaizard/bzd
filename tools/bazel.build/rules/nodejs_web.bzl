load("//tools/bazel.build:binary_wrapper.bzl", "sh_binary_wrapper_impl")
load("//tools/bazel.build/rules:nodejs.bzl", "bzd_nodejs_library", "bzd_nodejs_install", "BzdNodeJsInstallProvider", "BzdNodeJsDepsProvider")

BzdNodeJsWebProvider = provider(fields = ["tar"])

"""
Build and package a web application with webpack
"""
def _bzd_nodejs_web_build_impl(ctx):

    # Retrieve install artefacts generated by ctx.attr.install
    node_modules = ctx.attr.internal_install[BzdNodeJsInstallProvider].node_modules
    package_json = ctx.attr.internal_install[BzdNodeJsInstallProvider].package_json

    # Retrieve source files
    srcs = ctx.attr.internal_install[BzdNodeJsDepsProvider].srcs.to_list()

    # --- Generate the webpack.config.json file
    webpack_config = ctx.actions.declare_file("webpack.config.js")

    # alias
    aliases = ""
    if ctx.attr.alias:
        aliases = "\"[{}]\": Path.join(Path.resolve(__dirname), \"{}\"),\n".format(ctx.attr.alias, ctx.label.package)

    # entries and templates
    entries = ""
    templates = ""
    for entry_point, name in ctx.attr.entries.items():

        entry_point_files = entry_point.files.to_list()
        if len(entry_point_files) != 1:
            fail("Only a single file should be associated with entry '{}'.".format(name))
        entries += "\"{}\": Path.join(Path.resolve(__dirname), \"{}\"),\n".format(name, entry_point_files[0].short_path)

        # For HTML templates
        templates += "\"{}\": {{ entryId: \"{}\" }},".format(name, name)

    # Generate the template file
    ctx.actions.expand_template(
        template = ctx.file._webpack_config_template,
        output = webpack_config,
        substitutions = {
            "{public_path}": ctx.attr.public_path,
            "{aliases}": aliases,
            "{entries}": entries,
            "{templates}": templates,
        },
    )

    # Gather toolchain manager
    manager = ctx.toolchains["//tools/bazel.build/toolchains/nodejs:toolchain_type"].manager

    # Create a wrapped binary to have a self contained execution environment
    return sh_binary_wrapper_impl(
        ctx = ctx,
        binary = manager.binary,
        output = ctx.outputs.executable,
        command = """
        {binary} --cwd "{workspace}" run build --output-path ".bzd/output"
        tar -cf "$1" -C "{workspace}/.bzd/output" .
        """,
        extra_runfiles = [webpack_config, package_json, node_modules] + srcs,
        symlinks = {
            "node_modules": node_modules,
            "package.json": package_json,
            "webpack.config.js": webpack_config
        },
    )

_bzd_nodejs_web_build = rule(
    implementation = _bzd_nodejs_web_build_impl,
    attrs = {
        "alias": attr.string(
            doc = "Name of the alias, available in the form [name], for the current directory.",
        ),
        "entries": attr.label_keyed_string_dict(
            allow_files = True,
            doc = "Associate entry names with source entry point.",
        ),
        "public_path": attr.string(
            default = "/",
            doc = "Defines from which path the user will access these entries.",
        ),
        "internal_install": attr.label(
            mandatory = True,
            cfg = "target",
        ),
        "_webpack_config_template": attr.label(
            default = Label("//tools/bazel.build/rules/assets/nodejs:webpack_config_template"),
            allow_single_file = True,
        ),
    },
    executable = True,
    toolchains = ["//tools/bazel.build/toolchains/nodejs:toolchain_type"],
)

"""
NodeJs web application executor
"""
def _bzd_nodejs_web_exec_impl(ctx):

    # Build the application
    package = ctx.actions.declare_file(".bzd/nodejs_web_{}.tar".format(ctx.label.name))
    ctx.actions.run(
        inputs = [],
        outputs = [package],
        arguments = [package.path],
        progress_message = "Building {}".format(ctx.label),
        executable = ctx.executable.build
    )

    runfile = sh_binary_wrapper_impl(
        ctx = ctx,
        binary = ctx.attr._web_server,
        output = ctx.outputs.executable,
        command = "{{binary}} $@ \"{}\"".format(package.short_path),
        extra_runfiles = [package],
    )

    return [runfile, BzdNodeJsWebProvider(tar = package)]

_bzd_nodejs_web_exec = rule(
    implementation = _bzd_nodejs_web_exec_impl,
    attrs = {
        "build": attr.label(
            executable = True,
            cfg = "target",
        ),
        "_web_server": attr.label(
            executable = True,
            cfg = "target",
            allow_files = True,
            default = Label("//tools/scripts:web_server"),
        )
    },
    executable = True,
)

"""
Public macro to create a web application with NodeJs
"""
def bzd_nodejs_web(name, srcs = [], packages = {}, deps = [], **kwargs):

    # Create a library with the sources and packages
    bzd_nodejs_library(
        name = name + ".library",
        srcs = srcs,
        packages = packages,
    )

    # Gather dependencies and install the packages
    bzd_nodejs_install(
        name = name + ".install",
        deps = deps + [
            name + ".library",
            "//platform/nodejs:webpack",
        ],
        srcs = srcs,
    )

    # Build the web application and packs it
    _bzd_nodejs_web_build(
        name = name + ".build",
        internal_install = name + ".install",
        **kwargs
    )

    # Generate the executable
    _bzd_nodejs_web_exec(
        name = name,
        build = name + ".build",
    )
