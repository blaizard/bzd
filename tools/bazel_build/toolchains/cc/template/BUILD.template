package(default_visibility = ["//visibility:public"])

load("@//tools/bazel_build/toolchains/cc:unix_cc_toolchain_config.bzl", "cc_toolchain_config")
load("@//tools/bazel_build/toolchains/binary:defs.bzl", "binary_toolchain")

# C++ toolchain

filegroup(
    name = "wrappers",
    srcs = glob([
		"bin/wrapper_*"
	]),
)

filegroup(
    name = "all_files",
    srcs = [
        %{all_files}
        ":ar_files",
        ":as_files",
        ":compiler_files",
        ":linker_files",
        ":objcopy_files",
        ":strip_files",
        ":dynamic_libraries_files",
        ":static_libraries_files"
    ],
)

filegroup(name = "empty")

filegroup(
    name = "ar_files",
    srcs = [
        ":wrappers",
        %{ar_files}
    ]
)

filegroup(
    name = "as_files",
    srcs = [
        ":wrappers",
        %{as_files}
    ]
)

filegroup(
    name = "compiler_files",
    srcs = [
        ":wrappers",
        %{compiler_files}
    ]
)

filegroup(
    name = "linker_files",
    srcs = [
        ":wrappers",
        %{linker_files}
    ]
)

filegroup(
    name = "objcopy_files",
    srcs = [
        ":wrappers",
        %{objcopy_files}
    ]
)

filegroup(
    name = "strip_files",
    srcs = [
        ":wrappers",
        %{strip_files}
    ]
)

filegroup(
    name = "dynamic_libraries_files",
    srcs = [
        %{dynamic_libraries_files}
    ]
)

filegroup(
    name = "static_libraries_files",
    srcs = [
        %{static_libraries_files}
    ]
)

cc_toolchain_config(
    name = "cc-toolchain-config",
    cpu = "%{cpu}",
    compiler = "%{compiler}",
    toolchain_identifier = "cc-toolchain-identifier-%{cpu}-%{compiler}",
    host_system_name = "i686-unknown-linux-gnu",
    target_system_name = "local",
    target_libc = "glibc_unknown",
    abi_version = "local",
    abi_libc_version = "local",
    cxx_builtin_include_directories = [
        %{builtin_include_directories}
    ],
    tool_paths = {
        "gcc": "bin/wrapper_cc",
        "cpp": "bin/wrapper_cpp",
        "ar": "bin/wrapper_ar",
        "nm": "bin/wrapper_nm",
        "ld": "bin/wrapper_ld",
        "as": "bin/wrapper_as",
        "objcopy": "bin/wrapper_objcopy",
        "gcov": "bin/wrapper_cov",
        "llvm-cov": "bin/wrapper_cov",
        "objdump": "bin/wrapper_objdump",
        "strip": "bin/wrapper_strip",
    },
    compile_flags = [
        %{compile_flags}
    ],
    dbg_compile_flags = [
        %{compile_dev_flags}
    ],
    opt_compile_flags = [
        %{compile_prod_flags}
    ],
    cxx_flags = [],
    link_flags = [
        %{link_flags}
    ],
    link_libs = [],
    opt_link_flags = [],
    coverage_compile_flags = [
        %{coverage_compile_flags}
    ],
    coverage_link_flags = [
        %{coverage_link_flags}
    ],
    unfiltered_compile_flags = [],
    supports_start_end_lib = False,
)

cc_toolchain(
    name = "cc_toolchain",
    all_files = ":all_files",
    ar_files = ":ar_files",
    as_files = ":as_files",
    compiler_files = ":compiler_files",
    dwp_files = ":empty",
    linker_files = ":linker_files",
    objcopy_files = ":objcopy_files",
    strip_files = ":strip_files",

    dynamic_runtime_lib = ":dynamic_libraries_files",
    static_runtime_lib = ":static_libraries_files",

    toolchain_config = ":cc-toolchain-config",
    toolchain_identifier = "cc-toolchain-identifier-%{cpu}-%{compiler}",

    supports_param_files = True,
)

toolchain(
    name = "toolchain",
    exec_compatible_with = [
        %{exec_compatible_with}
    ],
    target_compatible_with = [
        ":compiler",
        %{target_compatible_with}
    ],
    toolchain = ":cc_toolchain",
    toolchain_type = "@rules_cc//cc:toolchain_type",
)

# Binary toolchain

binary_toolchain(
    name = "binary",
    %{binary_kwargs}
)

toolchain(
    name = "binary_toolchain",
    exec_compatible_with = [
        %{exec_compatible_with}
    ],
    target_compatible_with = [
        ":compiler",
        %{target_compatible_with}
    ],
    toolchain = ":binary",
    toolchain_type = "@//tools/bazel_build/toolchains/binary:toolchain_type",
)

# Platform definition

%{compiler_constraint_value}

platform(
    name = "platform",
    constraint_values = [
        ":compiler",
        %{target_compatible_with}
    ],
)

config_setting(
    name = "target",
    constraint_values = [
        ":compiler",
    ],
)

%{alias}
