/**
 * This file is the entry point of the style directory.
 * All form inputs responds to the following class and must therefore be implemented.
 * The class can also be inherited from one of their parents.
 * - irform-success: when the form field successfully validate
 * - irform-error: when it become an error
 * - irform-disable: when the field is disabled
 */

// ---- Configuration ----

@use "sass:math";
@use "#bzd/config.scss" as config;
@forward "#bzd/config.scss";

@mixin irform-border {
	border: #{config.$fieldBorderThickness}px solid config.$fieldBorderColor;
	border-radius: #{config.$fieldBorderRadius}px;
}

@mixin irform-focus {
	border-color: transparent;
	outline: 1px dashed config.$focusColor !important;
}

// ---- Functions ----

%reset {
	font-family: config.$font;
	font-size: #{config.$fieldTextHeight}px;
	min-height: #{config.$fieldHeight}px;
	line-height: #{config.$fieldHeight}px;
	margin: 0;
	padding: 0;
	box-sizing: border-box;
	outline: none;
	border: none;
	vertical-align: middle;
	display: inline-block;
	width: auto;
	appearance: none;
	background-clip: padding-box;
}

.irform-height-small {
	%reset {
		min-height: #{config.$fieldHeightSmall}px;
		line-height: #{config.$fieldHeightSmall}px;
	}
}

.irform-height-normal {
	%reset {
		min-height: #{config.$fieldHeightNormal}px;
		line-height: #{config.$fieldHeightNormal}px;
	}
}

.irform-height-large {
	%reset {
		min-height: #{config.$fieldHeightLarge}px;
		line-height: #{config.$fieldHeightLarge}px;
	}
}

%field-reset {
	@extend %reset;
	color: config.$fieldTextColor;
	background-color: config.$fieldBgColor;
	width: 100%;
	padding: #{config.$fieldPaddingY}px #{config.$fieldPaddingX}px;
}

%actioner-reset {
	@extend %reset;
	color: config.$actionerTextColor;
	background-color: config.$actionerBgColor;
	padding: #{config.$fieldPaddingY}px #{config.$fieldPaddingX}px;
}

/// Set this attribute if the element is intended to be multiline
%multi-line {
	overflow: hidden;
	height: auto;
	line-height: #{config.$fieldTextHeight * 1.1}px;
	padding-top: #{math.div(config.$fieldHeight - config.$fieldTextHeight * 1.1, 2)}px;
}

/// Generate the field borders
%border {
	box-shadow: none;
	outline: none;
	@include irform-border;
	overflow: hidden;

	&:focus,
	&:focus-within {
		@extend %focus;
	}
}

%border-multi-line {
	@extend %border;
	@include irform-border;
}

/// If applied, this rule will cancel the border rules previously set
%border-reset {
	border: 1px solid transparent !important;
	box-shadow: none !important;
	&:hover {
		box-shadow: 0 0 0 0 config.$fieldBorderColor !important;
	}
	&:focus,
	&:focus-within {
		box-shadow: 0 0 0 0 config.$fieldBorderColor !important;
		@extend %focus-reset;
	}
	&:active {
		margin-top: 0 !important;
	}
}

/// For fields that are intended to be clickable
/// \note The effect should only affect the background-image to avoid any
/// conflicts with the elements.
%clickable {
	cursor: pointer;

	transition: background-size 0.2s ease-out;

	background-position: center;
	background-size: 100% 100%;

	user-select: none;

	@keyframes clickableAnimation {
		0% {
			background-image: radial-gradient(circle at center, rgba(0, 0, 0, 0.16) 9%, transparent 10%, transparent 11%);
		}

		@for $i from 1 through 10 {
			#{$i * 10}% {
				background-image: radial-gradient(
					circle at center,
					rgba(0, 0, 0, min(math.div(0.16, math.div($i, 2.5)), 0.16)) 9%,
					transparent 10%,
					transparent 11%
				);
				background-size: ($i * 100 + 100) + 0% ($i * 100 + 100) + 0%;
			}
		}
	}

	@keyframes clickableClickAnimation {
		0% {
			background-image: radial-gradient(circle at center, rgba(0, 0, 0, 0.16) 9%, transparent 10%, transparent 11%);
		}

		@for $i from 1 through 10 {
			#{$i * 10}% {
				background-image: radial-gradient(
					circle at center,
					rgba(0, 0, 0, min(math.div(0.16, math.div($i, 2.5)), 0.16)) 9%,
					transparent 10%,
					transparent 11%
				);
				background-size: ($i * 100 + 100) + 0% ($i * 100 + 100) + 0%;
			}
		}
	}

	&:hover,
	&:focus {
		animation: clickableAnimation 0.25s 1;
		animation-fill-mode: forwards;
		opacity: 1;
	}

	&:active {
		animation: clickableClickAnimation 0.25s 1;
		animation-delay: 1s;
		animation-fill-mode: forwards;
		opacity: 1;
	}

	&:active {
		background-image: none;
	}
}

/// For draggable elements
%draggable {
	cursor: move;
	user-select: none;
	-moz-user-select: none;
	-webkit-user-select: none;
	-ms-user-select: none;
	-webkit-user-drag: none;
	user-drag: none;
	-webkit-touch-callout: none;
}

/// For an element that supports placeholder through the attribute data-placeholder
%placeholder {
	// :not(:focus) is a hack for Firefox, as the caret position on an empty element
	// have some issues otherwise, see https://bugzilla.mozilla.org/show_bug.cgi?id=904846
	&:not(:focus):empty:before,
	&::placeholder {
		content: attr(data-placeholder);
		color: config.$fieldPlaceholderColor;
		white-space: nowrap;
	}
}

/// For element that have a scrollbar
%scrollbar {
	&::-webkit-scrollbar {
		width: #{math.div(config.$fieldTextHeight, 2)}px;
		background-color: config.$disableBgColor;
	}
	&::-webkit-scrollbar-thumb {
		background-color: config.$disableColor;
	}
}

/// Button template
@mixin button($width, $color, $bgColor: transparent) {
	position: relative;
	width: #{$width}px;
	height: #{$width}px;
	cursor: pointer;
	color: $color;
	user-select: none;
	opacity: 0.5;
	display: inline-block;
	vertical-align: middle;

	text-align: center;
	line-height: #{$width}px;

	// Background
	border-radius: #{config.$fieldBorderRadius}px;
	background-color: $bgColor;

	@extend %clickable;
}

/// Close button
@mixin buttonClose($width, $color, $crossWidth: $width, $bgColor: transparent, $crossThickness: 2) {
	@include button($width, transparent, $bgColor);
	&:before,
	&:after {
		position: absolute;
		top: #{math.div($width - $crossWidth, 2)}px;
		left: #{math.div($width - $crossThickness, 2)}px;
		content: " ";
		height: #{$crossWidth}px;
		width: #{$crossThickness}px;
		background-color: $color;
	}
	&:before {
		transform: rotate(45deg);
	}
	&:after {
		transform: rotate(-45deg);
	}
}

/// Arrow button
@mixin buttonArrow($direction, $width, $color, $eltWidth, $bgColor: transparent, $eltThickness: 2) {
	@include button($width, transparent, $bgColor);
	&:before {
		box-sizing: border-box;
		position: absolute;
		top: #{math.div($width - $eltWidth, 2)}px;
		left: #{math.div($width - $eltWidth, 2)}px;
		content: " ";
		height: #{$eltWidth}px;
		width: #{$eltWidth}px;
		border-top: #{$eltThickness}px solid $color;
		border-right: #{$eltThickness}px solid $color;
		@if $direction == left {
			transform: rotate(-135deg);
		} @else if $direction == right {
			transform: rotate(45deg);
		}
	}
}

/// Error
%error {
	color: config.$errorColor;
}
%error-border {
	border-color: config.$errorColor;
}

/// Success
%success {
	color: config.$successColor;
}
%success-border {
	border-color: config.$successColor;
}

/// Disable
%disable {
	color: config.$disableTextColor;
	cursor: not-allowed !important;
}
%disable-border {
	border-color: config.$disableColor;
	background-color: config.$disableBgColor;
	box-shadow: none;
	outline: none;
	&:hover,
	&:focus,
	&:active {
		box-shadow: none !important;
		outline: none !important;
		background-image: none !important;
	}
}

/// Class to set when an element hass the focus
%focus {
	@include irform-focus;
}

%focus-reset {
	outline: none !important;
}
