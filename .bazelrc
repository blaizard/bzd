common --announce_rc

try-import .bazelrc.local

# Add timestamps
common --show_timestamps

# Build specific options
build --verbose_failures

# Set default options used by the default run
build "--strip=never"

# Global test specific options
test --test_output=errors
test --verbose_failures
test --define=type=test
# Use local docker configuration if present
test --action_env=DOCKER_HOST

# Global coverage specific options
coverage --combined_report=lcov
coverage --nobuild_tests_only
coverage --nocache_test_results
coverage --instrument_test_targets
coverage --collect_code_coverage

# Docker sandbox
build:docker_sandbox --strategy=NodejsUpdate=sandboxed

# Docker
build:docker --experimental_docker_verbose
build:docker --experimental_enable_docker_sandbox
build:docker --spawn_strategy=docker,sandboxed
build:docker --config=docker_sandbox

# Remote
build:remote --remote_executor=grpc://localhost:8980
build:remote --dynamic_mode=off
build:remote --spawn_strategy=remote,sandboxed
build:remote --remote_download_minimal
build:remote --disk_cache=
build:remote --define=EXECUTOR=remote
build:remote --config=docker_sandbox

# Select only C++ targets
build --build_tag_filters=-cc-coverage
test --test_tag_filters=-cc-coverage
build:cc --build_tag_filters=cc,-cc-coverage
test:cc --test_tag_filters=cc,-cc-coverage
coverage:cc --test_tag_filters=-cc,cc-coverage
coverage:cc --action_env=COVERAGE_GCOV_OPTIONS=--branch-probabilities

# Select only Python targets
build:py --build_tests_only
test:py --test_lang_filters=py
coverage:py --test_env=PYTHON_COVERAGE=external/coveragepy/coverage/__main__.py

# Select only NodeJs targets
build:nodejs --build_tag_filters=nodejs
test:nodejs --test_tag_filters=nodejs
coverage:nodejs --test_env=LCOV_MERGER=/bin/true

# Prevent building twice tools used for host and target, for nodejs rules for example.
build --nodistinct_host_configuration

# Add stamping
build --workspace_status_command tools/bazel_build/buildstamp/stamp.sh

# Enforce strict checks.
build --incompatible_force_strict_header_check_from_starlark
build --strict_filesets
build --strict_system_includes

# Increase hermeticity
build --incompatible_strict_action_env=true

# Use platforms to select toolchains
build --incompatible_enable_cc_toolchain_resolution=true
build --incompatible_use_cc_configure_from_rules_cc=true

# linux_x86_64_clang
build:linux_x86_64_clang --platforms="@linux_x86_64_clang//:platform"
build:linux_x86_64_clang --platform_suffix=linux_x86_64_clang

# linux_x86_64_gcc
build:linux_x86_64_gcc --platforms="@linux_x86_64_gcc//:platform"
build:linux_x86_64_gcc --platform_suffix=linux_x86_64_gcc
coverage:linux_x86_64_gcc --experimental_split_coverage_postprocessing
coverage:linux_x86_64_gcc --experimental_fetch_all_coverage_outputs

# esp32_xtensa_lx6_gcc
build:esp32_xtensa_lx6_gcc --platforms="@esp32_xtensa_lx6_gcc//:platform"
build:esp32_xtensa_lx6_gcc --features=-supports_dynamic_linker
build:esp32_xtensa_lx6_gcc --platform_suffix=esp32_xtensa_lx6_gcc
test:esp32_xtensa_lx6_gcc --strategy=TestRunner=sandboxed

# clang_tidy
build:clang_tidy --aspects=//tools/clang_tidy:defs.bzl%clang_tidy_aspect
build:clang_tidy --output_groups=report

# Development and production build configuration
build:dev -c dbg
build:dev --//tools/bazel_build/settings/build=dev
build:prod -c opt
build:prod --//tools/bazel_build/settings/build=prod

# Executors

build:host --//tools/bazel_build/settings/executor=host
build:uart --//tools/bazel_build/settings/executor=uart
build:sim --//tools/bazel_build/settings/executor=sim

# Executors variants

build:debug --//tools/bazel_build/settings/debug=True

# Sanitizers

build:sanitizer --build_tests_only
build:sanitizer --keep_going
build:sanitizer --copt -O1
build:sanitizer --copt -g
build:sanitizer --copt -fno-optimize-sibling-calls
build:sanitizer --copt -fno-omit-frame-pointer
build:sanitizer --strip never

# Address Sanitizer
build:asan --copt -fsanitize=address
build:asan --linkopt -fsanitize=address
test:asan --test_env=ASAN_OPTIONS=print_stacktrace=1

# Leak Sanitizer`
build:lsan --copt -fsanitize=leak
build:lsan --copt -DLEAK_SANITIZER
build:lsan --linkopt -fsanitize=leak

# Undefined Behavior Sanitizer
build:ubsan --copt -fsanitize=undefined
build:ubsan --copt -DUNDEFINED_SANITIZER
build:ubsan --linkopt -fsanitize=undefined
build:ubsan --linkopt -lubsan

# Memory Sanitizer
build:msan --copt -fsanitize=memory
build:msan --copt -fsanitize-memory-track-origins
build:msan --linkopt -fsanitize=memory

# Thread Sanitizer
build:tsan --copt -fsanitize=thread
build:tsan --copt -DTHREAD_SANITIZER
build:tsan --linkopt -fsanitize=thread
