common --announce_rc

try-import .bazelrc.local
try-import deployment/.bazelrc

# Add timestamps
common --show_timestamps

# Ensure the /tmp directory is empty.
common --sandbox_tmpfs_path=/tmp

# If a command fails, print out the full command line.
# https://bazel.build/reference/command-line-reference#flag--verbose_failures
build --verbose_failures

# Set default options used by the default run
build --strip=never

# If true, build runfiles symlink forests for external repositories under .runfiles/wsname/external/repo (in addition to .runfiles/repo).
# https://bazel.build/reference/command-line-reference#flag--legacy_external_runfiles
build --nolegacy_external_runfiles

# If true, the target platform is used in the output directory name instead of the CPU.
# https://bazel.build/reference/command-line-reference#flag--experimental_platform_in_output_dir
build --experimental_platform_in_output_dir 

# Needed for the rule transition to work, for example, running bazel build cc/targets/linux/...
# To investigate further, see https://github.com/bazelbuild/bazel/commit/293646c85a718686ce1d7a7ff6d1dd76256cb9bb
common --noexperimental_use_platforms_in_output_dir_legacy_heuristic

# Directories used by sandboxed non-worker execution may be reused to avoid unnecessary setup costs.
# Save time on Sandbox creation and deletion when many of the same kind of action run during the
# build.
# Docs: https://bazel.build/reference/command-line-reference#flag--reuse_sandbox_directories
build --reuse_sandbox_directories

# Global test specific options
test --test_output=errors
test --verbose_failures
test --define=type=test
test --notest_keep_going
# Use local docker configuration if present
test --action_env=DOCKER_HOST

# Global coverage specific options
coverage --combined_report=lcov
coverage --nobuild_tests_only
coverage --nocache_test_results
coverage --instrument_test_targets
coverage --collect_code_coverage

# Docker
build:docker --experimental_docker_verbose
build:docker --experimental_enable_docker_sandbox
build:docker --spawn_strategy=docker,worker,sandboxed,local
build:docker --extra_execution_platforms=@bzd_rules_oci//execution_platforms:linux_x86_64

# Remote
build:remote --extra_execution_platforms=@bzd_rules_oci//execution_platforms:linux_x86_64
build:remote --jobs=24
build:remote --dynamic_mode=off
build:remote --spawn_strategy=remote,worker,sandboxed,local
build:remote --remote_download_minimal=toplevel
# See https://blog.bazel.build/2023/10/06/bwob-in-bazel-7.html#handle-remote-cache-eviction
build:remote --experimental_remote_cache_eviction_retries=3
build:remote --remote_retries=5
build:remote --disk_cache=
build:remote --define=EXECUTOR=remote

# local
build:local --remote_executor=
build:local --jobs=HOST_CPUS

# Select only C++ targets
build --build_tag_filters=-cc-coverage
test --test_tag_filters=-cc-coverage
build:cc --build_tag_filters=cc,-cc-coverage
test:cc --test_tag_filters=cc,-cc-coverage
coverage:cc --test_tag_filters=-cc,cc-coverage
coverage:cc --action_env=COVERAGE_GCOV_OPTIONS=--branch-probabilities

# Enable warnings, this applies only to the code within this repository.
build --copt=-Wall
build --copt=-Werror
build --copt=-Wextra
build --copt=-Wpedantic
build --copt=-Wvla
build --copt=-Wextra-semi
build --copt=-Wnull-dereference
build --copt=-Wswitch-enum

# Select only Python targets
build:py --build_tests_only
test:py --test_lang_filters=py
# Note: coverage for python seems to be broken, waiting for https://github.com/bazelbuild/rules_python/pull/977 to land.
# coverage:py --test_env=PYTHON_COVERAGE=external/coveragepy/coverage/__main__.py
# Use hermetic python interpreter for bootstrap script also, see: https://github.com/bazel-contrib/rules_python/issues/2727
# common --@rules_python//python/config_settings:bootstrap_impl=script

# Select only NodeJs targets
build:nodejs --build_tag_filters=nodejs
test:nodejs --test_tag_filters=nodejs
coverage:nodejs --test_env=LCOV_MERGER=/bin/true

# Add stamping
build --workspace_status_command tools/bazel_build/buildstamp/stamp.sh

# Enforce strict checks.
build --strict_filesets
build --strict_system_includes

# Do not look for the system wide default c++ toolchain.
common --repo_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1

# Increase hermeticity
build --incompatible_strict_action_env=true

# Use platforms to select toolchains
build --incompatible_use_cc_configure_from_rules_cc=true

# clang
build:clang --platforms="@clang//:platform"
build:clang --platform_suffix=clang

# gcc
build:gcc --platforms="@gcc//:platform"
build:gcc --platform_suffix=gcc
coverage:gcc --experimental_split_coverage_postprocessing
coverage:gcc --experimental_fetch_all_coverage_outputs

# esp32_idf-xtensa_lx6-gcc
build:esp32 --platforms="@esp32//:platform-esp32_idf-xtensa_lx6"
build:esp32 --platform_suffix=esp32-xtensa_lx6-gcc

# esp32s3-xtensa_lx7-gcc
build:esp32s3 --platforms="@esp32s3//:platform-esp32s3_idf-xtensa_lx7"
build:esp32s3 --platform_suffix=esp32s3_idf-xtensa_lx7-gcc

# clang-tidy
build:clang-tidy --aspects="@bzd_sanitizer//aspects/clang_tidy:defs.bzl%clang_tidy_aspect"
build:clang-tidy --output_groups=+clang_tidy

# mypy
build:mypy --aspects="@bzd_sanitizer//aspects/mypy:defs.bzl%mypy_aspect"
build:mypy --output_groups=+mypy

# clippy
build:clippy --aspects="@rules_rust//rust:defs.bzl%rust_clippy_aspect"
build:clippy --output_groups=+clippy_checks

# always generate compile command (cost is neglectable)
build --aspects="@bzd_sanitizer//aspects/compile_commands:defs.bzl%compile_commands_aspect"
build --output_groups=+compile_commands

# Development and production build configuration
build:dev -c dbg
build:dev --@bzd_lib//settings/build=dev
build:prod -c opt
build:prod --@bzd_lib//settings/build=prod

# Executors

build:host --//tools/bazel_build/settings/executor=host
build:uart --//tools/bazel_build/settings/executor=uart
build:sim --//tools/bazel_build/settings/executor=sim

# Executors variants

build:debug --//tools/bazel_build/settings/debug=True

# Sanitizers

build:sanitizer --build_tests_only
build:sanitizer --keep_going
build:sanitizer --copt -O1
build:sanitizer --copt -g
build:sanitizer --copt -fno-optimize-sibling-calls
build:sanitizer --copt -fno-omit-frame-pointer
build:sanitizer --strip never

# Address Sanitizer
build:asan --copt -fsanitize=address
build:asan --linkopt -fsanitize=address
build:asan --copt -fno-omit-frame-pointer # In order to have non-truncated stack traces.
test:asan --test_env=ASAN_OPTIONS=print_stacktrace=1

# Leak Sanitizer`
build:lsan --copt -fsanitize=leak
build:lsan --copt -DLEAK_SANITIZER
build:lsan --linkopt -fsanitize=leak

# Undefined Behavior Sanitizer
build:ubsan --copt -fsanitize=undefined
build:ubsan --copt -DUNDEFINED_SANITIZER
build:ubsan --linkopt -fsanitize=undefined
build:ubsan --linkopt -lubsan

# Memory Sanitizer
build:msan --copt -fsanitize=memory
build:msan --copt -fsanitize-memory-track-origins
build:msan --linkopt -fsanitize=memory

# Thread Sanitizer
build:tsan --copt -fsanitize=thread
build:tsan --copt -DTHREAD_SANITIZER
build:tsan --linkopt -fsanitize=thread
