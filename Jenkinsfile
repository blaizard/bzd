#!/usr/bin/env groovy

// Do not modify, this file has been generated by //tools/ci

pipeline
{
	triggers
	{
		cron("@weekly")
		pollSCM("0 3 * * *") // Every day at 3:00am if there is any change.
	}
	agent
	{
		dockerfile
		{
			filename "tools/ci/jenkins/Dockerfile"
			// Only a single args argument can be used
			args "-v /cache:/cache -e DOCKER_HOST=tcp://localhost:2375 --network host"
		}
	}
	stages
	{
		stage("Environment")
		{
			steps
			{
				sh "cp tools/ci/jenkins/.bazelrc.local .bazelrc.local"
				sh "git submodule foreach --recursive git clean -xfd"
				sh "git submodule foreach --recursive git reset --hard"
				sh "git submodule update --init --recursive"
				sh "ls -ll /"
				// Wake-up the remote executor.
				sh "./tools/bazel run //apps/node_manager:client --config=local -- wol --wait 10.10.0.11:8980 --timeout 300 08:bf:b8:14:04:b6"
				sh "./info.sh"
			}
		}
		// Parallelized tests are done here
		stage("Tests")
		{
			parallel
			{
				stage("[normal] python")
				{
					steps
					{
						sh "./tools/bazel test @bzd_python//... --output_groups=+metadata --config=prod --platform_suffix=python"
					}
				}
				stage("[normal] clang-tidy")
				{
					steps
					{
						sh "./tools/bazel test ... --output_groups=+metadata --config=dev --config=clang-tidy --platform_suffix=clang-tidy"
					}
				}
				stage("[normal] clang prod")
				{
					steps
					{
						sh "./tools/bazel test ... --output_groups=+metadata --config=clang --config=prod --config=cc --platform_suffix=clang-prod"
					}
				}
				stage("[normal] gcc prod")
				{
					steps
					{
						sh "./tools/bazel test ... --output_groups=+metadata --config=gcc --config=prod --config=cc --platform_suffix=gcc-prod"
					}
				}
				stage("[normal] esp32 prod")
				{
					steps
					{
						sh "./tools/bazel run @docker//:xtensa_qemu.pull"
						sh "./tools/bazel test ... --output_groups=+metadata --config=esp32 --config=prod --config=cc --platform_suffix=esp32-prod"
					}
				}
				stage("[stress] dev (10 runs)")
				{
					steps
					{
						sh "./tools/bazel test ... --build_tests_only --test_tag_filters=stress,-cc-coverage --config=dev --runs_per_test=10 --platform_suffix=stress-dev"
					}
				}
				stage("[stress] prod (10 runs)")
				{
					steps
					{
						sh "./tools/bazel test ... --build_tests_only --test_tag_filters=stress,-cc-coverage --config=prod --runs_per_test=10 --platform_suffix=stress-prod"
					}
				}
				stage("[sanitizer] asan/lsan/ubsan")
				{
					steps
					{
						sh "./tools/bazel test ... --config=clang --config=cc --config=sanitizer --config=asan --config=lsan --config=ubsan --platform_suffix=clang-asan-lsan-ubsan"
					}
				}
				stage("[sanitizer] tsan")
				{
					steps
					{
						sh "./tools/bazel test ... --config=clang --config=cc --config=sanitizer --config=tsan --platform_suffix=clang-tsan"
					}
				}
				stage("[coverage] NodeJs")
				{
					steps
					{
						lock("coverage")
						{
							sh "./tools/bazel coverage ... --config=nodejs --platform_suffix=coverage-nodejs && ./tools/bazel run tools/coverage --platform_suffix=coverage-nodejs -- --output bazel-out/coverage-nodejs"
						}
						archiveArtifacts artifacts: "bazel-out/coverage-nodejs/**/*", onlyIfSuccessful: true
					}
				}
				stage("[sanitizer] sanitizer")
				{
					steps
					{
						sh "./tools/bazel run :sanitizer -- --check --all"
					}
				}
			}
		}
		// Auto publish some artifacts
		stage("Publish")
		{
			steps
			{
				sh "./tools/bazel run apps/dashboard:push"
				sh "./tools/bazel run apps/family:push"
				sh "./tools/bazel run apps/artifacts:push"
			}
		}
	}
    post {
        always {
			sh "./info.sh"
			sh "./tools/bazel run //apps/node_manager:client --config=local -- suspend 10.10.0.10:8000"
        }
    }
}
