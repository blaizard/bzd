<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="destructible_8h" kind="file" language="C++">
    <compoundname>destructible.h</compoundname>
    <includes refid="integral__constant_8h" local="yes">include/type_traits/integral_constant.h</includes>
    <includes refid="reference_8h" local="yes">include/type_traits/reference.h</includes>
    <includes refid="void_8h" local="yes">include/type_traits/void.h</includes>
    <includes refid="utils_8h" local="yes">include/type_traits/utils.h</includes>
    <includedby refid="destructible__test_8cpp" local="yes">include/type_traits/destructible_test.cpp</includedby>
    <incdepgraph>
      <node id="870">
        <label>include/type_traits/utils.h</label>
        <link refid="utils_8h_source"/>
        <childnode refid="867" relation="include">
        </childnode>
        <childnode refid="868" relation="include">
        </childnode>
      </node>
      <node id="866">
        <label>include/type_traits/destructible.h</label>
        <link refid="destructible_8h"/>
        <childnode refid="867" relation="include">
        </childnode>
        <childnode refid="868" relation="include">
        </childnode>
        <childnode refid="869" relation="include">
        </childnode>
        <childnode refid="870" relation="include">
        </childnode>
      </node>
      <node id="869">
        <label>include/type_traits/void.h</label>
        <link refid="void_8h_source"/>
        <childnode refid="867" relation="include">
        </childnode>
      </node>
      <node id="867">
        <label>include/type_traits/integral_constant.h</label>
        <link refid="integral__constant_8h_source"/>
      </node>
      <node id="868">
        <label>include/type_traits/reference.h</label>
        <link refid="reference_8h_source"/>
        <childnode refid="867" relation="include">
        </childnode>
        <childnode refid="869" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structbzd_1_1typeTraits_1_1impl_1_1isDestructible" prot="public">bzd::typeTraits::impl::isDestructible</innerclass>
    <innerclass refid="structbzd_1_1typeTraits_1_1isDestructible" prot="public">bzd::typeTraits::isDestructible</innerclass>
    <innerclass refid="structbzd_1_1typeTraits_1_1isDestructible_3_01void_01_4" prot="public">bzd::typeTraits::isDestructible&lt; void &gt;</innerclass>
    <innerclass refid="structbzd_1_1typeTraits_1_1isDestructible_3_01void_01const_01_4" prot="public">bzd::typeTraits::isDestructible&lt; void const &gt;</innerclass>
    <innerclass refid="structbzd_1_1typeTraits_1_1isDestructible_3_01void_01volatile_01_4" prot="public">bzd::typeTraits::isDestructible&lt; void volatile &gt;</innerclass>
    <innerclass refid="structbzd_1_1typeTraits_1_1isDestructible_3_01void_01const_01volatile_01_4" prot="public">bzd::typeTraits::isDestructible&lt; void const volatile &gt;</innerclass>
    <innerclass refid="structbzd_1_1typeTraits_1_1isDestructible_3_01T_01_6_01_4" prot="public">bzd::typeTraits::isDestructible&lt; T &amp; &gt;</innerclass>
    <innerclass refid="structbzd_1_1typeTraits_1_1isDestructible_3_01T_01_6_6_01_4" prot="public">bzd::typeTraits::isDestructible&lt; T &amp;&amp; &gt;</innerclass>
    <innerclass refid="structbzd_1_1typeTraits_1_1isDestructible_3_01T[N]_4" prot="public">bzd::typeTraits::isDestructible&lt; T[N]&gt;</innerclass>
    <innerclass refid="structbzd_1_1typeTraits_1_1isDestructible_3_01T[]_4" prot="public">bzd::typeTraits::isDestructible&lt; T[]&gt;</innerclass>
    <innernamespace refid="namespacebzd">bzd</innernamespace>
    <innernamespace refid="namespacebzd_1_1typeTraits">bzd::typeTraits</innernamespace>
    <innernamespace refid="namespacebzd_1_1typeTraits_1_1impl">bzd::typeTraits::impl</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="destructible_8h_1a98af49b7efaa1c88f747c2dbc4c2a3f1" prot="public" static="no">
        <name>__is_identifier</name>
        <param><defname>__x</defname></param>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/type_traits/destructible.h" line="9" column="9" bodyfile="include/type_traits/destructible.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="destructible_8h_1a8a12b6f65d7c120c7666923827e312f8" prot="public" static="no">
        <name>__has_keyword</name>
        <param><defname>__x</defname></param>
        <initializer>!(__is_identifier(__x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/type_traits/destructible.h" line="11" column="10" bodyfile="include/type_traits/destructible.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="destructible_8h_1a154d06220f171d86e1896c766704eabe" prot="public" static="no">
        <name>__has_feature</name>
        <param><defname>__x</defname></param>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/type_traits/destructible.h" line="13" column="9" bodyfile="include/type_traits/destructible.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;include/type_traits/integral_constant.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;include/type_traits/reference.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;include/type_traits/void.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;include/type_traits/utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__is_identifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__is_identifier(__x)<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__has_keyword(__x)<sp/>!(__is_identifier(__x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__has_feature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__has_feature(__x)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacebzd" kindref="compound">bzd</ref></highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">typeTraits</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>isDestructible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">impl</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24" refid="structbzd_1_1typeTraits_1_1impl_1_1isDestructible" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbzd_1_1typeTraits_1_1impl_1_1isDestructible" kindref="compound">isDestructible</ref></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>=<sp/>decltype(bzd::typeTraits::declval&lt;T&amp;&gt;().~T())&gt;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>test(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test(...);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="34" refid="structbzd_1_1typeTraits_1_1isDestructible" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbzd_1_1typeTraits_1_1isDestructible" kindref="compound">isDestructible</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structbzd_1_1typeTraits_1_1integralConstant" kindref="compound">bzd::typeTraits::integralConstant</ref>&lt;bool,<sp/>(sizeof(impl::isDestructible::test&lt;T&gt;(0))<sp/>==<sp/>sizeof(char))&gt;<sp/>{};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="structbzd_1_1typeTraits_1_1isDestructible_3_01void_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbzd_1_1typeTraits_1_1isDestructible" kindref="compound">isDestructible</ref>&lt;void&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structbzd_1_1typeTraits_1_1integralConstant" kindref="compound">falseType</ref><sp/>{};</highlight></codeline>
<codeline lineno="37" refid="structbzd_1_1typeTraits_1_1isDestructible_3_01void_01const_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbzd_1_1typeTraits_1_1isDestructible" kindref="compound">isDestructible</ref>&lt;void<sp/>const&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structbzd_1_1typeTraits_1_1integralConstant" kindref="compound">falseType</ref><sp/>{};</highlight></codeline>
<codeline lineno="38" refid="structbzd_1_1typeTraits_1_1isDestructible_3_01void_01volatile_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbzd_1_1typeTraits_1_1isDestructible" kindref="compound">isDestructible</ref>&lt;void<sp/>volatile&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structbzd_1_1typeTraits_1_1integralConstant" kindref="compound">falseType</ref><sp/>{};</highlight></codeline>
<codeline lineno="39" refid="structbzd_1_1typeTraits_1_1isDestructible_3_01void_01const_01volatile_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbzd_1_1typeTraits_1_1isDestructible" kindref="compound">isDestructible</ref>&lt;void<sp/>const<sp/>volatile&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structbzd_1_1typeTraits_1_1integralConstant" kindref="compound">falseType</ref><sp/>{};</highlight></codeline>
<codeline lineno="40" refid="structbzd_1_1typeTraits_1_1isDestructible_3_01T_01_6_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbzd_1_1typeTraits_1_1isDestructible" kindref="compound">isDestructible</ref>&lt;T&amp;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structbzd_1_1typeTraits_1_1isDestructible" kindref="compound">isDestructible&lt;T&gt;</ref><sp/>{};</highlight></codeline>
<codeline lineno="41" refid="structbzd_1_1typeTraits_1_1isDestructible_3_01T_01_6_6_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbzd_1_1typeTraits_1_1isDestructible" kindref="compound">isDestructible</ref>&lt;T&amp;&amp;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structbzd_1_1typeTraits_1_1isDestructible" kindref="compound">isDestructible&lt;T&gt;</ref><sp/>{};</highlight></codeline>
<codeline lineno="42" refid="structbzd_1_1typeTraits_1_1isDestructible_3_01T[N]_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbzd_1_1typeTraits_1_1isDestructible" kindref="compound">isDestructible</ref>&lt;T[N]&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structbzd_1_1typeTraits_1_1isDestructible" kindref="compound">isDestructible</ref>&lt;T&gt;<sp/>{};</highlight></codeline>
<codeline lineno="43" refid="structbzd_1_1typeTraits_1_1isDestructible_3_01T[]_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbzd_1_1typeTraits_1_1isDestructible" kindref="compound">isDestructible</ref>&lt;T[]&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structbzd_1_1typeTraits_1_1isDestructible" kindref="compound">isDestructible</ref>&lt;T&gt;<sp/>{};</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_keyword(__is_trivially_destructible)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">isTriviallyDestructible<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structbzd_1_1typeTraits_1_1integralConstant" kindref="compound">bzd::typeTraits::integralConstant</ref>&lt;bool,<sp/>__is_trivially_destructible(T)&gt;<sp/>{};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__has_feature(has_trivial_destructor)<sp/>||<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">isTriviallyDestructible<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structbzd_1_1typeTraits_1_1integralConstant" kindref="compound">bzd::typeTraits::integralConstant</ref>&lt;bool,<sp/>isDestructible&lt;T&gt;::value<sp/>&amp;&amp;<sp/>__has_trivial_destructor(T)&gt;<sp/>{};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>compiler&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="include/type_traits/destructible.h"/>
  </compounddef>
</doxygen>
