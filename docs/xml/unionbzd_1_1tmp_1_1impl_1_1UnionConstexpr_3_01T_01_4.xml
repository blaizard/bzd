<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_3_01T_01_4" kind="union" language="C++" prot="public">
    <compoundname>bzd::tmp::impl::UnionConstexpr&lt; T &gt;</compoundname>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_3_01T_01_4_1a3038fb8831c3c62a39cf17bb5b255223" prot="protected" static="no" mutable="no">
        <type>T</type>
        <definition>T bzd::tmp::impl::UnionConstexpr&lt; T &gt;::value_</definition>
        <argsstring></argsstring>
        <name>value_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/template_metaprogramming.h" line="171" column="1" bodyfile="include/template_metaprogramming.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_3_01T_01_4_1a91c286094325cba52ad90e62402938f4" prot="protected" static="no" mutable="no">
        <type>struct <ref refid="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr" kindref="compound">bzd::tmp::impl::UnionConstexpr</ref>&lt; T &gt;::@2</type>
        <definition>struct bzd::tmp::impl::UnionConstexpr&lt; T &gt;::@2  bzd::tmp::impl::UnionConstexpr&lt; T &gt;::dummy_</definition>
        <argsstring></argsstring>
        <name>dummy_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/template_metaprogramming.h" line="172" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_3_01T_01_4_1a63416978be4fda3a7287ae2f5988d8b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr bzd::tmp::impl::UnionConstexpr&lt; T &gt;::UnionConstexpr</definition>
        <argsstring>()</argsstring>
        <name>UnionConstexpr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/template_metaprogramming.h" line="159" column="1" bodyfile="include/template_metaprogramming.h" bodystart="159" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_3_01T_01_4_1a5602dbec169fa69e91c522a5e6ba22cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>typename <ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">typeTraits::enableIf</ref>&lt; <ref refid="structbzd_1_1typeTraits_1_1isSame" kindref="compound">bzd::typeTraits::isSame</ref>&lt; T, U &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr bzd::tmp::impl::UnionConstexpr&lt; T &gt;::UnionConstexpr</definition>
        <argsstring>(const U &amp;value)</argsstring>
        <name>UnionConstexpr</name>
        <param>
          <type>const U &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/template_metaprogramming.h" line="162" column="1" bodyfile="include/template_metaprogramming.h" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_3_01T_01_4_1aa410697c37ba69e9b4a8b7e059621788" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>typename <ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">typeTraits::enableIf</ref>&lt; <ref refid="structbzd_1_1typeTraits_1_1isSame" kindref="compound">bzd::typeTraits::isSame</ref>&lt; T, U &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr U &amp;</type>
        <definition>constexpr U&amp; bzd::tmp::impl::UnionConstexpr&lt; T &gt;::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/template_metaprogramming.h" line="165" column="1" bodyfile="include/template_metaprogramming.h" bodystart="165" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_3_01T_01_4_1a5557fef71090f30fa4ca8a52375d61f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>typename <ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">typeTraits::enableIf</ref>&lt; <ref refid="structbzd_1_1typeTraits_1_1isSame" kindref="compound">bzd::typeTraits::isSame</ref>&lt; T, U &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr const U &amp;</type>
        <definition>constexpr const U&amp; bzd::tmp::impl::UnionConstexpr&lt; T &gt;::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/template_metaprogramming.h" line="168" column="1" bodyfile="include/template_metaprogramming.h" bodystart="168" bodyend="168"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="588">
        <label>T</label>
      </node>
      <node id="587">
        <label>bzd::tmp::impl::UnionConstexpr&lt; T &gt;</label>
        <link refid="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_3_01T_01_4"/>
        <childnode refid="587" relation="usage">
          <edgelabel>dummy_</edgelabel>
        </childnode>
        <childnode refid="588" relation="usage">
          <edgelabel>value_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/template_metaprogramming.h" line="157" column="1" bodyfile="include/template_metaprogramming.h" bodystart="156" bodyend="173"/>
    <listofallmembers>
      <member refid="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_3_01T_01_4_1a91c286094325cba52ad90e62402938f4" prot="protected" virt="non-virtual"><scope>bzd::tmp::impl::UnionConstexpr&lt; T &gt;</scope><name>dummy_</name></member>
      <member refid="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_3_01T_01_4_1aa410697c37ba69e9b4a8b7e059621788" prot="public" virt="non-virtual"><scope>bzd::tmp::impl::UnionConstexpr&lt; T &gt;</scope><name>get</name></member>
      <member refid="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_3_01T_01_4_1a5557fef71090f30fa4ca8a52375d61f9" prot="public" virt="non-virtual"><scope>bzd::tmp::impl::UnionConstexpr&lt; T &gt;</scope><name>get</name></member>
      <member refid="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_3_01T_01_4_1a63416978be4fda3a7287ae2f5988d8b8" prot="public" virt="non-virtual"><scope>bzd::tmp::impl::UnionConstexpr&lt; T &gt;</scope><name>UnionConstexpr</name></member>
      <member refid="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_3_01T_01_4_1a5602dbec169fa69e91c522a5e6ba22cf" prot="public" virt="non-virtual"><scope>bzd::tmp::impl::UnionConstexpr&lt; T &gt;</scope><name>UnionConstexpr</name></member>
      <member refid="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_3_01T_01_4_1a3038fb8831c3c62a39cf17bb5b255223" prot="protected" virt="non-virtual"><scope>bzd::tmp::impl::UnionConstexpr&lt; T &gt;</scope><name>value_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
