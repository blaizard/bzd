<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structbzd_1_1typeTraits_1_1integralConstant" kind="struct" language="C++" prot="public">
    <compoundname>bzd::typeTraits::integralConstant</compoundname>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1impl_1_1isConstructible" prot="public" virt="non-virtual">bzd::typeTraits::impl::isConstructible&lt; class, T, Args &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1impl_1_1isConstructible_3_01voidType_3_01decltype_07T_07declval_3_01Ab708546180c4980af3729b760eee75ea" prot="public" virt="non-virtual">bzd::typeTraits::impl::isConstructible&lt; voidType&lt; decltype(T(declval&lt; Args &gt;()...))&gt;, T, Args... &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isArray" prot="public" virt="non-virtual">bzd::typeTraits::isArray&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isArray_3_01T[]_4" prot="public" virt="non-virtual">bzd::typeTraits::isArray&lt; T[]&gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isArray_3_01T[N]_4" prot="public" virt="non-virtual">bzd::typeTraits::isArray&lt; T[N]&gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isConst" prot="public" virt="non-virtual">bzd::typeTraits::isConst&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isConst_3_01const_01T_01_4" prot="public" virt="non-virtual">bzd::typeTraits::isConst&lt; const T &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isDestructible_3_01void_01_4" prot="public" virt="non-virtual">bzd::typeTraits::isDestructible&lt; void &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isDestructible_3_01void_01const_01_4" prot="public" virt="non-virtual">bzd::typeTraits::isDestructible&lt; void const &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isDestructible_3_01void_01const_01volatile_01_4" prot="public" virt="non-virtual">bzd::typeTraits::isDestructible&lt; void const volatile &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isDestructible_3_01void_01volatile_01_4" prot="public" virt="non-virtual">bzd::typeTraits::isDestructible&lt; void volatile &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isFunction" prot="public" virt="non-virtual">bzd::typeTraits::isFunction&lt; class &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isFunction_3_01Ret_07Args_8_8_8_08_01_6_01_4" prot="public" virt="non-virtual">bzd::typeTraits::isFunction&lt; Ret(Args...) &amp; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isFunction_3_01Ret_07Args_8_8_8_08_01_6_6_01_4" prot="public" virt="non-virtual">bzd::typeTraits::isFunction&lt; Ret(Args...) &amp;&amp; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isFunction_3_01Ret_07Args_8_8_8_08_01const_01_6_01_4" prot="public" virt="non-virtual">bzd::typeTraits::isFunction&lt; Ret(Args...) const &amp; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isFunction_3_01Ret_07Args_8_8_8_08_01const_01_6_6_01_4" prot="public" virt="non-virtual">bzd::typeTraits::isFunction&lt; Ret(Args...) const &amp;&amp; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isFunction_3_01Ret_07Args_8_8_8_08_01const_01_4" prot="public" virt="non-virtual">bzd::typeTraits::isFunction&lt; Ret(Args...) const &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isFunction_3_01Ret_07Args_8_8_8_08_01const_01volatile_01_6_01_4" prot="public" virt="non-virtual">bzd::typeTraits::isFunction&lt; Ret(Args...) const volatile &amp; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isFunction_3_01Ret_07Args_8_8_8_08_01const_01volatile_01_6_6_01_4" prot="public" virt="non-virtual">bzd::typeTraits::isFunction&lt; Ret(Args...) const volatile &amp;&amp; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isFunction_3_01Ret_07Args_8_8_8_08_01const_01volatile_01_4" prot="public" virt="non-virtual">bzd::typeTraits::isFunction&lt; Ret(Args...) const volatile &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isFunction_3_01Ret_07Args_8_8_8_08_01volatile_01_6_01_4" prot="public" virt="non-virtual">bzd::typeTraits::isFunction&lt; Ret(Args...) volatile &amp; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isFunction_3_01Ret_07Args_8_8_8_08_01volatile_01_6_6_01_4" prot="public" virt="non-virtual">bzd::typeTraits::isFunction&lt; Ret(Args...) volatile &amp;&amp; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isFunction_3_01Ret_07Args_8_8_8_08_01volatile_01_4" prot="public" virt="non-virtual">bzd::typeTraits::isFunction&lt; Ret(Args...) volatile &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isFunction_3_01Ret_07Args_8_8_8_08_4" prot="public" virt="non-virtual">bzd::typeTraits::isFunction&lt; Ret(Args...)&gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isLValueReference" prot="public" virt="non-virtual">bzd::typeTraits::isLValueReference&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isLValueReference_3_01T_01_6_01_4" prot="public" virt="non-virtual">bzd::typeTraits::isLValueReference&lt; T &amp; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isRValueReference" prot="public" virt="non-virtual">bzd::typeTraits::isRValueReference&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isRValueReference_3_01T_01_6_6_01_4" prot="public" virt="non-virtual">bzd::typeTraits::isRValueReference&lt; T &amp;&amp; &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isSame" prot="public" virt="non-virtual">bzd::typeTraits::isSame&lt; T, U &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isSame_3_01T_00_01T_01_4" prot="public" virt="non-virtual">bzd::typeTraits::isSame&lt; T, T &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isVoid" prot="public" virt="non-virtual">bzd::typeTraits::isVoid&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isVoid_3_01const_01void_01_4" prot="public" virt="non-virtual">bzd::typeTraits::isVoid&lt; const void &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isVoid_3_01const_01volatile_01void_01_4" prot="public" virt="non-virtual">bzd::typeTraits::isVoid&lt; const volatile void &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isVoid_3_01void_01_4" prot="public" virt="non-virtual">bzd::typeTraits::isVoid&lt; void &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isVoid_3_01volatile_01void_01_4" prot="public" virt="non-virtual">bzd::typeTraits::isVoid&lt; volatile void &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isVolatile" prot="public" virt="non-virtual">bzd::typeTraits::isVolatile&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="structbzd_1_1typeTraits_1_1isVolatile_3_01volatile_01T_01_4" prot="public" virt="non-virtual">bzd::typeTraits::isVolatile&lt; volatile T &gt;</derivedcompoundref>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>T</type>
        <declname>v</declname>
        <defname>v</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structbzd_1_1typeTraits_1_1integralConstant_1a25f8639da0d0702b714b2ae46e7b2831" prot="public" static="no">
        <type>T</type>
        <definition>typedef T bzd::typeTraits::integralConstant&lt; T, v &gt;::valueType</definition>
        <argsstring></argsstring>
        <name>valueType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/type_traits/integral_constant.h" line="13" column="1" bodyfile="include/type_traits/integral_constant.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structbzd_1_1typeTraits_1_1integralConstant_1a9f27fd41bacb9695bdb0068eaeb13742" prot="public" static="no">
        <type><ref refid="structbzd_1_1typeTraits_1_1integralConstant" kindref="compound">integralConstant</ref></type>
        <definition>typedef integralConstant bzd::typeTraits::integralConstant&lt; T, v &gt;::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/type_traits/integral_constant.h" line="14" column="1" bodyfile="include/type_traits/integral_constant.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structbzd_1_1typeTraits_1_1integralConstant_1a614e5b5b8d73d1c5a5f63b5ad8fa5841" prot="public" static="yes" mutable="no">
        <type>constexpr T</type>
        <definition>constexpr T bzd::typeTraits::integralConstant&lt; T, v &gt;::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <initializer>= v</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/type_traits/integral_constant.h" line="12" column="1" bodyfile="include/type_traits/integral_constant.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structbzd_1_1typeTraits_1_1integralConstant_1afe505065d9034110fb3a385c0a81ea16" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr bzd::typeTraits::integralConstant&lt; T, v &gt;::operator valueType</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator valueType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/type_traits/integral_constant.h" line="15" column="1" bodyfile="include/type_traits/integral_constant.h" bodystart="15" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="structbzd_1_1typeTraits_1_1integralConstant_1a7f97a49b251bab219b3552efbffbeab1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr valueType</type>
        <definition>constexpr valueType bzd::typeTraits::integralConstant&lt; T, v &gt;::operator()</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator()</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/type_traits/integral_constant.h" line="19" column="1" bodyfile="include/type_traits/integral_constant.h" bodystart="19" bodyend="22"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="128">
        <label>bzd::typeTraits::integralConstant&lt; T, v &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1integralConstant"/>
      </node>
      <node id="136">
        <label>bzd::typeTraits::isDestructible&lt; void &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isDestructible_3_01void_01_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="140">
        <label>bzd::typeTraits::isFunction&lt; bool, false &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isFunction"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="142">
        <label>bzd::typeTraits::isFunction&lt; Ret(Args...) &amp;&amp; &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isFunction_3_01Ret_07Args_8_8_8_08_01_6_6_01_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="162">
        <label>bzd::typeTraits::isVoid&lt; void &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isVoid_3_01void_01_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="131">
        <label>bzd::typeTraits::isArray&lt; bool, false &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isArray"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="161">
        <label>bzd::typeTraits::isVoid&lt; const volatile void &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isVoid_3_01const_01volatile_01void_01_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="164">
        <label>bzd::typeTraits::isVolatile&lt; bool, false &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isVolatile"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="158">
        <label>bzd::typeTraits::isSame&lt; T, T &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isSame_3_01T_00_01T_01_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="139">
        <label>bzd::typeTraits::isDestructible&lt; void volatile &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isDestructible_3_01void_01volatile_01_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="134">
        <label>bzd::typeTraits::isConst&lt; bool, false &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isConst"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="132">
        <label>bzd::typeTraits::isArray&lt; T[]&gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isArray_3_01T[]_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="129">
        <label>bzd::typeTraits::impl::isConstructible&lt; bool, false &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1impl_1_1isConstructible"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="150">
        <label>bzd::typeTraits::isFunction&lt; Ret(Args...) volatile &amp;&amp; &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isFunction_3_01Ret_07Args_8_8_8_08_01volatile_01_6_6_01_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="138">
        <label>bzd::typeTraits::isDestructible&lt; void const volatile &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isDestructible_3_01void_01const_01volatile_01_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="152">
        <label>bzd::typeTraits::isFunction&lt; Ret(Args...)&gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isFunction_3_01Ret_07Args_8_8_8_08_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="149">
        <label>bzd::typeTraits::isFunction&lt; Ret(Args...) volatile &amp; &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isFunction_3_01Ret_07Args_8_8_8_08_01volatile_01_6_01_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="160">
        <label>bzd::typeTraits::isVoid&lt; const void &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isVoid_3_01const_01void_01_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="153">
        <label>bzd::typeTraits::isLValueReference&lt; bool, false &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isLValueReference"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="145">
        <label>bzd::typeTraits::isFunction&lt; Ret(Args...) const &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isFunction_3_01Ret_07Args_8_8_8_08_01const_01_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="163">
        <label>bzd::typeTraits::isVoid&lt; volatile void &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isVoid_3_01volatile_01void_01_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="159">
        <label>bzd::typeTraits::isVoid&lt; bool, false &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isVoid"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="146">
        <label>bzd::typeTraits::isFunction&lt; Ret(Args...) const volatile &amp; &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isFunction_3_01Ret_07Args_8_8_8_08_01const_01volatile_01_6_01_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="141">
        <label>bzd::typeTraits::isFunction&lt; Ret(Args...) &amp; &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isFunction_3_01Ret_07Args_8_8_8_08_01_6_01_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="144">
        <label>bzd::typeTraits::isFunction&lt; Ret(Args...) const &amp;&amp; &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isFunction_3_01Ret_07Args_8_8_8_08_01const_01_6_6_01_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="133">
        <label>bzd::typeTraits::isArray&lt; T[N]&gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isArray_3_01T[N]_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="155">
        <label>bzd::typeTraits::isRValueReference&lt; bool, false &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isRValueReference"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="156">
        <label>bzd::typeTraits::isRValueReference&lt; T &amp;&amp; &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isRValueReference_3_01T_01_6_6_01_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="148">
        <label>bzd::typeTraits::isFunction&lt; Ret(Args...) const volatile &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isFunction_3_01Ret_07Args_8_8_8_08_01const_01volatile_01_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="143">
        <label>bzd::typeTraits::isFunction&lt; Ret(Args...) const &amp; &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isFunction_3_01Ret_07Args_8_8_8_08_01const_01_6_01_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="137">
        <label>bzd::typeTraits::isDestructible&lt; void const &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isDestructible_3_01void_01const_01_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="147">
        <label>bzd::typeTraits::isFunction&lt; Ret(Args...) const volatile &amp;&amp; &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isFunction_3_01Ret_07Args_8_8_8_08_01const_01volatile_01_6_6_01_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="130">
        <label>bzd::typeTraits::impl::isConstructible&lt; voidType&lt; decltype(T(declval&lt; Args &gt;()...))&gt;, T, Args... &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1impl_1_1isConstructible_3_01voidType_3_01decltype_07T_07declval_3_01Ab708546180c4980af3729b760eee75ea"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="154">
        <label>bzd::typeTraits::isLValueReference&lt; T &amp; &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isLValueReference_3_01T_01_6_01_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="135">
        <label>bzd::typeTraits::isConst&lt; const T &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isConst_3_01const_01T_01_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="157">
        <label>bzd::typeTraits::isSame&lt; bool, false &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isSame"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="151">
        <label>bzd::typeTraits::isFunction&lt; Ret(Args...) volatile &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isFunction_3_01Ret_07Args_8_8_8_08_01volatile_01_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="165">
        <label>bzd::typeTraits::isVolatile&lt; volatile T &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1isVolatile_3_01volatile_01T_01_4"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="166">
        <label>bzd::typeTraits::integralConstant&lt; T, v &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1integralConstant"/>
        <childnode refid="167" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="167">
        <label>T</label>
      </node>
    </collaborationgraph>
    <location file="include/type_traits/integral_constant.h" line="11" column="1" bodyfile="include/type_traits/integral_constant.h" bodystart="10" bodyend="23"/>
    <listofallmembers>
      <member refid="structbzd_1_1typeTraits_1_1integralConstant_1afe505065d9034110fb3a385c0a81ea16" prot="public" virt="non-virtual"><scope>bzd::typeTraits::integralConstant</scope><name>operator valueType</name></member>
      <member refid="structbzd_1_1typeTraits_1_1integralConstant_1a7f97a49b251bab219b3552efbffbeab1" prot="public" virt="non-virtual"><scope>bzd::typeTraits::integralConstant</scope><name>operator()</name></member>
      <member refid="structbzd_1_1typeTraits_1_1integralConstant_1a9f27fd41bacb9695bdb0068eaeb13742" prot="public" virt="non-virtual"><scope>bzd::typeTraits::integralConstant</scope><name>type</name></member>
      <member refid="structbzd_1_1typeTraits_1_1integralConstant_1a614e5b5b8d73d1c5a5f63b5ad8fa5841" prot="public" virt="non-virtual"><scope>bzd::typeTraits::integralConstant</scope><name>value</name></member>
      <member refid="structbzd_1_1typeTraits_1_1integralConstant_1a25f8639da0d0702b714b2ae46e7b2831" prot="public" virt="non-virtual"><scope>bzd::typeTraits::integralConstant</scope><name>valueType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
