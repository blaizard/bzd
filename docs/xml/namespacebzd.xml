<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacebzd" kind="namespace" language="C++">
    <compoundname>bzd</compoundname>
    <innerclass refid="structbzd_1_1alignedStorage" prot="public">bzd::alignedStorage</innerclass>
    <innerclass refid="classbzd_1_1Array" prot="public">bzd::Array</innerclass>
    <innerclass refid="structbzd_1_1decay" prot="public">bzd::decay</innerclass>
    <innerclass refid="classbzd_1_1Pool" prot="public">bzd::Pool</innerclass>
    <innerclass refid="structbzd_1_1resultOf" prot="public">bzd::resultOf</innerclass>
    <innerclass refid="structbzd_1_1resultOf_3_01T_07_6_08_07Args_01_6_6_8_8_8_08_4" prot="public">bzd::resultOf&lt; T(&amp;)(Args &amp;&amp;...)&gt;</innerclass>
    <innerclass refid="classbzd_1_1Scheduler" prot="public">bzd::Scheduler</innerclass>
    <innerclass refid="classbzd_1_1SingletonImpl" prot="public">bzd::SingletonImpl</innerclass>
    <innerclass refid="classbzd_1_1SingletonThreadLocalImpl" prot="public">bzd::SingletonThreadLocalImpl</innerclass>
    <innerclass refid="classbzd_1_1Span" prot="public">bzd::Span</innerclass>
    <innerclass refid="classbzd_1_1Stack" prot="public">bzd::Stack</innerclass>
    <innerclass refid="classbzd_1_1String" prot="public">bzd::String</innerclass>
    <innerclass refid="classbzd_1_1StringStream" prot="public">bzd::StringStream</innerclass>
    <innerclass refid="classbzd_1_1Task" prot="public">bzd::Task</innerclass>
    <innerclass refid="structbzd_1_1Tuple" prot="public">bzd::Tuple</innerclass>
    <innerclass refid="classbzd_1_1Variant" prot="public">bzd::Variant</innerclass>
    <innerclass refid="classbzd_1_1VariantConstexpr" prot="public">bzd::VariantConstexpr</innerclass>
    <innerclass refid="classbzd_1_1Vector" prot="public">bzd::Vector</innerclass>
    <innernamespace refid="namespacebzd_1_1impl">bzd::impl</innernamespace>
    <innernamespace refid="namespacebzd_1_1interface">bzd::interface</innernamespace>
    <innernamespace refid="namespacebzd_1_1iterator">bzd::iterator</innernamespace>
    <innernamespace refid="namespacebzd_1_1log">bzd::log</innernamespace>
    <innernamespace refid="namespacebzd_1_1tmp">bzd::tmp</innernamespace>
    <innernamespace refid="namespacebzd_1_1typeTraits">bzd::typeTraits</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="expected_8h_1a33b49c1f07517abe781b0f3db7c6730b" prot="public" static="no">
        <type><ref refid="classbzd_1_1impl_1_1Expected" kindref="compound">impl::Expected</ref>&lt; T, E &gt;</type>
        <definition>using bzd::Expected = typedef impl::Expected&lt;T, E&gt;</definition>
        <argsstring></argsstring>
        <name>Expected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/expected.h" line="128" column="1" bodyfile="include/container/expected.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="iostream_8h_1ae251c366c26f406af2f079ce360e7836" prot="public" static="no">
        <type><ref refid="classbzd_1_1impl_1_1OStream" kindref="compound">impl::OStream</ref>&lt; char &gt;</type>
        <definition>using bzd::OStream = typedef impl::OStream&lt;char&gt;</definition>
        <argsstring></argsstring>
        <name>OStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/iostream.h" line="36" column="1" bodyfile="include/container/iostream.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="iostream_8h_1a053d2b4b5c644e49f91d8638f9f2713b" prot="public" static="no">
        <type><ref refid="classbzd_1_1impl_1_1IStream" kindref="compound">impl::IStream</ref>&lt; char &gt;</type>
        <definition>using bzd::IStream = typedef impl::IStream&lt;char&gt;</definition>
        <argsstring></argsstring>
        <name>IStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/iostream.h" line="37" column="1" bodyfile="include/container/iostream.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="iostream_8h_1a882ca5c34bff409c3572f4c3f1617f17" prot="public" static="no">
        <type><ref refid="classbzd_1_1impl_1_1IOStream" kindref="compound">impl::IOStream</ref>&lt; char &gt;</type>
        <definition>using bzd::IOStream = typedef impl::IOStream&lt;char&gt;</definition>
        <argsstring></argsstring>
        <name>IOStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/iostream.h" line="38" column="1" bodyfile="include/container/iostream.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="string__view_8h_1ac3ce51aee5807e76f9a7bc6f8ca4c012" prot="public" static="no">
        <type><ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">impl::StringView</ref>&lt; char, <ref refid="classbzd_1_1Span" kindref="compound">bzd::Span</ref>&lt; const char &gt; &gt;</type>
        <definition>using bzd::StringView = typedef impl::StringView&lt;char, bzd::Span&lt;const char&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>StringView</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/string_view.h" line="51" column="1" bodyfile="include/container/string_view.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="types_8h_1a8fb7e78739dfc04c9aff9fba3e19e7d1" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* bzd::PtrType</definition>
        <argsstring></argsstring>
        <name>PtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/types.h" line="5" column="1" bodyfile="include/types.h" bodystart="5" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="types_8h_1abcf1c624eeef54260d6120689529f11b" prot="public" static="no">
        <type>PtrType</type>
        <definition>typedef PtrType bzd::PtrDiffType</definition>
        <argsstring></argsstring>
        <name>PtrDiffType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/types.h" line="6" column="1" bodyfile="include/types.h" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="types_8h_1a365f13cd36b181a8888ee668c65e4ec3" prot="public" static="no">
        <type>PtrType</type>
        <definition>typedef PtrType bzd::CtxPtrType</definition>
        <argsstring></argsstring>
        <name>CtxPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/types.h" line="7" column="1" bodyfile="include/types.h" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="types_8h_1a1a4701a2fac0cf7a93071767ec0bd4e8" prot="public" static="no">
        <type>unsigned long long</type>
        <definition>typedef unsigned long long bzd::IntPtrType</definition>
        <argsstring></argsstring>
        <name>IntPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/types.h" line="8" column="1" bodyfile="include/types.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="types_8h_1ab1b7378d1d7f0317ed35d810853896ec" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* bzd::FctPtrType) ()</definition>
        <argsstring>)()</argsstring>
        <name>FctPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/types.h" line="9" column="1" bodyfile="include/types.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="types_8h_1a9f2c28c8cc1d9694f215aed7abdf571d" prot="public" static="no">
        <type>unsigned char</type>
        <definition>typedef unsigned char bzd::ByteType</definition>
        <argsstring></argsstring>
        <name>ByteType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/types.h" line="10" column="1" bodyfile="include/types.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="types_8h_1a5674954a3ebc7ff4738618914b5c4060" prot="public" static="no">
        <type>unsigned long</type>
        <definition>typedef unsigned long bzd::SizeType</definition>
        <argsstring></argsstring>
        <name>SizeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/types.h" line="11" column="1" bodyfile="include/types.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="assert_8h_1a9046613a2e739a0e143fbd9e00692168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void bzd::assertTrue</definition>
        <argsstring>(const bool condition, const bzd::StringView &amp;fmt, Args &amp;&amp;... args)</argsstring>
        <name>assertTrue</name>
        <param>
          <type>const bool</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const <ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">bzd::StringView</ref> &amp;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assert.h" line="13" column="1" bodyfile="include/assert.h" bodystart="13" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="assert__minimal_8h_1a24bb29d80b3b39c83231d2660699c020" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr void</type>
        <definition>constexpr void bzd::assertTrue</definition>
        <argsstring>(const bool condition)</argsstring>
        <name>assertTrue</name>
        <param>
          <type>const bool</type>
          <declname>condition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assert_minimal.h" line="8" column="1" bodyfile="include/assert_minimal.h" bodystart="8" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="assert__minimal_8h_1a2f035954b4c5a8075c8410e62dbb08a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr void</type>
        <definition>constexpr void bzd::assertTrue</definition>
        <argsstring>(const bool condition, const bzd::StringView &amp;message)</argsstring>
        <name>assertTrue</name>
        <param>
          <type>const bool</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const <ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">bzd::StringView</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assert_minimal.h" line="16" column="1" bodyfile="include/assert_minimal.h" bodystart="16" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="expected_8h_1ad6e6f493169693686974e365aed68fab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class E</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classbzd_1_1impl_1_1Unexpected" kindref="compound">impl::Unexpected</ref>&lt; typename <ref refid="structbzd_1_1decay" kindref="compound">bzd::decay</ref>&lt; E &gt;::type &gt;</type>
        <definition>constexpr impl::Unexpected&lt;typename bzd::decay&lt;E&gt;::type&gt; bzd::makeUnexpected</definition>
        <argsstring>(E &amp;&amp;e)</argsstring>
        <name>makeUnexpected</name>
        <param>
          <type>E &amp;&amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/expected.h" line="131" column="1" bodyfile="include/container/expected.h" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1afeeb4a5c077c61f1daf1675d00b584da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void bzd::format</definition>
        <argsstring>(bzd::OStream &amp;out, const F &amp;f, Args &amp;&amp;... args)</argsstring>
        <name>format</name>
        <param>
          <type><ref refid="classbzd_1_1impl_1_1OStream" kindref="compound">bzd::OStream</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const F &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/format.h" line="524" column="1" bodyfile="include/format.h" bodystart="524" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="scheduler_8h_1afb9eafae77cf9c15929be59fb54e3693" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bzd::yield</definition>
        <argsstring>()</argsstring>
        <name>yield</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/scheduler.h" line="45" column="1" bodyfile="include/scheduler.h" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="system_8h_1ab78ae495c59835c62ffbc62dc14dfd5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bzd::panic</definition>
        <argsstring>()</argsstring>
        <name>panic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/system.h" line="8" column="1" bodyfile="src/panic/exit/panic.cpp" bodystart="5" bodyend="8"/>
      </memberdef>
      <memberdef kind="function" id="system_8h_1a0eea5fc09d303a3310aaef1997d8be12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbzd_1_1impl_1_1OStream" kindref="compound">bzd::OStream</ref> &amp;</type>
        <definition>bzd::OStream &amp; bzd::getOut</definition>
        <argsstring>()</argsstring>
        <name>getOut</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/system.h" line="9" column="1" bodyfile="src/log/stdout/log.cpp" bodystart="18" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="to__string_8h_1aef8fb2b7a517b65a8d264523a2188b33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename <ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">bzd::typeTraits::enableIf</ref>&lt; typeTraits::isIntegral&lt; T &gt;::value, T &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void bzd::toString</definition>
        <argsstring>(bzd::OStream &amp;stream, const T &amp;data)</argsstring>
        <name>toString</name>
        <param>
          <type><ref refid="classbzd_1_1impl_1_1OStream" kindref="compound">bzd::OStream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/to_string.h" line="82" column="1" bodyfile="include/to_string.h" bodystart="82" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="to__string_8h_1ab910f480b3df901f882a34b2e7420710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename <ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">bzd::typeTraits::enableIf</ref>&lt; typeTraits::isFloatingPoint&lt; T &gt;::value, T &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void bzd::toString</definition>
        <argsstring>(bzd::OStream &amp;stream, const T &amp;data, const SizeType maxPrecision=6)</argsstring>
        <name>toString</name>
        <param>
          <type><ref refid="classbzd_1_1impl_1_1OStream" kindref="compound">bzd::OStream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const SizeType</type>
          <declname>maxPrecision</declname>
          <defval>6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/to_string.h" line="90" column="1" bodyfile="include/to_string.h" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="to__string_8h_1a81502185e0c89703dfd75139419d8cf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename <ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">bzd::typeTraits::enableIf</ref>&lt; typeTraits::isIntegral&lt; T &gt;::value, T &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void bzd::toStringHex</definition>
        <argsstring>(bzd::OStream &amp;stream, const T &amp;data, const char *const digits=bzd::impl::to_string::digits)</argsstring>
        <name>toStringHex</name>
        <param>
          <type><ref refid="classbzd_1_1impl_1_1OStream" kindref="compound">bzd::OStream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>digits</declname>
          <defval>bzd::impl::to_string::digits</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/to_string.h" line="96" column="1" bodyfile="include/to_string.h" bodystart="96" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="to__string_8h_1ae110e634f37ac786d886098daff7907d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename <ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">bzd::typeTraits::enableIf</ref>&lt; typeTraits::isIntegral&lt; T &gt;::value, T &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void bzd::toStringOct</definition>
        <argsstring>(bzd::OStream &amp;stream, const T &amp;data)</argsstring>
        <name>toStringOct</name>
        <param>
          <type><ref refid="classbzd_1_1impl_1_1OStream" kindref="compound">bzd::OStream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/to_string.h" line="104" column="1" bodyfile="include/to_string.h" bodystart="104" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="to__string_8h_1a9869e2a2bb9b200673e493aa532b4bc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename <ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">bzd::typeTraits::enableIf</ref>&lt; typeTraits::isIntegral&lt; T &gt;::value, T &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void bzd::toStringBin</definition>
        <argsstring>(bzd::OStream &amp;stream, const T &amp;data)</argsstring>
        <name>toStringBin</name>
        <param>
          <type><ref refid="classbzd_1_1impl_1_1OStream" kindref="compound">bzd::OStream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/to_string.h" line="112" column="1" bodyfile="include/to_string.h" bodystart="112" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="to__string_8h_1ab99268f30fbab18bee2798f3508dce4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bzd::toString</definition>
        <argsstring>(bzd::OStream &amp;stream, const bzd::StringView &amp;data)</argsstring>
        <name>toString</name>
        <param>
          <type><ref refid="classbzd_1_1impl_1_1OStream" kindref="compound">bzd::OStream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">bzd::StringView</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/to_string.h" line="137" column="1" bodyfile="include/to_string.h" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="to__string_8h_1a420913103845356cd39e47d2f4e190b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bzd::toString</definition>
        <argsstring>(bzd::OStream &amp;stream, const char c)</argsstring>
        <name>toString</name>
        <param>
          <type><ref refid="classbzd_1_1impl_1_1OStream" kindref="compound">bzd::OStream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/to_string.h" line="142" column="1" bodyfile="include/to_string.h" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="to__string_8h_1afffc66943250c0d541a165ef66d28fc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void bzd::toString</definition>
        <argsstring>(bzd::interface::String &amp;str, Args &amp;&amp;... args)</argsstring>
        <name>toString</name>
        <param>
          <type><ref refid="classbzd_1_1impl_1_1String" kindref="compound">bzd::interface::String</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/to_string.h" line="153" column="1" bodyfile="include/to_string.h" bodystart="153" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="utility_8h_1a0ab494bd11ad975080cb573a641e9409" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class M</type>
          </param>
        </templateparamlist>
        <type>constexpr IntPtrType</type>
        <definition>static constexpr IntPtrType bzd::offsetOf</definition>
        <argsstring>(const M T::*member)</argsstring>
        <name>offsetOf</name>
        <param>
          <type>const M T::*</type>
          <declname>member</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utility.h" line="49" column="1" bodyfile="include/utility.h" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="utility_8h_1a19954de1a9989fc0c4d6f8aa73a79e27" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class M</type>
          </param>
        </templateparamlist>
        <type>constexpr T *</type>
        <definition>static constexpr T* bzd::containerOf</definition>
        <argsstring>(M *ptr, const M T::*member)</argsstring>
        <name>containerOf</name>
        <param>
          <type>M *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>const M T::*</type>
          <declname>member</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utility.h" line="55" column="1" bodyfile="include/utility.h" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="utility_8h_1aed18c22147150d0eaa034c889dc84bc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr void</type>
        <definition>constexpr void bzd::memcpy</definition>
        <argsstring>(char *dest, const char *src, const SizeType size)</argsstring>
        <name>memcpy</name>
        <param>
          <type>char *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const SizeType</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utility.h" line="62" column="1" bodyfile="include/utility.h" bodystart="62" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="utility_8h_1a127e2775bab4938ab43df13a10f360f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr T &amp;&amp;</type>
        <definition>constexpr T&amp;&amp; bzd::forward</definition>
        <argsstring>(typename typeTraits::removeReference&lt; T &gt;::type &amp;t) noexcept</argsstring>
        <name>forward</name>
        <param>
          <type>typename <ref refid="structbzd_1_1typeTraits_1_1removeReference" kindref="compound">typeTraits::removeReference</ref>&lt; T &gt;::type &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utility.h" line="73" column="1" bodyfile="include/utility.h" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="utility_8h_1a940a323509fab0be7bc08de798fb2a15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr T &amp;&amp;</type>
        <definition>constexpr T&amp;&amp; bzd::forward</definition>
        <argsstring>(typename typeTraits::removeReference&lt; T &gt;::type &amp;&amp;t) noexcept</argsstring>
        <name>forward</name>
        <param>
          <type>typename <ref refid="structbzd_1_1typeTraits_1_1removeReference" kindref="compound">typeTraits::removeReference</ref>&lt; T &gt;::type &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utility.h" line="78" column="1" bodyfile="include/utility.h" bodystart="78" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="utility_8h_1afe93cf1b17c080bf9d0b743e878a2d91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structbzd_1_1typeTraits_1_1removeReference" kindref="compound">bzd::typeTraits::removeReference</ref>&lt; T &gt;::type &amp;&amp;</type>
        <definition>bzd::typeTraits::removeReference&lt;T&gt;::type&amp;&amp; bzd::move</definition>
        <argsstring>(T &amp;&amp;arg)</argsstring>
        <name>move</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utility.h" line="87" column="1" bodyfile="include/utility.h" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="utility_8h_1a28aca30a41935ed36a727ff356b41680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void bzd::swap</definition>
        <argsstring>(T &amp;t1, T &amp;t2)</argsstring>
        <name>swap</name>
        <param>
          <type>T &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utility.h" line="95" column="1" bodyfile="include/utility.h" bodystart="95" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="utility_8h_1af8c37acf4f763c1dbf50969c1a8871db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T bzd::min</definition>
        <argsstring>(const T &amp;a, const T &amp;b) noexcept</argsstring>
        <name>min</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utility.h" line="105" column="1" bodyfile="include/utility.h" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="utility_8h_1ad896bb239fa77a76949cb3e447923801" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T bzd::max</definition>
        <argsstring>(const T &amp;a, const T &amp;b) noexcept</argsstring>
        <name>max</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utility.h" line="113" column="1" bodyfile="include/utility.h" bodystart="113" bodyend="116"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/assert.h" line="11" column="1"/>
  </compounddef>
</doxygen>
