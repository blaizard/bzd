<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="utils_8h" kind="file" language="C++">
    <compoundname>utils.h</compoundname>
    <includes refid="integral__constant_8h" local="yes">include/type_traits/integral_constant.h</includes>
    <includes refid="reference_8h" local="yes">include/type_traits/reference.h</includes>
    <includedby refid="fundamental_8h" local="yes">include/type_traits/fundamental.h</includedby>
    <includedby refid="constructible_8h" local="yes">include/type_traits/constructible.h</includedby>
    <includedby refid="utility_8h" local="yes">include/utility.h</includedby>
    <includedby refid="span_8h" local="yes">include/container/span.h</includedby>
    <includedby refid="tuple_8h" local="yes">include/container/tuple.h</includedby>
    <includedby refid="expected_8h" local="yes">include/container/expected.h</includedby>
    <includedby refid="const__volatile__test_8cpp" local="yes">include/type_traits/const_volatile_test.cpp</includedby>
    <includedby refid="destructible_8h" local="yes">include/type_traits/destructible.h</includedby>
    <includedby refid="fundamental__test_8cpp" local="yes">include/type_traits/fundamental_test.cpp</includedby>
    <incdepgraph>
      <node id="1020">
        <label>include/type_traits/utils.h</label>
        <link refid="utils_8h"/>
        <childnode refid="1021" relation="include">
        </childnode>
        <childnode refid="1022" relation="include">
        </childnode>
      </node>
      <node id="1023">
        <label>include/type_traits/void.h</label>
        <link refid="void_8h_source"/>
        <childnode refid="1021" relation="include">
        </childnode>
      </node>
      <node id="1021">
        <label>include/type_traits/integral_constant.h</label>
        <link refid="integral__constant_8h_source"/>
      </node>
      <node id="1022">
        <label>include/type_traits/reference.h</label>
        <link refid="reference_8h_source"/>
        <childnode refid="1021" relation="include">
        </childnode>
        <childnode refid="1023" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1024">
        <label>include/type_traits/utils.h</label>
        <link refid="utils_8h"/>
        <childnode refid="1025" relation="include">
        </childnode>
        <childnode refid="1030" relation="include">
        </childnode>
        <childnode refid="1031" relation="include">
        </childnode>
        <childnode refid="1032" relation="include">
        </childnode>
        <childnode refid="1043" relation="include">
        </childnode>
        <childnode refid="1045" relation="include">
        </childnode>
        <childnode refid="1047" relation="include">
        </childnode>
      </node>
      <node id="1047">
        <label>include/type_traits/destructible.h</label>
        <link refid="destructible_8h_source"/>
      </node>
      <node id="1045">
        <label>include/container/expected.h</label>
        <link refid="expected_8h_source"/>
        <childnode refid="1037" relation="include">
        </childnode>
      </node>
      <node id="1042">
        <label>include/container/pool.h</label>
        <link refid="pool_8h_source"/>
      </node>
      <node id="1039">
        <label>include/system.h</label>
        <link refid="system_8h_source"/>
        <childnode refid="1036" relation="include">
        </childnode>
        <childnode refid="1026" relation="include">
        </childnode>
        <childnode refid="1028" relation="include">
        </childnode>
        <childnode refid="1027" relation="include">
        </childnode>
      </node>
      <node id="1032">
        <label>include/container/span.h</label>
        <link refid="span_8h_source"/>
        <childnode refid="1033" relation="include">
        </childnode>
        <childnode refid="1034" relation="include">
        </childnode>
        <childnode refid="1040" relation="include">
        </childnode>
        <childnode refid="1041" relation="include">
        </childnode>
      </node>
      <node id="1037">
        <label>include/container/variant.h</label>
        <link refid="variant_8h_source"/>
        <childnode refid="1026" relation="include">
        </childnode>
      </node>
      <node id="1031">
        <label>include/utility.h</label>
        <link refid="utility_8h_source"/>
        <childnode refid="1032" relation="include">
        </childnode>
        <childnode refid="1034" relation="include">
        </childnode>
        <childnode refid="1043" relation="include">
        </childnode>
        <childnode refid="1044" relation="include">
        </childnode>
        <childnode refid="1037" relation="include">
        </childnode>
        <childnode refid="1045" relation="include">
        </childnode>
        <childnode refid="1040" relation="include">
        </childnode>
        <childnode refid="1029" relation="include">
        </childnode>
        <childnode refid="1046" relation="include">
        </childnode>
        <childnode refid="1028" relation="include">
        </childnode>
        <childnode refid="1027" relation="include">
        </childnode>
        <childnode refid="1042" relation="include">
        </childnode>
      </node>
      <node id="1043">
        <label>include/container/tuple.h</label>
        <link refid="tuple_8h_source"/>
        <childnode refid="1026" relation="include">
        </childnode>
      </node>
      <node id="1029">
        <label>include/to_string.h</label>
        <link refid="to__string_8h_source"/>
        <childnode refid="1026" relation="include">
        </childnode>
      </node>
      <node id="1046">
        <label>include/scheduler.h</label>
        <link refid="scheduler_8h_source"/>
      </node>
      <node id="1030">
        <label>include/type_traits/constructible.h</label>
        <link refid="constructible_8h_source"/>
        <childnode refid="1026" relation="include">
        </childnode>
      </node>
      <node id="1033">
        <label>include/container/string_view.h</label>
        <link refid="string__view_8h_source"/>
        <childnode refid="1026" relation="include">
        </childnode>
        <childnode refid="1034" relation="include">
        </childnode>
        <childnode refid="1036" relation="include">
        </childnode>
        <childnode refid="1038" relation="include">
        </childnode>
        <childnode refid="1039" relation="include">
        </childnode>
        <childnode refid="1035" relation="include">
        </childnode>
        <childnode refid="1028" relation="include">
        </childnode>
        <childnode refid="1027" relation="include">
        </childnode>
      </node>
      <node id="1038">
        <label>include/container/iostream.h</label>
        <link refid="iostream_8h_source"/>
        <childnode refid="1039" relation="include">
        </childnode>
        <childnode refid="1026" relation="include">
        </childnode>
        <childnode refid="1029" relation="include">
        </childnode>
        <childnode refid="1035" relation="include">
        </childnode>
      </node>
      <node id="1025">
        <label>include/type_traits/fundamental.h</label>
        <link refid="fundamental_8h_source"/>
        <childnode refid="1026" relation="include">
        </childnode>
        <childnode refid="1029" relation="include">
        </childnode>
      </node>
      <node id="1044">
        <label>include/template_metaprogramming.h</label>
        <link refid="template__metaprogramming_8h_source"/>
        <childnode refid="1043" relation="include">
        </childnode>
        <childnode refid="1037" relation="include">
        </childnode>
      </node>
      <node id="1027">
        <label>include/log.h</label>
        <link refid="log_8h_source"/>
        <childnode refid="1028" relation="include">
        </childnode>
      </node>
      <node id="1026">
        <label>include/format.h</label>
        <link refid="format_8h_source"/>
        <childnode refid="1027" relation="include">
        </childnode>
      </node>
      <node id="1034">
        <label>include/container/string.h</label>
        <link refid="string_8h_source"/>
        <childnode refid="1026" relation="include">
        </childnode>
        <childnode refid="1029" relation="include">
        </childnode>
        <childnode refid="1035" relation="include">
        </childnode>
        <childnode refid="1027" relation="include">
        </childnode>
      </node>
      <node id="1040">
        <label>include/container/vector.h</label>
        <link refid="vector_8h_source"/>
        <childnode refid="1026" relation="include">
        </childnode>
        <childnode refid="1029" relation="include">
        </childnode>
      </node>
      <node id="1041">
        <label>include/container/array.h</label>
        <link refid="container_2array_8h_source"/>
        <childnode refid="1042" relation="include">
        </childnode>
      </node>
      <node id="1036">
        <label>include/assert_minimal.h</label>
        <link refid="assert__minimal_8h_source"/>
        <childnode refid="1037" relation="include">
        </childnode>
        <childnode refid="1028" relation="include">
        </childnode>
      </node>
      <node id="1028">
        <label>include/assert.h</label>
        <link refid="assert_8h_source"/>
      </node>
      <node id="1035">
        <label>include/container/string_stream.h</label>
        <link refid="string__stream_8h_source"/>
        <childnode refid="1029" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structbzd_1_1typeTraits_1_1enableIf" prot="public">bzd::typeTraits::enableIf</innerclass>
    <innerclass refid="structbzd_1_1typeTraits_1_1enableIf_3_01true_00_01T_01_4" prot="public">bzd::typeTraits::enableIf&lt; true, T &gt;</innerclass>
    <innerclass refid="structbzd_1_1typeTraits_1_1conditional" prot="public">bzd::typeTraits::conditional</innerclass>
    <innerclass refid="structbzd_1_1typeTraits_1_1conditional_3_01false_00_01T_00_01F_01_4" prot="public">bzd::typeTraits::conditional&lt; false, T, F &gt;</innerclass>
    <innerclass refid="structbzd_1_1typeTraits_1_1isSame" prot="public">bzd::typeTraits::isSame</innerclass>
    <innerclass refid="structbzd_1_1typeTraits_1_1isSame_3_01T_00_01T_01_4" prot="public">bzd::typeTraits::isSame&lt; T, T &gt;</innerclass>
    <innernamespace refid="namespacebzd">bzd</innernamespace>
    <innernamespace refid="namespacebzd_1_1typeTraits">bzd::typeTraits</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;include/type_traits/integral_constant.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;include/type_traits/reference.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacebzd" kindref="compound">bzd</ref></highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">typeTraits</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>declval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>addRValueReference&lt;T&gt;::type<sp/>declval();</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enableIf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="18" refid="structbzd_1_1typeTraits_1_1enableIf" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">enableIf</ref><sp/>{};</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="21" refid="structbzd_1_1typeTraits_1_1enableIf_3_01true_00_01T_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">enableIf</ref>&lt;true,<sp/>T&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>conditional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="26" refid="structbzd_1_1typeTraits_1_1conditional" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbzd_1_1typeTraits_1_1conditional" kindref="compound">conditional</ref><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="29" refid="structbzd_1_1typeTraits_1_1conditional_3_01false_00_01T_00_01F_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbzd_1_1typeTraits_1_1conditional" kindref="compound">conditional</ref>&lt;false,<sp/>T,<sp/>F&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>F<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>isSame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="34" refid="structbzd_1_1typeTraits_1_1isSame" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbzd_1_1typeTraits_1_1isSame" kindref="compound">isSame</ref><sp/>:<sp/><ref refid="structbzd_1_1typeTraits_1_1integralConstant" kindref="compound">falseType</ref><sp/>{};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="37" refid="structbzd_1_1typeTraits_1_1isSame_3_01T_00_01T_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbzd_1_1typeTraits_1_1isSame" kindref="compound">isSame</ref>&lt;T,<sp/>T&gt;<sp/>:<sp/><ref refid="structbzd_1_1typeTraits_1_1integralConstant" kindref="compound">trueType</ref><sp/>{};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>isTriviallyDestructible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">/*#if<sp/>__has_keyword(__is_trivially_destructible)</highlight></codeline>
<codeline lineno="42"><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>isTriviallyDestructible<sp/>:<sp/>public<sp/>bzd::typeTraits::integralConstant&lt;bool,<sp/>__is_trivially_destructible(T)&gt;<sp/>{};</highlight></codeline>
<codeline lineno="45"><highlight class="comment"></highlight></codeline>
<codeline lineno="46"><highlight class="comment">#elif<sp/>__has_feature(has_trivial_destructor)</highlight></codeline>
<codeline lineno="47"><highlight class="comment"></highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/>template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/>struct<sp/>isTriviallyDestructible<sp/>:<sp/>public<sp/>bzd::typeTraits::integralConstant&lt;bool,<sp/>is_destructible&lt;_Tp&gt;::value<sp/>&amp;&amp;<sp/>__has_trivial_destructor(T)&gt;<sp/>{};</highlight></codeline>
<codeline lineno="50"><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment">#else</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/>static_assert(false,<sp/>&quot;Compiler<sp/>not<sp/>supported&quot;);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="54"><highlight class="comment">template<sp/>&lt;class<sp/>_Tp&gt;<sp/>struct<sp/>__libcpp_trivial_destructor</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/>:<sp/>public<sp/>integral_constant&lt;bool,<sp/>is_scalar&lt;_Tp&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_reference&lt;_Tp&gt;::value&gt;<sp/>{};</highlight></codeline>
<codeline lineno="57"><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment">template<sp/>&lt;class<sp/>_Tp&gt;<sp/>struct<sp/>_LIBCPP_TEMPLATE_VIS<sp/>is_trivially_destructible</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/>:<sp/>public<sp/>__libcpp_trivial_destructor&lt;typename<sp/>remove_all_extents&lt;_Tp&gt;::type&gt;<sp/>{};</highlight></codeline>
<codeline lineno="60"><highlight class="comment"></highlight></codeline>
<codeline lineno="61"><highlight class="comment">template<sp/>&lt;class<sp/>_Tp&gt;<sp/>struct<sp/>_LIBCPP_TEMPLATE_VIS<sp/>is_trivially_destructible&lt;_Tp[]&gt;</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/>:<sp/>public<sp/>false_type<sp/>{};</highlight></codeline>
<codeline lineno="63"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="include/type_traits/utils.h"/>
  </compounddef>
</doxygen>
