<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="format__test_8cpp" kind="file" language="C++">
    <compoundname>format_test.cpp</compoundname>
    <includes local="yes">gtest/gtest.h</includes>
    <includes refid="format_8h" local="yes">include/format.h</includes>
    <includes refid="string__stream_8h" local="yes">include/container/string_stream.h</includes>
    <includes refid="string__view_8h" local="yes">include/container/string_view.h</includes>
    <includes refid="vector_8h" local="yes">include/container/vector.h</includes>
    <incdepgraph>
      <node id="615">
        <label>include/type_traits/utils.h</label>
        <link refid="utils_8h_source"/>
        <childnode refid="616" relation="include">
        </childnode>
        <childnode refid="617" relation="include">
        </childnode>
      </node>
      <node id="627">
        <label>include/type_traits/function.h</label>
        <link refid="function_8h_source"/>
        <childnode refid="616" relation="include">
        </childnode>
      </node>
      <node id="622">
        <label>include/types.h</label>
        <link refid="types_8h_source"/>
      </node>
      <node id="626">
        <label>include/type_traits/array.h</label>
        <link refid="type__traits_2array_8h_source"/>
        <childnode refid="616" relation="include">
        </childnode>
      </node>
      <node id="638">
        <label>include/container/expected.h</label>
        <link refid="expected_8h_source"/>
        <childnode refid="625" relation="include">
        </childnode>
        <childnode refid="615" relation="include">
        </childnode>
      </node>
      <node id="636">
        <label>include/system.h</label>
        <link refid="system_8h_source"/>
        <childnode refid="637" relation="include">
        </childnode>
        <childnode refid="623" relation="include">
        </childnode>
      </node>
      <node id="624">
        <label>include/container/span.h</label>
        <link refid="span_8h_source"/>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="625" relation="include">
        </childnode>
        <childnode refid="615" relation="include">
        </childnode>
        <childnode refid="619" relation="include">
        </childnode>
        <childnode refid="629" relation="include">
        </childnode>
      </node>
      <node id="643">
        <label>cstdarg</label>
      </node>
      <node id="634">
        <label>include/container/variant.h</label>
        <link refid="variant_8h_source"/>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="625" relation="include">
        </childnode>
        <childnode refid="633" relation="include">
        </childnode>
        <childnode refid="635" relation="include">
        </childnode>
        <childnode refid="638" relation="include">
        </childnode>
      </node>
      <node id="629">
        <label>include/container/iterator/contiguous.h</label>
        <link refid="contiguous_8h_source"/>
        <childnode refid="622" relation="include">
        </childnode>
      </node>
      <node id="618">
        <label>include/type_traits/void.h</label>
        <link refid="void_8h_source"/>
        <childnode refid="616" relation="include">
        </childnode>
      </node>
      <node id="625">
        <label>include/utility.h</label>
        <link refid="utility_8h_source"/>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="626" relation="include">
        </childnode>
        <childnode refid="627" relation="include">
        </childnode>
        <childnode refid="628" relation="include">
        </childnode>
        <childnode refid="617" relation="include">
        </childnode>
        <childnode refid="619" relation="include">
        </childnode>
        <childnode refid="615" relation="include">
        </childnode>
      </node>
      <node id="632">
        <label>include/container/tuple.h</label>
        <link refid="tuple_8h_source"/>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="625" relation="include">
        </childnode>
        <childnode refid="615" relation="include">
        </childnode>
        <childnode refid="633" relation="include">
        </childnode>
      </node>
      <node id="621">
        <label>include/container/constexpr_string_view.h</label>
        <link refid="constexpr__string__view_8h_source"/>
        <childnode refid="622" relation="include">
        </childnode>
      </node>
      <node id="619">
        <label>include/type_traits/const_volatile.h</label>
        <link refid="const__volatile_8h_source"/>
        <childnode refid="616" relation="include">
        </childnode>
      </node>
      <node id="640">
        <label>include/to_string.h</label>
        <link refid="to__string_8h_source"/>
        <childnode refid="630" relation="include">
        </childnode>
        <childnode refid="639" relation="include">
        </childnode>
        <childnode refid="637" relation="include">
        </childnode>
        <childnode refid="641" relation="include">
        </childnode>
        <childnode refid="614" relation="include">
        </childnode>
        <childnode refid="625" relation="include">
        </childnode>
      </node>
      <node id="620">
        <label>include/type_traits/constructible.h</label>
        <link refid="constructible_8h_source"/>
        <childnode refid="616" relation="include">
        </childnode>
        <childnode refid="617" relation="include">
        </childnode>
        <childnode refid="618" relation="include">
        </childnode>
        <childnode refid="615" relation="include">
        </childnode>
      </node>
      <node id="644">
        <label>vector</label>
      </node>
      <node id="623">
        <label>include/container/string_view.h</label>
        <link refid="string__view_8h_source"/>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="624" relation="include">
        </childnode>
      </node>
      <node id="612">
        <label>gtest/gtest.h</label>
      </node>
      <node id="642">
        <label>array</label>
      </node>
      <node id="637">
        <label>include/container/iostream.h</label>
        <link refid="iostream_8h_source"/>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="623" relation="include">
        </childnode>
      </node>
      <node id="614">
        <label>include/type_traits/fundamental.h</label>
        <link refid="fundamental_8h_source"/>
        <childnode refid="615" relation="include">
        </childnode>
        <childnode refid="619" relation="include">
        </childnode>
      </node>
      <node id="631">
        <label>iostream</label>
      </node>
      <node id="611">
        <label>include/format_test.cpp</label>
        <link refid="format__test_8cpp"/>
        <childnode refid="612" relation="include">
        </childnode>
        <childnode refid="613" relation="include">
        </childnode>
        <childnode refid="641" relation="include">
        </childnode>
        <childnode refid="623" relation="include">
        </childnode>
        <childnode refid="639" relation="include">
        </childnode>
      </node>
      <node id="633">
        <label>include/template_metaprogramming.h</label>
        <link refid="template__metaprogramming_8h_source"/>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="625" relation="include">
        </childnode>
      </node>
      <node id="613">
        <label>include/format.h</label>
        <link refid="format_8h_source"/>
        <childnode refid="614" relation="include">
        </childnode>
        <childnode refid="620" relation="include">
        </childnode>
        <childnode refid="621" relation="include">
        </childnode>
        <childnode refid="623" relation="include">
        </childnode>
        <childnode refid="630" relation="include">
        </childnode>
        <childnode refid="632" relation="include">
        </childnode>
        <childnode refid="634" relation="include">
        </childnode>
        <childnode refid="639" relation="include">
        </childnode>
        <childnode refid="637" relation="include">
        </childnode>
        <childnode refid="640" relation="include">
        </childnode>
        <childnode refid="636" relation="include">
        </childnode>
        <childnode refid="642" relation="include">
        </childnode>
        <childnode refid="631" relation="include">
        </childnode>
        <childnode refid="643" relation="include">
        </childnode>
        <childnode refid="644" relation="include">
        </childnode>
      </node>
      <node id="630">
        <label>include/container/string.h</label>
        <link refid="string_8h_source"/>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="625" relation="include">
        </childnode>
        <childnode refid="624" relation="include">
        </childnode>
        <childnode refid="623" relation="include">
        </childnode>
        <childnode refid="619" relation="include">
        </childnode>
        <childnode refid="631" relation="include">
        </childnode>
      </node>
      <node id="639">
        <label>include/container/vector.h</label>
        <link refid="vector_8h_source"/>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="624" relation="include">
        </childnode>
        <childnode refid="625" relation="include">
        </childnode>
      </node>
      <node id="628">
        <label>include/type_traits/pointer.h</label>
        <link refid="pointer_8h_source"/>
        <childnode refid="617" relation="include">
        </childnode>
      </node>
      <node id="616">
        <label>include/type_traits/integral_constant.h</label>
        <link refid="integral__constant_8h_source"/>
      </node>
      <node id="635">
        <label>include/assert_minimal.h</label>
        <link refid="assert__minimal_8h_source"/>
        <childnode refid="623" relation="include">
        </childnode>
        <childnode refid="636" relation="include">
        </childnode>
      </node>
      <node id="617">
        <label>include/type_traits/reference.h</label>
        <link refid="reference_8h_source"/>
        <childnode refid="616" relation="include">
        </childnode>
        <childnode refid="618" relation="include">
        </childnode>
      </node>
      <node id="641">
        <label>include/container/string_stream.h</label>
        <link refid="string__stream_8h_source"/>
        <childnode refid="637" relation="include">
        </childnode>
        <childnode refid="630" relation="include">
        </childnode>
        <childnode refid="623" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classContextTest" prot="public">ContextTest</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="format__test_8cpp_1a1c37f96de3ef56c698a71082e0d32115" prot="public" static="no">
        <type><ref refid="classbzd_1_1impl_1_1format_1_1Context" kindref="compound">bzd::impl::format::Context</ref>&lt; <ref refid="classContextTest" kindref="compound">ContextTest</ref> &gt;</type>
        <definition>using Context =  bzd::impl::format::Context&lt;ContextTest&gt;</definition>
        <argsstring></argsstring>
        <name>Context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/format_test.cpp" line="15" column="1" bodyfile="include/format_test.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="format__test_8cpp_1a5dfda4f2b8f2dc1b70b1e85c83019e21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Format_, ParseStaticString)</argsstring>
        <name>TEST</name>
        <param>
          <type>Format_</type>
        </param>
        <param>
          <type>ParseStaticString</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/format_test.cpp" line="17" column="1" bodyfile="include/format_test.cpp" bodystart="17" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="format__test_8cpp_1a049c8c54030918e8b12773be184cd09a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Format_, ParseMetadata)</argsstring>
        <name>TEST</name>
        <param>
          <type>Format_</type>
        </param>
        <param>
          <type>ParseMetadata</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/format_test.cpp" line="87" column="1" bodyfile="include/format_test.cpp" bodystart="87" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="format__test_8cpp_1a628138644d4f41f7c13d09da84ea011a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Format_, ParseMetadataIndex)</argsstring>
        <name>TEST</name>
        <param>
          <type>Format_</type>
        </param>
        <param>
          <type>ParseMetadataIndex</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/format_test.cpp" line="96" column="1" bodyfile="include/format_test.cpp" bodystart="96" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="format__test_8cpp_1ad6f89f9fa0835f15ab44ec14c7ad58cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Format_, ParseMetadataSign)</argsstring>
        <name>TEST</name>
        <param>
          <type>Format_</type>
        </param>
        <param>
          <type>ParseMetadataSign</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/format_test.cpp" line="134" column="1" bodyfile="include/format_test.cpp" bodystart="134" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="format__test_8cpp_1a7195328af36b8305990e29a2b418852c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Format_, ParseMetadataPrecision)</argsstring>
        <name>TEST</name>
        <param>
          <type>Format_</type>
        </param>
        <param>
          <type>ParseMetadataPrecision</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/format_test.cpp" line="158" column="1" bodyfile="include/format_test.cpp" bodystart="158" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="format__test_8cpp_1a0821d016e0e34be954b6fdfb03671383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Format_, StringFormat)</argsstring>
        <name>TEST</name>
        <param>
          <type>Format_</type>
        </param>
        <param>
          <type>StringFormat</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/format_test.cpp" line="169" column="1" bodyfile="include/format_test.cpp" bodystart="169" bodyend="216"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;include/format.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;include/container/string_stream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;include/container/string_view.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;include/container/vector.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="classContextTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classContextTest" kindref="compound">ContextTest</ref></highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addSubstring(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">bzd::StringView</ref>&amp;<sp/>str)<sp/>{<sp/>substrings_.pushBack(str);<sp/>}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>onError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">bzd::StringView</ref>&amp;<sp/>message)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(message.data());<sp/>}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1Vector" kindref="compound">bzd::Vector&lt;bzd::String&lt;100&gt;</ref>,<sp/>10&gt;<sp/>substrings_;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbzd_1_1impl_1_1format_1_1Context" kindref="compound">Context</ref><sp/>=<sp/><ref refid="classbzd_1_1impl_1_1format_1_1Context" kindref="compound">bzd::impl::format::Context&lt;ContextTest&gt;</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">TEST(Format_,<sp/>ParseStaticString)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1format_1_1Context" kindref="compound">Context</ref><sp/>ctx;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">bzd::StringView</ref><sp/>str(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bzd::impl::format::parseStaticString(ctx,<sp/>str);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(ctx.substrings_.size(),<sp/>1);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(ctx.substrings_[0].data(),<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(str.empty());</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1format_1_1Context" kindref="compound">Context</ref><sp/>ctx;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">bzd::StringView</ref><sp/>str(</highlight><highlight class="stringliteral">&quot;Hello<sp/>{}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bzd::impl::format::parseStaticString(ctx,<sp/>str);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(ctx.substrings_.size(),<sp/>1);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(ctx.substrings_[0].data(),<sp/></highlight><highlight class="stringliteral">&quot;Hello<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(str.front(),<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1format_1_1Context" kindref="compound">Context</ref><sp/>ctx;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">bzd::StringView</ref><sp/>str(</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bzd::impl::format::parseStaticString(ctx,<sp/>str);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(ctx.substrings_.size(),<sp/>0);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(str.front(),<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1format_1_1Context" kindref="compound">Context</ref><sp/>ctx;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">bzd::StringView</ref><sp/>str(</highlight><highlight class="stringliteral">&quot;Hello<sp/>{{&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bzd::impl::format::parseStaticString(ctx,<sp/>str);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(ctx.substrings_.size(),<sp/>1);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(ctx.substrings_[0].data(),<sp/></highlight><highlight class="stringliteral">&quot;Hello<sp/>{&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(str.empty());</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1format_1_1Context" kindref="compound">Context</ref><sp/>ctx;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">bzd::StringView</ref><sp/>str(</highlight><highlight class="stringliteral">&quot;{{{{&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bzd::impl::format::parseStaticString(ctx,<sp/>str);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(ctx.substrings_.size(),<sp/>2);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(ctx.substrings_[0].data(),<sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(ctx.substrings_[1].data(),<sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(str.empty());</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1format_1_1Context" kindref="compound">Context</ref><sp/>ctx;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">bzd::StringView</ref><sp/>str(</highlight><highlight class="stringliteral">&quot;}}}}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bzd::impl::format::parseStaticString(ctx,<sp/>str);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(ctx.substrings_.size(),<sp/>2);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(ctx.substrings_[0].data(),<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(ctx.substrings_[1].data(),<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(str.empty());</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1format_1_1Context" kindref="compound">Context</ref><sp/>ctx;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">bzd::StringView</ref><sp/>str(</highlight><highlight class="stringliteral">&quot;Hello<sp/>{&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_ANY_THROW(bzd::impl::format::parseStaticString(ctx,<sp/>str));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1format_1_1Context" kindref="compound">Context</ref><sp/>ctx;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">bzd::StringView</ref><sp/>str(</highlight><highlight class="stringliteral">&quot;}<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_ANY_THROW(bzd::impl::format::parseStaticString(ctx,<sp/>str));</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">TEST(Format_,<sp/>ParseMetadata)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1format_1_1Context" kindref="compound">Context</ref><sp/>ctx;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">bzd::StringView</ref><sp/>str(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_ANY_THROW(parseMetadata(ctx,<sp/>str,<sp/>0));</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">TEST(Format_,<sp/>ParseMetadataIndex)</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1format_1_1Context" kindref="compound">Context</ref><sp/>ctx;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">bzd::StringView</ref><sp/>str(</highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>metadata<sp/>=<sp/>parseMetadata(ctx,<sp/>str,<sp/>0);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(metadata.index,<sp/>0);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1format_1_1Context" kindref="compound">Context</ref><sp/>ctx;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">bzd::StringView</ref><sp/>str(</highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>metadata<sp/>=<sp/>parseMetadata(ctx,<sp/>str,<sp/>5);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(metadata.index,<sp/>5);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1format_1_1Context" kindref="compound">Context</ref><sp/>ctx;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">bzd::StringView</ref><sp/>str(</highlight><highlight class="stringliteral">&quot;:}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>metadata<sp/>=<sp/>parseMetadata(ctx,<sp/>str,<sp/>2);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(metadata.index,<sp/>2);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1format_1_1Context" kindref="compound">Context</ref><sp/>ctx;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">bzd::StringView</ref><sp/>str(</highlight><highlight class="stringliteral">&quot;10}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>metadata<sp/>=<sp/>parseMetadata(ctx,<sp/>str,<sp/>2);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(metadata.index,<sp/>10);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1format_1_1Context" kindref="compound">Context</ref><sp/>ctx;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">bzd::StringView</ref><sp/>str(</highlight><highlight class="stringliteral">&quot;7:}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>metadata<sp/>=<sp/>parseMetadata(ctx,<sp/>str,<sp/>8);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(metadata.index,<sp/>7);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">TEST(Format_,<sp/>ParseMetadataSign)</highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1format_1_1Context" kindref="compound">Context</ref><sp/>ctx;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">bzd::StringView</ref><sp/>str(</highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>metadata<sp/>=<sp/>parseMetadata(ctx,<sp/>str,<sp/>0);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(metadata.sign,<sp/>bzd::impl::format::Metadata::Sign::AUTO);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1format_1_1Context" kindref="compound">Context</ref><sp/>ctx;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">bzd::StringView</ref><sp/>str(</highlight><highlight class="stringliteral">&quot;:-}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>metadata<sp/>=<sp/>parseMetadata(ctx,<sp/>str,<sp/>0);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(metadata.sign,<sp/>bzd::impl::format::Metadata::Sign::ONLY_NEGATIVE);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1format_1_1Context" kindref="compound">Context</ref><sp/>ctx;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">bzd::StringView</ref><sp/>str(</highlight><highlight class="stringliteral">&quot;:+}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>metadata<sp/>=<sp/>parseMetadata(ctx,<sp/>str,<sp/>0);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(metadata.sign,<sp/>bzd::impl::format::Metadata::Sign::ALWAYS);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">TEST(Format_,<sp/>ParseMetadataPrecision)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1format_1_1Context" kindref="compound">Context</ref><sp/>ctx;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">bzd::StringView</ref><sp/>str(</highlight><highlight class="stringliteral">&quot;:.3f}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>metadata<sp/>=<sp/>parseMetadata(ctx,<sp/>str,<sp/>0);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(metadata.isPrecision);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(metadata.precision,<sp/>3);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">TEST(Format_,<sp/>StringFormat)</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1StringStream" kindref="compound">bzd::StringStream&lt;256&gt;</ref><sp/>stream;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bzd::format(stream,<sp/>CONSTEXPR_STRING_VIEW(</highlight><highlight class="stringliteral">&quot;Hello<sp/>{:d}&quot;</highlight><highlight class="normal">),<sp/>12);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(stream.str().data(),<sp/></highlight><highlight class="stringliteral">&quot;Hello<sp/>12&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1StringStream" kindref="compound">bzd::StringStream&lt;256&gt;</ref><sp/>stream;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bzd::format(stream,<sp/>CONSTEXPR_STRING_VIEW(</highlight><highlight class="stringliteral">&quot;Hello<sp/>{1}<sp/>{0:d}&quot;</highlight><highlight class="normal">),<sp/>12,<sp/>-89);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(stream.str().data(),<sp/></highlight><highlight class="stringliteral">&quot;Hello<sp/>-89<sp/>12&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1StringStream" kindref="compound">bzd::StringStream&lt;256&gt;</ref><sp/>stream;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bzd::format(stream,<sp/>CONSTEXPR_STRING_VIEW(</highlight><highlight class="stringliteral">&quot;Hello<sp/>{:f}&quot;</highlight><highlight class="normal">),<sp/>12.45);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(stream.str().data(),<sp/></highlight><highlight class="stringliteral">&quot;Hello<sp/>12.45&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1StringStream" kindref="compound">bzd::StringStream&lt;256&gt;</ref><sp/>stream;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bzd::format(stream,<sp/>CONSTEXPR_STRING_VIEW(</highlight><highlight class="stringliteral">&quot;Hello<sp/>{:.3f}&quot;</highlight><highlight class="normal">),<sp/>12.45);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(stream.str().data(),<sp/></highlight><highlight class="stringliteral">&quot;Hello<sp/>12.45&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1StringStream" kindref="compound">bzd::StringStream&lt;256&gt;</ref><sp/>stream;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bzd::format(stream,<sp/>CONSTEXPR_STRING_VIEW(</highlight><highlight class="stringliteral">&quot;Hello<sp/>{:%}&quot;</highlight><highlight class="normal">),<sp/>0.15);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(stream.str().data(),<sp/></highlight><highlight class="stringliteral">&quot;Hello<sp/>15.%&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1StringStream" kindref="compound">bzd::StringStream&lt;256&gt;</ref><sp/>stream;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bzd::format(stream,<sp/>CONSTEXPR_STRING_VIEW(</highlight><highlight class="stringliteral">&quot;Hello<sp/>{}&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(stream.str().data(),<sp/></highlight><highlight class="stringliteral">&quot;Hello<sp/>World&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1StringStream" kindref="compound">bzd::StringStream&lt;256&gt;</ref><sp/>stream;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bzd::format(stream,<sp/>CONSTEXPR_STRING_VIEW(</highlight><highlight class="stringliteral">&quot;Hello<sp/>{:.2}&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(stream.str().data(),<sp/></highlight><highlight class="stringliteral">&quot;Hello<sp/>Wo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1StringStream" kindref="compound">bzd::StringStream&lt;256&gt;</ref><sp/>stream;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bzd::format(stream,<sp/>CONSTEXPR_STRING_VIEW(</highlight><highlight class="stringliteral">&quot;This<sp/>{1}<sp/>is<sp/>{0:.1%}&quot;</highlight><highlight class="normal">),<sp/>0.0349,<sp/></highlight><highlight class="stringliteral">&quot;milk&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(stream.str().data(),<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>milk<sp/>is<sp/>3.5%&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1StringStream" kindref="compound">bzd::StringStream&lt;256&gt;</ref><sp/>stream;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bzd::format(stream,<sp/>CONSTEXPR_STRING_VIEW(</highlight><highlight class="stringliteral">&quot;{}<sp/>==<sp/>{0:#b}<sp/>==<sp/>{0:#o}<sp/>==<sp/>{0:#x}<sp/>==<sp/>{0:#X}&quot;</highlight><highlight class="normal">),<sp/>42);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(stream.str().data(),<sp/></highlight><highlight class="stringliteral">&quot;42<sp/>==<sp/>0b101010<sp/>==<sp/>0o52<sp/>==<sp/>0x2a<sp/>==<sp/>0x2A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="include/format_test.cpp"/>
  </compounddef>
</doxygen>
