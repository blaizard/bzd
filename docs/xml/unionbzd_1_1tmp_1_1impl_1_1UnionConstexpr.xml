<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr" kind="union" language="C++" prot="public">
    <compoundname>bzd::tmp::impl::UnionConstexpr</compoundname>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>class...</type>
        <declname>Ts</declname>
        <defname>Ts</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_1aacae828288ffeed37afbcf735cc147e9" prot="protected" static="no" mutable="no">
        <type>T</type>
        <definition>T bzd::tmp::impl::UnionConstexpr&lt; T, Ts &gt;::value_</definition>
        <argsstring></argsstring>
        <name>value_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/template_metaprogramming.h" line="121" column="1" bodyfile="include/template_metaprogramming.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_1a252246dacfdfdb9c6b610015c5999201" prot="protected" static="no" mutable="no">
        <type><ref refid="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr" kindref="compound">UnionConstexpr</ref>&lt; Ts... &gt;</type>
        <definition>UnionConstexpr&lt;Ts...&gt; bzd::tmp::impl::UnionConstexpr&lt; T, Ts &gt;::next_</definition>
        <argsstring></argsstring>
        <name>next_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/template_metaprogramming.h" line="122" column="1" bodyfile="include/template_metaprogramming.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_1abdf920965e0adbdbc98e63abc282210f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr bzd::tmp::impl::UnionConstexpr&lt; T, Ts &gt;::UnionConstexpr</definition>
        <argsstring>()</argsstring>
        <name>UnionConstexpr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/template_metaprogramming.h" line="101" column="1" bodyfile="include/template_metaprogramming.h" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_1a8464d93ab13892bb3152bb541809743e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>typename <ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">typeTraits::enableIf</ref>&lt;!<ref refid="structbzd_1_1typeTraits_1_1isSame" kindref="compound">bzd::typeTraits::isSame</ref>&lt; T, U &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr bzd::tmp::impl::UnionConstexpr&lt; T, Ts &gt;::UnionConstexpr</definition>
        <argsstring>(U &amp;&amp;value)</argsstring>
        <name>UnionConstexpr</name>
        <param>
          <type>U &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/template_metaprogramming.h" line="104" column="1" bodyfile="include/template_metaprogramming.h" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_1ad0637f663adcff9df5f37af158b50eb6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>typename <ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">typeTraits::enableIf</ref>&lt; <ref refid="structbzd_1_1typeTraits_1_1isSame" kindref="compound">bzd::typeTraits::isSame</ref>&lt; T, U &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr bzd::tmp::impl::UnionConstexpr&lt; T, Ts &gt;::UnionConstexpr</definition>
        <argsstring>(const U &amp;value)</argsstring>
        <name>UnionConstexpr</name>
        <param>
          <type>const U &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/template_metaprogramming.h" line="106" column="1" bodyfile="include/template_metaprogramming.h" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_1a4d6d4b30a5bc9f1cd58a07254dd57b4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>typename <ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">typeTraits::enableIf</ref>&lt;!<ref refid="structbzd_1_1typeTraits_1_1isSame" kindref="compound">bzd::typeTraits::isSame</ref>&lt; T, U &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr U &amp;</type>
        <definition>constexpr U&amp; bzd::tmp::impl::UnionConstexpr&lt; T, Ts &gt;::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/template_metaprogramming.h" line="109" column="1" bodyfile="include/template_metaprogramming.h" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_1a32da9f21eb5119dc07b78aafd7484015" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>typename <ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">typeTraits::enableIf</ref>&lt;!<ref refid="structbzd_1_1typeTraits_1_1isSame" kindref="compound">bzd::typeTraits::isSame</ref>&lt; T, U &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr const U &amp;</type>
        <definition>constexpr const U&amp; bzd::tmp::impl::UnionConstexpr&lt; T, Ts &gt;::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/template_metaprogramming.h" line="112" column="1" bodyfile="include/template_metaprogramming.h" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_1a4d6d4b30a5bc9f1cd58a07254dd57b4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>typename <ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">typeTraits::enableIf</ref>&lt; <ref refid="structbzd_1_1typeTraits_1_1isSame" kindref="compound">bzd::typeTraits::isSame</ref>&lt; T, U &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr U &amp;</type>
        <definition>constexpr U&amp; bzd::tmp::impl::UnionConstexpr&lt; T, Ts &gt;::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/template_metaprogramming.h" line="115" column="1" bodyfile="include/template_metaprogramming.h" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_1a32da9f21eb5119dc07b78aafd7484015" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>typename <ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">typeTraits::enableIf</ref>&lt; <ref refid="structbzd_1_1typeTraits_1_1isSame" kindref="compound">bzd::typeTraits::isSame</ref>&lt; T, U &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr const U &amp;</type>
        <definition>constexpr const U&amp; bzd::tmp::impl::UnionConstexpr&lt; T, Ts &gt;::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/template_metaprogramming.h" line="118" column="1" bodyfile="include/template_metaprogramming.h" bodystart="118" bodyend="118"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="585">
        <label>T</label>
      </node>
      <node id="583">
        <label>bzd::tmp::impl::UnionConstexpr&lt; Ts... &gt;</label>
        <link refid="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr"/>
        <childnode refid="583" relation="usage">
          <edgelabel>next_</edgelabel>
        </childnode>
        <childnode refid="584" relation="usage">
          <edgelabel>value_</edgelabel>
        </childnode>
      </node>
      <node id="582">
        <label>bzd::tmp::impl::UnionConstexpr&lt; T, Ts &gt;</label>
        <link refid="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr"/>
        <childnode refid="583" relation="usage">
          <edgelabel>next_</edgelabel>
        </childnode>
        <childnode refid="585" relation="usage">
          <edgelabel>value_</edgelabel>
        </childnode>
      </node>
      <node id="584">
        <label>Ts</label>
        <link refid="classTs"/>
      </node>
    </collaborationgraph>
    <location file="include/template_metaprogramming.h" line="98" column="1" bodyfile="include/template_metaprogramming.h" bodystart="97" bodyend="123"/>
    <listofallmembers>
      <member refid="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_1a4d6d4b30a5bc9f1cd58a07254dd57b4d" prot="public" virt="non-virtual"><scope>bzd::tmp::impl::UnionConstexpr</scope><name>get</name></member>
      <member refid="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_1a32da9f21eb5119dc07b78aafd7484015" prot="public" virt="non-virtual"><scope>bzd::tmp::impl::UnionConstexpr</scope><name>get</name></member>
      <member refid="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_1a4d6d4b30a5bc9f1cd58a07254dd57b4d" prot="public" virt="non-virtual"><scope>bzd::tmp::impl::UnionConstexpr</scope><name>get</name></member>
      <member refid="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_1a32da9f21eb5119dc07b78aafd7484015" prot="public" virt="non-virtual"><scope>bzd::tmp::impl::UnionConstexpr</scope><name>get</name></member>
      <member refid="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_1a252246dacfdfdb9c6b610015c5999201" prot="protected" virt="non-virtual"><scope>bzd::tmp::impl::UnionConstexpr</scope><name>next_</name></member>
      <member refid="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_1abdf920965e0adbdbc98e63abc282210f" prot="public" virt="non-virtual"><scope>bzd::tmp::impl::UnionConstexpr</scope><name>UnionConstexpr</name></member>
      <member refid="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_1a8464d93ab13892bb3152bb541809743e" prot="public" virt="non-virtual"><scope>bzd::tmp::impl::UnionConstexpr</scope><name>UnionConstexpr</name></member>
      <member refid="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_1ad0637f663adcff9df5f37af158b50eb6" prot="public" virt="non-virtual"><scope>bzd::tmp::impl::UnionConstexpr</scope><name>UnionConstexpr</name></member>
      <member refid="unionbzd_1_1tmp_1_1impl_1_1UnionConstexpr_1aacae828288ffeed37afbcf735cc147e9" prot="protected" virt="non-virtual"><scope>bzd::tmp::impl::UnionConstexpr</scope><name>value_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
