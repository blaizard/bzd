<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classbzd_1_1impl_1_1Expected" kind="class" language="C++" prot="public">
    <compoundname>bzd::impl::Expected</compoundname>
    <innerclass refid="structbzd_1_1impl_1_1Expected_1_1RefWrapper" prot="private">bzd::impl::Expected::RefWrapper</innerclass>
    <innerclass refid="structbzd_1_1impl_1_1Expected_1_1ValueWrapper" prot="private">bzd::impl::Expected::ValueWrapper</innerclass>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>class</type>
        <declname>E</declname>
        <defname>E</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classbzd_1_1impl_1_1Expected_1aa8f69b5dac070a35f7da60cc33e9f4ff" prot="private" static="no">
        <type>typename <ref refid="structbzd_1_1typeTraits_1_1removeReference" kindref="compound">bzd::typeTraits::removeReference</ref>&lt; T &gt;::type</type>
        <definition>using bzd::impl::Expected&lt; T, E &gt;::Value =  typename bzd::typeTraits::removeReference&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>Value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/expected.h" line="33" column="1" bodyfile="include/container/expected.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbzd_1_1impl_1_1Expected_1a608800dcff8fa84b42bb86e9000dde23" prot="private" static="no">
        <type>typename <ref refid="structbzd_1_1typeTraits_1_1conditional" kindref="compound">bzd::typeTraits::conditional</ref>&lt; <ref refid="structbzd_1_1typeTraits_1_1isReference" kindref="compound">bzd::typeTraits::isReference</ref>&lt; T &gt;::value, RefWrapper, ValueWrapper &gt;::type</type>
        <definition>using bzd::impl::Expected&lt; T, E &gt;::ValueContainer =  typename bzd::typeTraits::conditional&lt;bzd::typeTraits::isReference&lt;T&gt;::value, RefWrapper, ValueWrapper&gt;::type</definition>
        <argsstring></argsstring>
        <name>ValueContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/expected.h" line="48" column="1" bodyfile="include/container/expected.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classbzd_1_1impl_1_1Expected_1a72ea82e77d599d415899c549d4ff0a04" prot="protected" static="no" mutable="no">
        <type>const bool</type>
        <definition>const bool bzd::impl::Expected&lt; T, E &gt;::isError_</definition>
        <argsstring></argsstring>
        <name>isError_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/expected.h" line="107" column="1" bodyfile="include/container/expected.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbzd_1_1impl_1_1Expected_1ae57c8ae3cf1a867470a311988726f4da" prot="protected" static="no" mutable="no">
        <type>union bzd::impl::Expected::@0</type>
        <definition>union bzd::impl::Expected::@0 bzd::impl::Expected&lt; T, E &gt;::@1</definition>
        <argsstring></argsstring>
        <name>@1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/expected.h" line="112" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classbzd_1_1impl_1_1Expected_1ad060579e51bea226a0e40343ee50ff3d" prot="public" static="no" mutable="no">
        <type>ValueContainer</type>
        <definition>ValueContainer bzd::impl::Expected&lt; T, E &gt;::value_</definition>
        <argsstring></argsstring>
        <name>value_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/expected.h" line="110" column="1" bodyfile="include/container/expected.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbzd_1_1impl_1_1Expected_1a2da057c67f7eedbbabefdbe5da519a7a" prot="public" static="no" mutable="no">
        <type>E</type>
        <definition>E bzd::impl::Expected&lt; T, E &gt;::error_</definition>
        <argsstring></argsstring>
        <name>error_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/expected.h" line="111" column="1" bodyfile="include/container/expected.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classbzd_1_1impl_1_1Expected_1a7b523a10f1852d5ec8a2972e23d03ba6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr bzd::impl::Expected&lt; T, E &gt;::Expected</definition>
        <argsstring>(U &amp;&amp;value)</argsstring>
        <name>Expected</name>
        <param>
          <type>U &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/expected.h" line="52" column="1" bodyfile="include/container/expected.h" bodystart="52" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1impl_1_1Expected_1ab94e6d143ab9a6c52de1f35a6985eda9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr bzd::impl::Expected&lt; T, E &gt;::Expected</definition>
        <argsstring>(impl::Unexpected&lt; U &gt; &amp;&amp;u)</argsstring>
        <name>Expected</name>
        <param>
          <type><ref refid="classbzd_1_1impl_1_1Unexpected" kindref="compound">impl::Unexpected</ref>&lt; U &gt; &amp;&amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/expected.h" line="57" column="1" bodyfile="include/container/expected.h" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1impl_1_1Expected_1ac566f5a9a3ea35d0d23f47a9488d291a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr bzd::impl::Expected&lt; T, E &gt;::Expected</definition>
        <argsstring>(Expected&lt; T, E &gt; &amp;&amp;e)</argsstring>
        <name>Expected</name>
        <param>
          <type><ref refid="classbzd_1_1impl_1_1Expected" kindref="compound">Expected</ref>&lt; T, E &gt; &amp;&amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/expected.h" line="62" column="1" bodyfile="include/container/expected.h" bodystart="62" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1impl_1_1Expected_1a34869f1a584a0deaae139b759d4045fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>bzd::impl::Expected&lt; T, E &gt;::~Expected</definition>
        <argsstring>()</argsstring>
        <name>~Expected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/expected.h" line="68" column="1" bodyfile="include/container/expected.h" bodystart="68" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1impl_1_1Expected_1a84c2762ce66b6a84846e33cae3f9ac42" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr bzd::impl::Expected&lt; T, E &gt;::operator bool</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/expected.h" line="74" column="1" bodyfile="include/container/expected.h" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1impl_1_1Expected_1a8b8dc54a832dbc0416bfd0c9db9400dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const E &amp;</type>
        <definition>constexpr const E&amp; bzd::impl::Expected&lt; T, E &gt;::error</definition>
        <argsstring>() const</argsstring>
        <name>error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/expected.h" line="76" column="1" bodyfile="include/container/expected.h" bodystart="76" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1impl_1_1Expected_1a4daf3d7412d3b3cd9eb9caaa4813066d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const Value &amp;</type>
        <definition>constexpr const Value&amp; bzd::impl::Expected&lt; T, E &gt;::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/expected.h" line="82" column="1" bodyfile="include/container/expected.h" bodystart="82" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1impl_1_1Expected_1aea545dc2d222c8e759256fa7734d17bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr Value &amp;</type>
        <definition>constexpr Value&amp; bzd::impl::Expected&lt; T, E &gt;::operator*</definition>
        <argsstring>()</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/expected.h" line="88" column="1" bodyfile="include/container/expected.h" bodystart="88" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1impl_1_1Expected_1a2f8efa17c7b0b23cd0df19e322299493" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const Value *</type>
        <definition>constexpr const Value* bzd::impl::Expected&lt; T, E &gt;::operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/expected.h" line="94" column="1" bodyfile="include/container/expected.h" bodystart="94" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1impl_1_1Expected_1a77fe6c7a8204e0f3f9a765b81248f5c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr Value *</type>
        <definition>constexpr Value* bzd::impl::Expected&lt; T, E &gt;::operator-&gt;</definition>
        <argsstring>()</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/expected.h" line="100" column="1" bodyfile="include/container/expected.h" bodystart="100" bodyend="104"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="111">
        <label>bzd::typeTraits::conditional&lt; bzd::typeTraits::isReference&lt; T &gt;::value, RefWrapper, ValueWrapper &gt;</label>
        <link refid="structbzd_1_1typeTraits_1_1conditional"/>
      </node>
      <node id="110">
        <label>E</label>
      </node>
      <node id="109">
        <label>bzd::impl::Expected&lt; T, E &gt;</label>
        <link refid="classbzd_1_1impl_1_1Expected"/>
        <childnode refid="110" relation="usage">
          <edgelabel>error_</edgelabel>
        </childnode>
        <childnode refid="111" relation="usage">
          <edgelabel>value_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/container/expected.h" line="12" column="1" bodyfile="include/container/expected.h" bodystart="12" bodyend="-1"/>
    <listofallmembers>
      <member refid="classbzd_1_1impl_1_1Expected_1a8b8dc54a832dbc0416bfd0c9db9400dc" prot="public" virt="non-virtual"><scope>bzd::impl::Expected</scope><name>error</name></member>
      <member refid="classbzd_1_1impl_1_1Expected_1a2da057c67f7eedbbabefdbe5da519a7a" prot="public" virt="non-virtual"><scope>bzd::impl::Expected</scope><name>error_</name></member>
      <member refid="classbzd_1_1impl_1_1Expected_1a7b523a10f1852d5ec8a2972e23d03ba6" prot="public" virt="non-virtual"><scope>bzd::impl::Expected</scope><name>Expected</name></member>
      <member refid="classbzd_1_1impl_1_1Expected_1ab94e6d143ab9a6c52de1f35a6985eda9" prot="public" virt="non-virtual"><scope>bzd::impl::Expected</scope><name>Expected</name></member>
      <member refid="classbzd_1_1impl_1_1Expected_1ac566f5a9a3ea35d0d23f47a9488d291a" prot="public" virt="non-virtual"><scope>bzd::impl::Expected</scope><name>Expected</name></member>
      <member refid="classbzd_1_1impl_1_1Expected_1a72ea82e77d599d415899c549d4ff0a04" prot="protected" virt="non-virtual"><scope>bzd::impl::Expected</scope><name>isError_</name></member>
      <member refid="classbzd_1_1impl_1_1Expected_1a84c2762ce66b6a84846e33cae3f9ac42" prot="public" virt="non-virtual"><scope>bzd::impl::Expected</scope><name>operator bool</name></member>
      <member refid="classbzd_1_1impl_1_1Expected_1a4daf3d7412d3b3cd9eb9caaa4813066d" prot="public" virt="non-virtual"><scope>bzd::impl::Expected</scope><name>operator*</name></member>
      <member refid="classbzd_1_1impl_1_1Expected_1aea545dc2d222c8e759256fa7734d17bc" prot="public" virt="non-virtual"><scope>bzd::impl::Expected</scope><name>operator*</name></member>
      <member refid="classbzd_1_1impl_1_1Expected_1a2f8efa17c7b0b23cd0df19e322299493" prot="public" virt="non-virtual"><scope>bzd::impl::Expected</scope><name>operator-&gt;</name></member>
      <member refid="classbzd_1_1impl_1_1Expected_1a77fe6c7a8204e0f3f9a765b81248f5c5" prot="public" virt="non-virtual"><scope>bzd::impl::Expected</scope><name>operator-&gt;</name></member>
      <member refid="classbzd_1_1impl_1_1Expected_1aa8f69b5dac070a35f7da60cc33e9f4ff" prot="private" virt="non-virtual"><scope>bzd::impl::Expected</scope><name>Value</name></member>
      <member refid="classbzd_1_1impl_1_1Expected_1ad060579e51bea226a0e40343ee50ff3d" prot="public" virt="non-virtual"><scope>bzd::impl::Expected</scope><name>value_</name></member>
      <member refid="classbzd_1_1impl_1_1Expected_1a608800dcff8fa84b42bb86e9000dde23" prot="private" virt="non-virtual"><scope>bzd::impl::Expected</scope><name>ValueContainer</name></member>
      <member refid="classbzd_1_1impl_1_1Expected_1a34869f1a584a0deaae139b759d4045fa" prot="public" virt="non-virtual"><scope>bzd::impl::Expected</scope><name>~Expected</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
