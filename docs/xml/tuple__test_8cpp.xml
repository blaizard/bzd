<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="tuple__test_8cpp" kind="file" language="C++">
    <compoundname>tuple_test.cpp</compoundname>
    <includes local="yes">gtest/gtest.h</includes>
    <includes refid="tuple_8h" local="yes">include/container/tuple.h</includes>
    <incdepgraph>
      <node id="493">
        <label>include/type_traits/utils.h</label>
        <link refid="utils_8h_source"/>
        <childnode refid="487" relation="include">
        </childnode>
        <childnode refid="490" relation="include">
        </childnode>
      </node>
      <node id="488">
        <label>include/type_traits/function.h</label>
        <link refid="function_8h_source"/>
        <childnode refid="487" relation="include">
        </childnode>
      </node>
      <node id="484">
        <label>include/types.h</label>
        <link refid="types_8h_source"/>
      </node>
      <node id="486">
        <label>include/type_traits/array.h</label>
        <link refid="type__traits_2array_8h_source"/>
        <childnode refid="487" relation="include">
        </childnode>
      </node>
      <node id="481">
        <label>include/container/tuple_test.cpp</label>
        <link refid="tuple__test_8cpp"/>
        <childnode refid="482" relation="include">
        </childnode>
        <childnode refid="483" relation="include">
        </childnode>
      </node>
      <node id="491">
        <label>include/type_traits/void.h</label>
        <link refid="void_8h_source"/>
        <childnode refid="487" relation="include">
        </childnode>
      </node>
      <node id="485">
        <label>include/utility.h</label>
        <link refid="utility_8h_source"/>
        <childnode refid="484" relation="include">
        </childnode>
        <childnode refid="486" relation="include">
        </childnode>
        <childnode refid="488" relation="include">
        </childnode>
        <childnode refid="489" relation="include">
        </childnode>
        <childnode refid="490" relation="include">
        </childnode>
        <childnode refid="492" relation="include">
        </childnode>
        <childnode refid="493" relation="include">
        </childnode>
      </node>
      <node id="483">
        <label>include/container/tuple.h</label>
        <link refid="tuple_8h_source"/>
        <childnode refid="484" relation="include">
        </childnode>
        <childnode refid="485" relation="include">
        </childnode>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="494" relation="include">
        </childnode>
      </node>
      <node id="492">
        <label>include/type_traits/const_volatile.h</label>
        <link refid="const__volatile_8h_source"/>
        <childnode refid="487" relation="include">
        </childnode>
      </node>
      <node id="482">
        <label>gtest/gtest.h</label>
      </node>
      <node id="494">
        <label>include/template_metaprogramming.h</label>
        <link refid="template__metaprogramming_8h_source"/>
        <childnode refid="484" relation="include">
        </childnode>
        <childnode refid="485" relation="include">
        </childnode>
      </node>
      <node id="489">
        <label>include/type_traits/pointer.h</label>
        <link refid="pointer_8h_source"/>
        <childnode refid="490" relation="include">
        </childnode>
      </node>
      <node id="487">
        <label>include/type_traits/integral_constant.h</label>
        <link refid="integral__constant_8h_source"/>
      </node>
      <node id="490">
        <label>include/type_traits/reference.h</label>
        <link refid="reference_8h_source"/>
        <childnode refid="487" relation="include">
        </childnode>
        <childnode refid="491" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="tuple__test_8cpp_1a30832e3432c345ef7c1ea0bf8d989963" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ContainerTuple, Base)</argsstring>
        <name>TEST</name>
        <param>
          <type>ContainerTuple</type>
        </param>
        <param>
          <type>Base</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/tuple_test.cpp" line="4" column="1" bodyfile="include/container/tuple_test.cpp" bodystart="4" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="tuple__test_8cpp_1a28194c7d3e2d26d9583a675d5fc96d37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ContainerTuple, Constructor)</argsstring>
        <name>TEST</name>
        <param>
          <type>ContainerTuple</type>
        </param>
        <param>
          <type>Constructor</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/tuple_test.cpp" line="21" column="1" bodyfile="include/container/tuple_test.cpp" bodystart="21" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="tuple__test_8cpp_1add1dcb593b5e7d3738f234ad946d0f95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ContainerTuple, ConstructorPartial)</argsstring>
        <name>TEST</name>
        <param>
          <type>ContainerTuple</type>
        </param>
        <param>
          <type>ConstructorPartial</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/tuple_test.cpp" line="32" column="1" bodyfile="include/container/tuple_test.cpp" bodystart="32" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="tuple__test_8cpp_1a76592872ca2702618b62cb5cbffc37d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ContainerTuple, Const)</argsstring>
        <name>TEST</name>
        <param>
          <type>ContainerTuple</type>
        </param>
        <param>
          <type>Const</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/tuple_test.cpp" line="40" column="1" bodyfile="include/container/tuple_test.cpp" bodystart="40" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="tuple__test_8cpp_1aac03ea02790a158dc6675adf3205440a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ContainerTuple, Constexpr)</argsstring>
        <name>TEST</name>
        <param>
          <type>ContainerTuple</type>
        </param>
        <param>
          <type>Constexpr</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/tuple_test.cpp" line="47" column="1" bodyfile="include/container/tuple_test.cpp" bodystart="47" bodyend="52"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;include/container/tuple.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal">TEST(ContainerTuple,<sp/>Base)</highlight></codeline>
<codeline lineno="5"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbzd_1_1Tuple" kindref="compound">bzd::Tuple&lt;int, bool, double, int&gt;</ref><sp/>tuple;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Accessor<sp/>by<sp/>index<sp/>as<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>tuple.get&lt;0&gt;()<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>tuple.get&lt;1&gt;()<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>tuple.get&lt;2&gt;()<sp/>=<sp/>2.4;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>tuple.get&lt;3&gt;()<sp/>=<sp/>-32;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(tuple.get&lt;0&gt;(),<sp/>12);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(tuple.get&lt;1&gt;(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NEAR(tuple.get&lt;2&gt;(),<sp/>2.4,<sp/>0.0001);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(tuple.get&lt;3&gt;(),<sp/>-32);</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">TEST(ContainerTuple,<sp/>Constructor)</highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbzd_1_1Tuple" kindref="compound">bzd::Tuple&lt;unsigned int, bool, double, int, const char*&gt;</ref><sp/>tuple(12,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>5.32,<sp/>-21,<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(tuple.get&lt;0&gt;(),<sp/>12);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(tuple.get&lt;1&gt;(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NEAR(tuple.get&lt;2&gt;(),<sp/>5.32,<sp/>0.0001);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(tuple.get&lt;3&gt;(),<sp/>-21);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(tuple.get&lt;4&gt;(),<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">TEST(ContainerTuple,<sp/>ConstructorPartial)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbzd_1_1Tuple" kindref="compound">bzd::Tuple&lt;unsigned int, bool, double, int&gt;</ref><sp/>tuple(12,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(tuple.get&lt;0&gt;(),<sp/>12);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(tuple.get&lt;1&gt;(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">TEST(ContainerTuple,<sp/>Const)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbzd_1_1Tuple" kindref="compound">bzd::Tuple&lt;const int, const bool, const double, const char*&gt;</ref><sp/>tuple(12,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>8.7,<sp/></highlight><highlight class="stringliteral">&quot;Hello<sp/>World&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(tuple.get&lt;0&gt;(),<sp/>12);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(tuple.get&lt;1&gt;(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">TEST(ContainerTuple,<sp/>Constexpr)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbzd_1_1Tuple" kindref="compound">bzd::Tuple&lt;int, const char*&gt;</ref><sp/>tuple(12,<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(tuple.get&lt;0&gt;(),<sp/>12);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(tuple.get&lt;1&gt;(),<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="include/container/tuple_test.cpp"/>
  </compounddef>
</doxygen>
