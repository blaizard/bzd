<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classbzd_1_1Variant" kind="class" language="C++" prot="public">
    <compoundname>bzd::Variant</compoundname>
    <basecompoundref refid="classbzd_1_1impl_1_1Variant" prot="public" virt="non-virtual">bzd::impl::Variant&lt; bzd::tmp::Union&lt; Ts... &gt;, Ts... &gt;</basecompoundref>
    <innerclass refid="structbzd_1_1Variant_1_1VariantDestructor" prot="protected">bzd::Variant::VariantDestructor</innerclass>
    <templateparamlist>
      <param>
        <type>class...</type>
        <declname>Ts</declname>
        <defname>Ts</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classbzd_1_1Variant_1ada46df0e6ab14a948f3d97c874f07c08" prot="protected" static="no">
        <type><ref refid="classbzd_1_1Variant" kindref="compound">Variant</ref>&lt; Ts... &gt;</type>
        <definition>using bzd::Variant&lt; Ts &gt;::Self =  Variant&lt;Ts...&gt;</definition>
        <argsstring></argsstring>
        <name>Self</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/variant.h" line="158" column="1" bodyfile="include/container/variant.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbzd_1_1Variant_1a98caad4db689675837d0a47fd8ce6b2d" prot="protected" static="no">
        <type><ref refid="classbzd_1_1impl_1_1Variant" kindref="compound">bzd::impl::Variant</ref>&lt; <ref refid="unionbzd_1_1tmp_1_1impl_1_1Union" kindref="compound">bzd::tmp::Union</ref>&lt; Ts... &gt;, Ts... &gt;</type>
        <definition>using bzd::Variant&lt; Ts &gt;::Parent =  bzd::impl::Variant&lt;bzd::tmp::Union&lt;Ts...&gt;, Ts...&gt;</definition>
        <argsstring></argsstring>
        <name>Parent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/variant.h" line="159" column="1" bodyfile="include/container/variant.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbzd_1_1Variant_1aadb08ede805cfc569d4d8230e8df40e0" prot="protected" static="no">
        <type>typename Parent::template ChooseNth&lt; N &gt;</type>
        <definition>using bzd::Variant&lt; Ts &gt;::ChooseNth =  typename Parent::template ChooseNth&lt;N&gt;</definition>
        <argsstring></argsstring>
        <name>ChooseNth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/variant.h" line="163" column="1" bodyfile="include/container/variant.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbzd_1_1Variant_1a4e86ed8d21727acc2a7e4bff508a721c" prot="protected" static="no">
        <type>typename Parent::template Contains&lt; T &gt;</type>
        <definition>using bzd::Variant&lt; Ts &gt;::Contains =  typename Parent::template Contains&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>Contains</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/variant.h" line="166" column="1" bodyfile="include/container/variant.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbzd_1_1Variant_1ada21832e12c1393ed7dfe5667d19eac4" prot="protected" static="no">
        <type>typename Parent::template Find&lt; T &gt;</type>
        <definition>using bzd::Variant&lt; Ts &gt;::Find =  typename Parent::template Find&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>Find</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/variant.h" line="169" column="1" bodyfile="include/container/variant.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbzd_1_1Variant_1a1049964211190ff2bf24197b9b2c1762" prot="protected" static="no">
        <type>typename Parent::template Helper&lt; F, Args... &gt;</type>
        <definition>using bzd::Variant&lt; Ts &gt;::Helper =  typename Parent::template Helper&lt;F, Args...&gt;</definition>
        <argsstring></argsstring>
        <name>Helper</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/variant.h" line="172" column="1" bodyfile="include/container/variant.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbzd_1_1Variant_1a6208b79d9155b1d50dca7352f229f57d" prot="protected" static="no">
        <type>Helper&lt; <ref refid="structbzd_1_1Variant_1_1VariantDestructor" kindref="compound">VariantDestructor</ref>, <ref refid="classbzd_1_1Variant" kindref="compound">Self</ref> * &gt;</type>
        <definition>using bzd::Variant&lt; Ts &gt;::Destructor =  Helper&lt;VariantDestructor, Self*&gt;</definition>
        <argsstring></argsstring>
        <name>Destructor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/variant.h" line="189" column="1" bodyfile="include/container/variant.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classbzd_1_1Variant_1a6aaa163d8e172f87891c0f4f72371466" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename <ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">bzd::typeTraits::enableIf</ref>&lt; Contains&lt; T &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void bzd::Variant&lt; Ts &gt;::construct</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>construct</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/variant.h" line="193" column="1" bodyfile="include/container/variant.h" bodystart="193" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1Variant_1a0072bf50d446f3e7ac2c950820e09249" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr void</type>
        <definition>constexpr void bzd::Variant&lt; Ts &gt;::destructIfNeeded</definition>
        <argsstring>()</argsstring>
        <name>destructIfNeeded</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/variant.h" line="202" column="1" bodyfile="include/container/variant.h" bodystart="202" bodyend="208"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classbzd_1_1Variant_1a2518455c1e6f8dadb0d2d0ec120efe78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr bzd::Variant&lt; Ts &gt;::Variant</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>Variant</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/variant.h" line="213" column="1" bodyfile="include/container/variant.h" bodystart="213" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1Variant_1ad01f13a03c20267f3ed1de5c9bede7dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename <ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">bzd::typeTraits::enableIf</ref>&lt; Contains&lt; T &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void bzd::Variant&lt; Ts &gt;::emplace</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>emplace</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/variant.h" line="216" column="1" bodyfile="include/container/variant.h" bodystart="216" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1Variant_1a58f31998a93c16cb4a1f963146c2a946" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>bzd::Variant&lt; Ts &gt;::~Variant</definition>
        <argsstring>()</argsstring>
        <name>~Variant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/variant.h" line="222" column="1" bodyfile="include/container/variant.h" bodystart="222" bodyend="225"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="594">
        <label>bzd::Variant&lt; Ts &gt;</label>
        <link refid="classbzd_1_1Variant"/>
        <childnode refid="595" relation="public-inheritance">
        </childnode>
      </node>
      <node id="595">
        <label>bzd::impl::Variant&lt; bzd::tmp::Union&lt; Ts... &gt;, Ts... &gt;</label>
        <link refid="classbzd_1_1impl_1_1Variant"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="596">
        <label>bzd::Variant&lt; Ts &gt;</label>
        <link refid="classbzd_1_1Variant"/>
        <childnode refid="597" relation="public-inheritance">
        </childnode>
      </node>
      <node id="598">
        <label>bzd::tmp::impl::Union&lt; Ts... &gt;</label>
        <link refid="unionbzd_1_1tmp_1_1impl_1_1Union"/>
        <childnode refid="598" relation="usage">
          <edgelabel>next_</edgelabel>
        </childnode>
        <childnode refid="599" relation="usage">
          <edgelabel>value_</edgelabel>
        </childnode>
      </node>
      <node id="599">
        <label>Ts</label>
        <link refid="classTs"/>
      </node>
      <node id="597">
        <label>bzd::impl::Variant&lt; bzd::tmp::Union&lt; Ts... &gt;, Ts... &gt;</label>
        <link refid="classbzd_1_1impl_1_1Variant"/>
        <childnode refid="598" relation="usage">
          <edgelabel>data_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/container/variant.h" line="156" column="1" bodyfile="include/container/variant.h" bodystart="155" bodyend="226"/>
    <listofallmembers>
      <member refid="classbzd_1_1Variant_1aadb08ede805cfc569d4d8230e8df40e0" prot="protected" virt="non-virtual"><scope>bzd::Variant</scope><name>ChooseNth</name></member>
      <member refid="classbzd_1_1Variant_1a6aaa163d8e172f87891c0f4f72371466" prot="private" virt="non-virtual"><scope>bzd::Variant</scope><name>construct</name></member>
      <member refid="classbzd_1_1Variant_1a4e86ed8d21727acc2a7e4bff508a721c" prot="protected" virt="non-virtual"><scope>bzd::Variant</scope><name>Contains</name></member>
      <member refid="classbzd_1_1impl_1_1Variant_1abf63d95fa214179c274de6c3ca2ecd48" prot="protected" virt="non-virtual"><scope>bzd::Variant</scope><name>data_</name></member>
      <member refid="classbzd_1_1Variant_1a0072bf50d446f3e7ac2c950820e09249" prot="private" virt="non-virtual"><scope>bzd::Variant</scope><name>destructIfNeeded</name></member>
      <member refid="classbzd_1_1Variant_1a6208b79d9155b1d50dca7352f229f57d" prot="protected" virt="non-virtual"><scope>bzd::Variant</scope><name>Destructor</name></member>
      <member refid="classbzd_1_1Variant_1ad01f13a03c20267f3ed1de5c9bede7dd" prot="public" virt="non-virtual"><scope>bzd::Variant</scope><name>emplace</name></member>
      <member refid="classbzd_1_1Variant_1ada21832e12c1393ed7dfe5667d19eac4" prot="protected" virt="non-virtual"><scope>bzd::Variant</scope><name>Find</name></member>
      <member refid="classbzd_1_1impl_1_1Variant_1a2c79785352b6a118f05562d4df93727f" prot="public" virt="non-virtual"><scope>bzd::Variant</scope><name>get</name></member>
      <member refid="classbzd_1_1impl_1_1Variant_1ab69a180ec931f4ab33c5891443811e36" prot="public" virt="non-virtual"><scope>bzd::Variant</scope><name>get</name></member>
      <member refid="classbzd_1_1Variant_1a1049964211190ff2bf24197b9b2c1762" prot="protected" virt="non-virtual"><scope>bzd::Variant</scope><name>Helper</name></member>
      <member refid="classbzd_1_1impl_1_1Variant_1a4724248f12580869e0d80807fe68e8dd" prot="protected" virt="non-virtual"><scope>bzd::Variant</scope><name>id_</name></member>
      <member refid="classbzd_1_1impl_1_1Variant_1a562baf45680f0985c52c861f8dbd344d" prot="public" virt="non-virtual"><scope>bzd::Variant</scope><name>is</name></member>
      <member refid="classbzd_1_1impl_1_1Variant_1ab34de94c5bfac2ca8662e03757d0a309" prot="public" virt="non-virtual"><scope>bzd::Variant</scope><name>match</name></member>
      <member refid="classbzd_1_1impl_1_1Variant_1a6076c32bbf520055a3a8922b1156800c" prot="protected" virt="non-virtual"><scope>bzd::Variant</scope><name>Match</name></member>
      <member refid="classbzd_1_1Variant_1a98caad4db689675837d0a47fd8ce6b2d" prot="protected" virt="non-virtual"><scope>bzd::Variant</scope><name>Parent</name></member>
      <member refid="classbzd_1_1Variant_1ada46df0e6ab14a948f3d97c874f07c08" prot="protected" virt="non-virtual"><scope>bzd::Variant</scope><name>Self</name></member>
      <member refid="classbzd_1_1impl_1_1Variant_1a9278f2fa989268e6009e5fa792a94afa" prot="protected" virt="non-virtual"><scope>bzd::Variant</scope><name>TypeList</name></member>
      <member refid="classbzd_1_1Variant_1a2518455c1e6f8dadb0d2d0ec120efe78" prot="public" virt="non-virtual"><scope>bzd::Variant</scope><name>Variant</name></member>
      <member refid="classbzd_1_1impl_1_1Variant_1a94b14a37ebd4899550f5ce6630715cdf" prot="public" virt="non-virtual" ambiguityscope="Variant&lt; bzd::tmp::Union&lt; Ts... &gt;, Ts... &gt;::"><scope>bzd::Variant</scope><name>Variant</name></member>
      <member refid="classbzd_1_1impl_1_1Variant_1a814875f9a6cfc7e22972466999a88d2f" prot="public" virt="non-virtual" ambiguityscope="Variant&lt; bzd::tmp::Union&lt; Ts... &gt;, Ts... &gt;::"><scope>bzd::Variant</scope><name>Variant</name></member>
      <member refid="classbzd_1_1Variant_1a58f31998a93c16cb4a1f963146c2a946" prot="public" virt="non-virtual"><scope>bzd::Variant</scope><name>~Variant</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
