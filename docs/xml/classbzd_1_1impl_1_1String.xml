<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classbzd_1_1impl_1_1String" kind="class" language="C++" prot="public">
    <compoundname>bzd::impl::String</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Impl</basecompoundref>
    <derivedcompoundref refid="classbzd_1_1String" prot="public" virt="non-virtual">bzd::String&lt; N &gt;</derivedcompoundref>
    <derivedcompoundref refid="classbzd_1_1String" prot="public" virt="non-virtual">bzd::String&lt; 100 &gt;</derivedcompoundref>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type>class Impl</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classbzd_1_1impl_1_1String_1acfcfea3798d5426c5fd397af23f5937d" prot="protected" static="no">
        <type>Impl</type>
        <definition>using bzd::impl::String&lt; T, Impl &gt;::Parent =  Impl</definition>
        <argsstring></argsstring>
        <name>Parent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/string.h" line="19" column="1" bodyfile="include/container/string.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbzd_1_1impl_1_1String_1ae297aad5c516ea52e890864515af9dfa" prot="protected" static="no">
        <type><ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">bzd::impl::StringView</ref>&lt; T, <ref refid="classbzd_1_1Span" kindref="compound">bzd::Span</ref>&lt; typename <ref refid="structbzd_1_1typeTraits_1_1addConst" kindref="compound">bzd::typeTraits::addConst</ref>&lt; T &gt;::type &gt; &gt;</type>
        <definition>using bzd::impl::String&lt; T, Impl &gt;::StringView =  bzd::impl::StringView&lt;T, bzd::Span&lt;typename bzd::typeTraits::addConst&lt;T&gt;::type&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>StringView</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/string.h" line="23" column="1" bodyfile="include/container/string.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classbzd_1_1impl_1_1String_1a5a0745223c7a00f9578619da04877f0c" prot="public" static="no" mutable="no">
        <type>const SizeType</type>
        <definition>const SizeType bzd::impl::String&lt; T, Impl &gt;::capacity_</definition>
        <argsstring></argsstring>
        <name>capacity_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/string.h" line="100" column="1" bodyfile="include/container/string.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classbzd_1_1impl_1_1String_1ac888bc340bae4e71c32be785a1261af5" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr bzd::impl::String&lt; T, Impl &gt;::String</definition>
        <argsstring>(const SizeType capacity, Args &amp;&amp;... args)</argsstring>
        <name>String</name>
        <param>
          <type>const SizeType</type>
          <declname>capacity</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/string.h" line="27" column="1" bodyfile="include/container/string.h" bodystart="27" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1impl_1_1String_1a909ef889552751fdfe3f206a300384bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr SizeType</type>
        <definition>constexpr SizeType bzd::impl::String&lt; T, Impl &gt;::append</definition>
        <argsstring>(const StringView &amp;str) noexcept</argsstring>
        <name>append</name>
        <param>
          <type>const <ref refid="classbzd_1_1impl_1_1StringView" kindref="compound">StringView</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/string.h" line="33" column="1" bodyfile="include/container/string.h" bodystart="33" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1impl_1_1String_1abe95ca366312a7eaf0da9a108238a0e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr SizeType</type>
        <definition>constexpr SizeType bzd::impl::String&lt; T, Impl &gt;::append</definition>
        <argsstring>(const T c) noexcept</argsstring>
        <name>append</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/string.h" line="34" column="1" bodyfile="include/container/string.h" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1impl_1_1String_1a38b7732bec9f1acde5b3569a97ed0be6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr SizeType</type>
        <definition>constexpr SizeType bzd::impl::String&lt; T, Impl &gt;::append</definition>
        <argsstring>(const T *data, const SizeType n) noexcept</argsstring>
        <name>append</name>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const SizeType</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/string.h" line="35" column="1" bodyfile="include/container/string.h" bodystart="35" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1impl_1_1String_1a2cad6ab90d2606586ce67716f8b9ff19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr SizeType</type>
        <definition>constexpr SizeType bzd::impl::String&lt; T, Impl &gt;::append</definition>
        <argsstring>(const SizeType n, const T c) noexcept</argsstring>
        <name>append</name>
        <param>
          <type>const SizeType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/string.h" line="48" column="1" bodyfile="include/container/string.h" bodystart="48" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1impl_1_1String_1ab3ac3e97f70561ddcb3760acf2625878" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr SizeType</type>
        <definition>constexpr SizeType bzd::impl::String&lt; T, Impl &gt;::assign</definition>
        <argsstring>(const U &amp;data) noexcept</argsstring>
        <name>assign</name>
        <param>
          <type>const U &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/string.h" line="63" column="1" bodyfile="include/container/string.h" bodystart="63" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1impl_1_1String_1ae387833b6565022faa19c3cc3a4168ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr SizeType</type>
        <definition>constexpr SizeType bzd::impl::String&lt; T, Impl &gt;::capacity</definition>
        <argsstring>() const noexcept</argsstring>
        <name>capacity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/string.h" line="69" column="1" bodyfile="include/container/string.h" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1impl_1_1String_1a374161cce72004fd645df22cd84bd50b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr void</type>
        <definition>constexpr void bzd::impl::String&lt; T, Impl &gt;::clear</definition>
        <argsstring>() noexcept</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/string.h" line="74" column="1" bodyfile="include/container/string.h" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1impl_1_1String_1a569774da00ee68fe18eebcd4e2e877c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr void</type>
        <definition>constexpr void bzd::impl::String&lt; T, Impl &gt;::resize</definition>
        <argsstring>(const SizeType n) noexcept</argsstring>
        <name>resize</name>
        <param>
          <type>const SizeType</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/string.h" line="79" column="1" bodyfile="include/container/string.h" bodystart="79" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1impl_1_1String_1a3c1152b72e84e60db2f74f519316e277" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classbzd_1_1impl_1_1String" kindref="compound">String</ref>&lt; T, Impl &gt; &amp;</type>
        <definition>constexpr String&lt;T, Impl&gt;&amp; bzd::impl::String&lt; T, Impl &gt;::operator+=</definition>
        <argsstring>(const U &amp;data) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const U &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/string.h" line="86" column="1" bodyfile="include/container/string.h" bodystart="86" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1impl_1_1String_1a4fa1168443d81560da18876d2f18f713" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classbzd_1_1impl_1_1String" kindref="compound">String</ref>&lt; T, Impl &gt; &amp;</type>
        <definition>constexpr String&lt;T, Impl&gt;&amp; bzd::impl::String&lt; T, Impl &gt;::operator=</definition>
        <argsstring>(const U &amp;data) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>const U &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/string.h" line="93" column="1" bodyfile="include/container/string.h" bodystart="93" bodyend="97"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="497">
        <label>String&lt; 100 &gt;</label>
        <link refid="classbzd_1_1String"/>
        <childnode refid="494" relation="public-inheritance">
        </childnode>
      </node>
      <node id="494">
        <label>bzd::impl::String&lt; T, Impl &gt;</label>
        <link refid="classbzd_1_1impl_1_1String"/>
        <childnode refid="495" relation="public-inheritance">
        </childnode>
      </node>
      <node id="496">
        <label>bzd::String&lt; char, Span&lt; char &gt; &gt;</label>
        <link refid="classbzd_1_1String"/>
        <childnode refid="494" relation="public-inheritance">
        </childnode>
      </node>
      <node id="495">
        <label>Impl</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="498">
        <label>bzd::impl::String&lt; T, Impl &gt;</label>
        <link refid="classbzd_1_1impl_1_1String"/>
        <childnode refid="499" relation="public-inheritance">
        </childnode>
      </node>
      <node id="499">
        <label>Impl</label>
      </node>
    </collaborationgraph>
    <location file="include/container/string.h" line="17" column="1" bodyfile="include/container/string.h" bodystart="16" bodyend="101"/>
    <listofallmembers>
      <member refid="classbzd_1_1impl_1_1String_1a909ef889552751fdfe3f206a300384bb" prot="public" virt="non-virtual"><scope>bzd::impl::String</scope><name>append</name></member>
      <member refid="classbzd_1_1impl_1_1String_1abe95ca366312a7eaf0da9a108238a0e2" prot="public" virt="non-virtual"><scope>bzd::impl::String</scope><name>append</name></member>
      <member refid="classbzd_1_1impl_1_1String_1a38b7732bec9f1acde5b3569a97ed0be6" prot="public" virt="non-virtual"><scope>bzd::impl::String</scope><name>append</name></member>
      <member refid="classbzd_1_1impl_1_1String_1a2cad6ab90d2606586ce67716f8b9ff19" prot="public" virt="non-virtual"><scope>bzd::impl::String</scope><name>append</name></member>
      <member refid="classbzd_1_1impl_1_1String_1ab3ac3e97f70561ddcb3760acf2625878" prot="public" virt="non-virtual"><scope>bzd::impl::String</scope><name>assign</name></member>
      <member refid="classbzd_1_1impl_1_1String_1ae387833b6565022faa19c3cc3a4168ed" prot="public" virt="non-virtual"><scope>bzd::impl::String</scope><name>capacity</name></member>
      <member refid="classbzd_1_1impl_1_1String_1a5a0745223c7a00f9578619da04877f0c" prot="public" virt="non-virtual"><scope>bzd::impl::String</scope><name>capacity_</name></member>
      <member refid="classbzd_1_1impl_1_1String_1a374161cce72004fd645df22cd84bd50b" prot="public" virt="non-virtual"><scope>bzd::impl::String</scope><name>clear</name></member>
      <member refid="classbzd_1_1impl_1_1String_1a3c1152b72e84e60db2f74f519316e277" prot="public" virt="non-virtual"><scope>bzd::impl::String</scope><name>operator+=</name></member>
      <member refid="classbzd_1_1impl_1_1String_1a4fa1168443d81560da18876d2f18f713" prot="public" virt="non-virtual"><scope>bzd::impl::String</scope><name>operator=</name></member>
      <member refid="classbzd_1_1impl_1_1String_1acfcfea3798d5426c5fd397af23f5937d" prot="protected" virt="non-virtual"><scope>bzd::impl::String</scope><name>Parent</name></member>
      <member refid="classbzd_1_1impl_1_1String_1a569774da00ee68fe18eebcd4e2e877c7" prot="public" virt="non-virtual"><scope>bzd::impl::String</scope><name>resize</name></member>
      <member refid="classbzd_1_1impl_1_1String_1ac888bc340bae4e71c32be785a1261af5" prot="public" virt="non-virtual"><scope>bzd::impl::String</scope><name>String</name></member>
      <member refid="classbzd_1_1impl_1_1String_1ae297aad5c516ea52e890864515af9dfa" prot="protected" virt="non-virtual"><scope>bzd::impl::String</scope><name>StringView</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
