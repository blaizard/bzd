<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="utility_8h" kind="file" language="C++">
    <compoundname>utility.h</compoundname>
    <includes refid="types_8h" local="yes">include/types.h</includes>
    <includes refid="type__traits_2array_8h" local="yes">include/type_traits/array.h</includes>
    <includes refid="function_8h" local="yes">include/type_traits/function.h</includes>
    <includes refid="pointer_8h" local="yes">include/type_traits/pointer.h</includes>
    <includes refid="reference_8h" local="yes">include/type_traits/reference.h</includes>
    <includes refid="const__volatile_8h" local="yes">include/type_traits/const_volatile.h</includes>
    <includes refid="utils_8h" local="yes">include/type_traits/utils.h</includes>
    <includedby refid="span_8h" local="yes">include/container/span.h</includedby>
    <includedby refid="string_8h" local="yes">include/container/string.h</includedby>
    <includedby refid="tuple_8h" local="yes">include/container/tuple.h</includedby>
    <includedby refid="template__metaprogramming_8h" local="yes">include/template_metaprogramming.h</includedby>
    <includedby refid="variant_8h" local="yes">include/container/variant.h</includedby>
    <includedby refid="expected_8h" local="yes">include/container/expected.h</includedby>
    <includedby refid="vector_8h" local="yes">include/container/vector.h</includedby>
    <includedby refid="to__string_8h" local="yes">include/to_string.h</includedby>
    <includedby refid="scheduler_8h" local="yes">include/scheduler.h</includedby>
    <includedby refid="assert_8h" local="yes">include/assert.h</includedby>
    <includedby refid="log_8h" local="yes">include/log.h</includedby>
    <includedby refid="pool_8h" local="yes">include/container/pool.h</includedby>
    <includedby refid="utility__test_8cpp" local="yes">include/utility_test.cpp</includedby>
    <incdepgraph>
      <node id="1114">
        <label>include/type_traits/utils.h</label>
        <link refid="utils_8h_source"/>
        <childnode refid="1108" relation="include">
        </childnode>
        <childnode refid="1111" relation="include">
        </childnode>
      </node>
      <node id="1109">
        <label>include/type_traits/function.h</label>
        <link refid="function_8h_source"/>
        <childnode refid="1108" relation="include">
        </childnode>
      </node>
      <node id="1106">
        <label>include/types.h</label>
        <link refid="types_8h_source"/>
      </node>
      <node id="1107">
        <label>include/type_traits/array.h</label>
        <link refid="type__traits_2array_8h_source"/>
        <childnode refid="1108" relation="include">
        </childnode>
      </node>
      <node id="1112">
        <label>include/type_traits/void.h</label>
        <link refid="void_8h_source"/>
        <childnode refid="1108" relation="include">
        </childnode>
      </node>
      <node id="1105">
        <label>include/utility.h</label>
        <link refid="utility_8h"/>
        <childnode refid="1106" relation="include">
        </childnode>
        <childnode refid="1107" relation="include">
        </childnode>
        <childnode refid="1109" relation="include">
        </childnode>
        <childnode refid="1110" relation="include">
        </childnode>
        <childnode refid="1111" relation="include">
        </childnode>
        <childnode refid="1113" relation="include">
        </childnode>
        <childnode refid="1114" relation="include">
        </childnode>
      </node>
      <node id="1113">
        <label>include/type_traits/const_volatile.h</label>
        <link refid="const__volatile_8h_source"/>
        <childnode refid="1108" relation="include">
        </childnode>
      </node>
      <node id="1110">
        <label>include/type_traits/pointer.h</label>
        <link refid="pointer_8h_source"/>
        <childnode refid="1111" relation="include">
        </childnode>
      </node>
      <node id="1108">
        <label>include/type_traits/integral_constant.h</label>
        <link refid="integral__constant_8h_source"/>
      </node>
      <node id="1111">
        <label>include/type_traits/reference.h</label>
        <link refid="reference_8h_source"/>
        <childnode refid="1108" relation="include">
        </childnode>
        <childnode refid="1112" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1133">
        <label>include/container/expected.h</label>
        <link refid="expected_8h_source"/>
        <childnode refid="1125" relation="include">
        </childnode>
      </node>
      <node id="1130">
        <label>include/container/pool.h</label>
        <link refid="pool_8h_source"/>
      </node>
      <node id="1127">
        <label>include/system.h</label>
        <link refid="system_8h_source"/>
        <childnode refid="1124" relation="include">
        </childnode>
        <childnode refid="1118" relation="include">
        </childnode>
        <childnode refid="1120" relation="include">
        </childnode>
        <childnode refid="1119" relation="include">
        </childnode>
      </node>
      <node id="1116">
        <label>include/container/span.h</label>
        <link refid="span_8h_source"/>
        <childnode refid="1117" relation="include">
        </childnode>
        <childnode refid="1121" relation="include">
        </childnode>
        <childnode refid="1128" relation="include">
        </childnode>
        <childnode refid="1129" relation="include">
        </childnode>
      </node>
      <node id="1125">
        <label>include/container/variant.h</label>
        <link refid="variant_8h_source"/>
        <childnode refid="1118" relation="include">
        </childnode>
      </node>
      <node id="1115">
        <label>include/utility.h</label>
        <link refid="utility_8h"/>
        <childnode refid="1116" relation="include">
        </childnode>
        <childnode refid="1121" relation="include">
        </childnode>
        <childnode refid="1131" relation="include">
        </childnode>
        <childnode refid="1132" relation="include">
        </childnode>
        <childnode refid="1125" relation="include">
        </childnode>
        <childnode refid="1133" relation="include">
        </childnode>
        <childnode refid="1128" relation="include">
        </childnode>
        <childnode refid="1122" relation="include">
        </childnode>
        <childnode refid="1134" relation="include">
        </childnode>
        <childnode refid="1120" relation="include">
        </childnode>
        <childnode refid="1119" relation="include">
        </childnode>
        <childnode refid="1130" relation="include">
        </childnode>
      </node>
      <node id="1131">
        <label>include/container/tuple.h</label>
        <link refid="tuple_8h_source"/>
        <childnode refid="1118" relation="include">
        </childnode>
      </node>
      <node id="1122">
        <label>include/to_string.h</label>
        <link refid="to__string_8h_source"/>
        <childnode refid="1118" relation="include">
        </childnode>
      </node>
      <node id="1134">
        <label>include/scheduler.h</label>
        <link refid="scheduler_8h_source"/>
      </node>
      <node id="1117">
        <label>include/container/string_view.h</label>
        <link refid="string__view_8h_source"/>
        <childnode refid="1118" relation="include">
        </childnode>
        <childnode refid="1121" relation="include">
        </childnode>
        <childnode refid="1124" relation="include">
        </childnode>
        <childnode refid="1126" relation="include">
        </childnode>
        <childnode refid="1127" relation="include">
        </childnode>
        <childnode refid="1123" relation="include">
        </childnode>
        <childnode refid="1120" relation="include">
        </childnode>
        <childnode refid="1119" relation="include">
        </childnode>
      </node>
      <node id="1126">
        <label>include/container/iostream.h</label>
        <link refid="iostream_8h_source"/>
        <childnode refid="1127" relation="include">
        </childnode>
        <childnode refid="1118" relation="include">
        </childnode>
        <childnode refid="1122" relation="include">
        </childnode>
        <childnode refid="1123" relation="include">
        </childnode>
      </node>
      <node id="1132">
        <label>include/template_metaprogramming.h</label>
        <link refid="template__metaprogramming_8h_source"/>
        <childnode refid="1131" relation="include">
        </childnode>
        <childnode refid="1125" relation="include">
        </childnode>
      </node>
      <node id="1119">
        <label>include/log.h</label>
        <link refid="log_8h_source"/>
        <childnode refid="1120" relation="include">
        </childnode>
      </node>
      <node id="1118">
        <label>include/format.h</label>
        <link refid="format_8h_source"/>
        <childnode refid="1119" relation="include">
        </childnode>
      </node>
      <node id="1121">
        <label>include/container/string.h</label>
        <link refid="string_8h_source"/>
        <childnode refid="1118" relation="include">
        </childnode>
        <childnode refid="1122" relation="include">
        </childnode>
        <childnode refid="1123" relation="include">
        </childnode>
        <childnode refid="1119" relation="include">
        </childnode>
      </node>
      <node id="1128">
        <label>include/container/vector.h</label>
        <link refid="vector_8h_source"/>
        <childnode refid="1118" relation="include">
        </childnode>
        <childnode refid="1122" relation="include">
        </childnode>
      </node>
      <node id="1129">
        <label>include/container/array.h</label>
        <link refid="container_2array_8h_source"/>
        <childnode refid="1130" relation="include">
        </childnode>
      </node>
      <node id="1124">
        <label>include/assert_minimal.h</label>
        <link refid="assert__minimal_8h_source"/>
        <childnode refid="1125" relation="include">
        </childnode>
        <childnode refid="1120" relation="include">
        </childnode>
      </node>
      <node id="1120">
        <label>include/assert.h</label>
        <link refid="assert_8h_source"/>
      </node>
      <node id="1123">
        <label>include/container/string_stream.h</label>
        <link refid="string__stream_8h_source"/>
        <childnode refid="1122" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classbzd_1_1SingletonImpl" prot="public">bzd::SingletonImpl</innerclass>
    <innerclass refid="classbzd_1_1SingletonThreadLocalImpl" prot="public">bzd::SingletonThreadLocalImpl</innerclass>
    <innerclass refid="structbzd_1_1decay" prot="public">bzd::decay</innerclass>
    <innerclass refid="structbzd_1_1alignedStorage" prot="public">bzd::alignedStorage</innerclass>
    <innerclass refid="structbzd_1_1alignedStorage_1_1type" prot="public">bzd::alignedStorage::type</innerclass>
    <innernamespace refid="namespacebzd">bzd</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;include/types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;include/type_traits/array.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;include/type_traits/function.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;include/type_traits/pointer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;include/type_traits/reference.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;include/type_traits/const_volatile.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;include/type_traits/utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacebzd" kindref="compound">bzd</ref></highlight></codeline>
<codeline lineno="12"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="17" refid="classbzd_1_1SingletonImpl" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbzd_1_1SingletonImpl" kindref="compound">SingletonImpl</ref></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T&amp;<sp/>getInstance()</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T<sp/>instance;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>instance;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1SingletonImpl" kindref="compound">SingletonImpl</ref>(<ref refid="classbzd_1_1SingletonImpl" kindref="compound">SingletonImpl</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator=(<ref refid="classbzd_1_1SingletonImpl" kindref="compound">SingletonImpl</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1SingletonImpl" kindref="compound">SingletonImpl</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="33" refid="classbzd_1_1SingletonThreadLocalImpl" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbzd_1_1SingletonThreadLocalImpl" kindref="compound">SingletonThreadLocalImpl</ref></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T&amp;<sp/>getInstance()</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>thread_local<sp/>T<sp/>instance;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>instance;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1SingletonThreadLocalImpl" kindref="compound">SingletonThreadLocalImpl</ref>(<ref refid="classbzd_1_1SingletonThreadLocalImpl" kindref="compound">SingletonThreadLocalImpl</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator=(<ref refid="classbzd_1_1SingletonThreadLocalImpl" kindref="compound">SingletonThreadLocalImpl</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbzd_1_1SingletonThreadLocalImpl" kindref="compound">SingletonThreadLocalImpl</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr<sp/>IntPtrType<sp/>offsetOf(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>M<sp/>T::*member)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">IntPtrType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0)-&gt;*member));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr<sp/>T*<sp/>containerOf(M*<sp/>ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>M<sp/>T::*member)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">IntPtrType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr)<sp/>-<sp/>offsetOf(member));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>memcpy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>memcpy(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SizeType<sp/>size)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(SizeType<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>src[i];</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>forward</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>T&amp;&amp;<sp/>forward(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>typeTraits::removeReference&lt;T&gt;::type&amp;<sp/>t)<sp/>noexcept</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T&amp;&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>T&amp;&amp;<sp/>forward(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>typeTraits::removeReference&lt;T&gt;::type&amp;&amp;<sp/>t)<sp/>noexcept</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(!<ref refid="structbzd_1_1typeTraits_1_1isLValueReference" kindref="compound">bzd::typeTraits::isLValueReference&lt;T&gt;::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;template<sp/>argument<sp/>substituting<sp/>T<sp/>is<sp/>an<sp/>lvalue<sp/>reference<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T&amp;&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>bzd::typeTraits::removeReference&lt;T&gt;::type&amp;&amp;<sp/>move(T&amp;&amp;<sp/>arg)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">typename<sp/>bzd::typeTraits::removeReference&lt;T&gt;::type&amp;&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(arg);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>swap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(T&amp;<sp/>t1,<sp/>T&amp;<sp/>t2)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>temp{bzd::move(t1)};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>bzd::move(t2);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>bzd::move(temp);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>T<sp/>min(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>b)<sp/>noexcept</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(a<sp/>&lt;<sp/>b)<sp/>?<sp/>a<sp/>:<sp/>b;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>T<sp/>max(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>b)<sp/>noexcept</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(a<sp/>&gt;<sp/>b)<sp/>?<sp/>a<sp/>:<sp/>b;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="121" refid="structbzd_1_1decay" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbzd_1_1decay" kindref="compound">decay</ref></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>bzd::typeTraits::removeReference&lt;T&gt;::type<sp/>U;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structbzd_1_1typeTraits_1_1conditional" kindref="compound">bzd::typeTraits::conditional&lt;bzd::typeTraits::isArray&lt;U&gt;::value</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>bzd::typeTraits::removeExtent&lt;U&gt;::type*,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structbzd_1_1typeTraits_1_1conditional" kindref="compound">bzd::typeTraits::conditional&lt;bzd::typeTraits::isFunction&lt;U&gt;::value</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structbzd_1_1typeTraits_1_1addPointer" kindref="compound">bzd::typeTraits::addPointer&lt;U&gt;::type</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>bzd::typeTraits::removeCV&lt;U&gt;::type</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;::type</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;::type<sp/>type;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>alignedStorage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;SizeType<sp/>Len,<sp/>SizeType<sp/>Align&gt;</highlight></codeline>
<codeline lineno="135" refid="structbzd_1_1alignedStorage" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbzd_1_1alignedStorage" kindref="compound">alignedStorage</ref></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137" refid="structbzd_1_1alignedStorage_1_1type" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbzd_1_1alignedStorage_1_1type" kindref="compound">type</ref></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">alignas</highlight><highlight class="normal">(Align)<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>data[Len];</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="include/utility.h"/>
  </compounddef>
</doxygen>
