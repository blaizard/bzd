<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classbzd_1_1Span" kind="class" language="C++" prot="public">
    <compoundname>bzd::Span</compoundname>
    <derivedcompoundref refid="classbzd_1_1Array" prot="public" virt="non-virtual">bzd::Array&lt; T, N &gt;</derivedcompoundref>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classbzd_1_1Span_1ad6e7f896c2aa75a5c8d39ee1ac5f0fff" prot="protected" static="no">
        <type>T</type>
        <definition>using bzd::Span&lt; T &gt;::DataType =  T</definition>
        <argsstring></argsstring>
        <name>DataType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="15" column="1" bodyfile="include/container/span.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbzd_1_1Span_1a2f766718aa55276d578bdb80d2f7de99" prot="protected" static="no">
        <type><ref refid="classbzd_1_1Span" kindref="compound">Span</ref>&lt; DataType &gt;</type>
        <definition>using bzd::Span&lt; T &gt;::SelfType =  Span&lt;DataType&gt;</definition>
        <argsstring></argsstring>
        <name>SelfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="16" column="1" bodyfile="include/container/span.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbzd_1_1Span_1a77d2842477c7adccf5834b6817e7dc9c" prot="protected" static="no">
        <type>typename <ref refid="structbzd_1_1typeTraits_1_1isConst" kindref="compound">bzd::typeTraits::isConst</ref>&lt; DataType &gt;</type>
        <definition>using bzd::Span&lt; T &gt;::IsConst =  typename bzd::typeTraits::isConst&lt;DataType&gt;</definition>
        <argsstring></argsstring>
        <name>IsConst</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="17" column="1" bodyfile="include/container/span.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classbzd_1_1Span_1a05be10d237f4241e1301e0016cfe6bc5" prot="public" static="no">
        <type><ref refid="classbzd_1_1iterator_1_1Contiguous" kindref="compound">bzd::iterator::Contiguous</ref>&lt; DataType &gt;</type>
        <definition>using bzd::Span&lt; T &gt;::Iterator =  bzd::iterator::Contiguous&lt;DataType&gt;</definition>
        <argsstring></argsstring>
        <name>Iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="20" column="1" bodyfile="include/container/span.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbzd_1_1Span_1a489018b7f666f0471892f002ac023418" prot="public" static="no">
        <type><ref refid="classbzd_1_1iterator_1_1Contiguous" kindref="compound">bzd::iterator::Contiguous</ref>&lt; const DataType &gt;</type>
        <definition>using bzd::Span&lt; T &gt;::ConstIterator =  bzd::iterator::Contiguous&lt;const DataType&gt;</definition>
        <argsstring></argsstring>
        <name>ConstIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="21" column="1" bodyfile="include/container/span.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classbzd_1_1Span_1a8b2929e3d864dfb438a5c0e4179c5589" prot="public" static="yes" mutable="no">
        <type>constexpr const SizeType</type>
        <definition>constexpr const SizeType bzd::Span&lt; T &gt;::npos</definition>
        <argsstring></argsstring>
        <name>npos</name>
        <initializer>= static_cast&lt;SizeType&gt;(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="23" column="1" bodyfile="include/container/span.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classbzd_1_1Span_1a366eba5cfa37dd3e2ca31cdf6ae5b799" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Q</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class Span</definition>
        <argsstring></argsstring>
        <name>Span</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="149" column="1" bodyfile="include/container/span.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classbzd_1_1Span_1a6de99ffc97b145bb8f4e336ffe5b1114" prot="protected" static="no" mutable="no">
        <type>T *</type>
        <definition>T* bzd::Span&lt; T &gt;::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="151" column="1" bodyfile="include/container/span.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbzd_1_1Span_1a2bb038c31c95eace73b760b69da48cec" prot="protected" static="no" mutable="no">
        <type>SizeType</type>
        <definition>SizeType bzd::Span&lt; T &gt;::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="152" column="1" bodyfile="include/container/span.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classbzd_1_1Span_1a9b3fc1dc0e73b8a4afb332924feaa4ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr bzd::Span&lt; T &gt;::Span</definition>
        <argsstring>(DataType *const data, const SizeType size) noexcept</argsstring>
        <name>Span</name>
        <param>
          <type>DataType *const</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const SizeType</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="26" column="1" bodyfile="include/container/span.h" bodystart="26" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1Span_1ad82bd5d0d52656d5e09dff6933330418" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Q</type>
            <defval>IsConst</defval>
          </param>
          <param>
            <type>typename <ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">bzd::typeTraits::enableIf</ref>&lt; Q::value, void &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr bzd::Span&lt; T &gt;::Span</definition>
        <argsstring>(const Span&lt; typename bzd::typeTraits::removeConst&lt; DataType &gt;::type &gt; &amp;span) noexcept</argsstring>
        <name>Span</name>
        <param>
          <type>const <ref refid="classbzd_1_1Span" kindref="compound">Span</ref>&lt; typename <ref refid="structbzd_1_1typeTraits_1_1removeConst" kindref="compound">bzd::typeTraits::removeConst</ref>&lt; DataType &gt;::type &gt; &amp;</type>
          <declname>span</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="32" column="1" bodyfile="include/container/span.h" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1Span_1af3494078a4f83986bfdd5bd128665c21" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Q</type>
            <defval>IsConst</defval>
          </param>
          <param>
            <type>typename <ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">bzd::typeTraits::enableIf</ref>&lt;!Q::value, void &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classbzd_1_1iterator_1_1Contiguous" kindref="compound">Iterator</ref></type>
        <definition>constexpr Iterator bzd::Span&lt; T &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="38" column="1" bodyfile="include/container/span.h" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1Span_1ab70f070a578da94cda73b39309b89fae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Q</type>
            <defval>IsConst</defval>
          </param>
          <param>
            <type>typename <ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">bzd::typeTraits::enableIf</ref>&lt;!Q::value, void &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classbzd_1_1iterator_1_1Contiguous" kindref="compound">Iterator</ref></type>
        <definition>constexpr Iterator bzd::Span&lt; T &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="44" column="1" bodyfile="include/container/span.h" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1Span_1afb9bab4ab658e534052d9e8023ab7c74" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="classbzd_1_1iterator_1_1Contiguous" kindref="compound">ConstIterator</ref></type>
        <definition>constexpr ConstIterator bzd::Span&lt; T &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="49" column="1" bodyfile="include/container/span.h" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1Span_1ac2dda401660081d46029f92e229ef09b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="classbzd_1_1iterator_1_1Contiguous" kindref="compound">ConstIterator</ref></type>
        <definition>constexpr ConstIterator bzd::Span&lt; T &gt;::cbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="54" column="1" bodyfile="include/container/span.h" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1Span_1a3da7f634c328cef8b88a092e23a71518" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="classbzd_1_1iterator_1_1Contiguous" kindref="compound">ConstIterator</ref></type>
        <definition>constexpr ConstIterator bzd::Span&lt; T &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="59" column="1" bodyfile="include/container/span.h" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1Span_1a2baed781fe170f00e00b1e53907b2fb1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="classbzd_1_1iterator_1_1Contiguous" kindref="compound">ConstIterator</ref></type>
        <definition>constexpr ConstIterator bzd::Span&lt; T &gt;::cend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="64" column="1" bodyfile="include/container/span.h" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1Span_1adf6b4d628d334aa39cef146885c7dfdd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr SizeType</type>
        <definition>constexpr SizeType bzd::Span&lt; T &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="69" column="1" bodyfile="include/container/span.h" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1Span_1a184448cd70596a0d1fbe20ac2652a5ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr void</type>
        <definition>constexpr void bzd::Span&lt; T &gt;::reverse</definition>
        <argsstring>() noexcept</argsstring>
        <name>reverse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="74" column="1" bodyfile="include/container/span.h" bodystart="74" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1Span_1abab84fd06746b5a412fc19540a948014" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Q</type>
            <defval>IsConst</defval>
          </param>
          <param>
            <type>typename <ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">bzd::typeTraits::enableIf</ref>&lt;!Q::value, void &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr DataType &amp;</type>
        <definition>constexpr DataType&amp; bzd::Span&lt; T &gt;::operator[]</definition>
        <argsstring>(const SizeType index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const SizeType</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="84" column="1" bodyfile="include/container/span.h" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1Span_1ae97940edf6fee163354ff8b2157c96d6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const DataType &amp;</type>
        <definition>constexpr const DataType&amp; bzd::Span&lt; T &gt;::operator[]</definition>
        <argsstring>(const SizeType index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const SizeType</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="89" column="1" bodyfile="include/container/span.h" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1Span_1a78d866dc5a3c5801df5a6ee592d59028" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Q</type>
            <defval>IsConst</defval>
          </param>
          <param>
            <type>typename <ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">bzd::typeTraits::enableIf</ref>&lt;!Q::value, void &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr DataType &amp;</type>
        <definition>constexpr DataType&amp; bzd::Span&lt; T &gt;::at</definition>
        <argsstring>(const SizeType index)</argsstring>
        <name>at</name>
        <param>
          <type>const SizeType</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="97" column="1" bodyfile="include/container/span.h" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1Span_1a3f77ad40ca29e06e8cc9e978c47ff709" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const T &amp;</type>
        <definition>constexpr const T&amp; bzd::Span&lt; T &gt;::at</definition>
        <argsstring>(const SizeType index) const</argsstring>
        <name>at</name>
        <param>
          <type>const SizeType</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="102" column="1" bodyfile="include/container/span.h" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1Span_1add1510b3f86751b94a2c5976cfceb1ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Q</type>
            <defval>IsConst</defval>
          </param>
          <param>
            <type>typename <ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">bzd::typeTraits::enableIf</ref>&lt;!Q::value, void &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr DataType &amp;</type>
        <definition>constexpr DataType&amp; bzd::Span&lt; T &gt;::front</definition>
        <argsstring>() noexcept</argsstring>
        <name>front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="110" column="1" bodyfile="include/container/span.h" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1Span_1a388f1b3918cd2885330566aa50f3d087" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const DataType &amp;</type>
        <definition>constexpr const DataType&amp; bzd::Span&lt; T &gt;::front</definition>
        <argsstring>() const noexcept</argsstring>
        <name>front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="111" column="1" bodyfile="include/container/span.h" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1Span_1ac89dff5757cbdeef6c6c900025775806" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Q</type>
            <defval>IsConst</defval>
          </param>
          <param>
            <type>typename <ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">bzd::typeTraits::enableIf</ref>&lt;!Q::value, void &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr DataType &amp;</type>
        <definition>constexpr DataType&amp; bzd::Span&lt; T &gt;::back</definition>
        <argsstring>() noexcept</argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="116" column="1" bodyfile="include/container/span.h" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1Span_1abb8cd092fe87f6f5d3c0208687687be3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const DataType &amp;</type>
        <definition>constexpr const DataType&amp; bzd::Span&lt; T &gt;::back</definition>
        <argsstring>() const noexcept</argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="117" column="1" bodyfile="include/container/span.h" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1Span_1ab053a80dcbce3fada31ef7928a543ace" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Q</type>
            <defval>IsConst</defval>
          </param>
          <param>
            <type>typename <ref refid="structbzd_1_1typeTraits_1_1enableIf" kindref="compound">bzd::typeTraits::enableIf</ref>&lt;!Q::value, void &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr DataType *</type>
        <definition>constexpr DataType* bzd::Span&lt; T &gt;::data</definition>
        <argsstring>() noexcept</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="120" column="1" bodyfile="include/container/span.h" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1Span_1ad6fd0cbc46dd05bf28c0bdfc92bfd504" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const DataType *</type>
        <definition>constexpr const DataType* bzd::Span&lt; T &gt;::data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="125" column="1" bodyfile="include/container/span.h" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1Span_1aa024c6dcd31b0d85278d34101e15d828" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr SizeType</type>
        <definition>constexpr SizeType bzd::Span&lt; T &gt;::find</definition>
        <argsstring>(const DataType &amp;item, const SizeType start=0) const noexcept</argsstring>
        <name>find</name>
        <param>
          <type>const DataType &amp;</type>
          <declname>item</declname>
        </param>
        <param>
          <type>const SizeType</type>
          <declname>start</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="130" column="1" bodyfile="include/container/span.h" bodystart="130" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classbzd_1_1Span_1a1a73e8fc0549ac98ca7727860fa94cb5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool bzd::Span&lt; T &gt;::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/container/span.h" line="142" column="1" bodyfile="include/container/span.h" bodystart="142" bodyend="145"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="484">
        <label>bzd::Span&lt; T &gt;</label>
        <link refid="classbzd_1_1Span"/>
      </node>
      <node id="485">
        <label>bzd::Array&lt; T &gt;</label>
        <link refid="classbzd_1_1Array"/>
        <childnode refid="484" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="include/container/span.h" line="13" column="1" bodyfile="include/container/span.h" bodystart="12" bodyend="153"/>
    <listofallmembers>
      <member refid="classbzd_1_1Span_1a78d866dc5a3c5801df5a6ee592d59028" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>at</name></member>
      <member refid="classbzd_1_1Span_1a3f77ad40ca29e06e8cc9e978c47ff709" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>at</name></member>
      <member refid="classbzd_1_1Span_1ac89dff5757cbdeef6c6c900025775806" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>back</name></member>
      <member refid="classbzd_1_1Span_1abb8cd092fe87f6f5d3c0208687687be3" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>back</name></member>
      <member refid="classbzd_1_1Span_1af3494078a4f83986bfdd5bd128665c21" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>begin</name></member>
      <member refid="classbzd_1_1Span_1afb9bab4ab658e534052d9e8023ab7c74" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>begin</name></member>
      <member refid="classbzd_1_1Span_1ac2dda401660081d46029f92e229ef09b" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>cbegin</name></member>
      <member refid="classbzd_1_1Span_1a2baed781fe170f00e00b1e53907b2fb1" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>cend</name></member>
      <member refid="classbzd_1_1Span_1a489018b7f666f0471892f002ac023418" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>ConstIterator</name></member>
      <member refid="classbzd_1_1Span_1ab053a80dcbce3fada31ef7928a543ace" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>data</name></member>
      <member refid="classbzd_1_1Span_1ad6fd0cbc46dd05bf28c0bdfc92bfd504" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>data</name></member>
      <member refid="classbzd_1_1Span_1a6de99ffc97b145bb8f4e336ffe5b1114" prot="protected" virt="non-virtual"><scope>bzd::Span</scope><name>data_</name></member>
      <member refid="classbzd_1_1Span_1ad6e7f896c2aa75a5c8d39ee1ac5f0fff" prot="protected" virt="non-virtual"><scope>bzd::Span</scope><name>DataType</name></member>
      <member refid="classbzd_1_1Span_1a1a73e8fc0549ac98ca7727860fa94cb5" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>empty</name></member>
      <member refid="classbzd_1_1Span_1ab70f070a578da94cda73b39309b89fae" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>end</name></member>
      <member refid="classbzd_1_1Span_1a3da7f634c328cef8b88a092e23a71518" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>end</name></member>
      <member refid="classbzd_1_1Span_1aa024c6dcd31b0d85278d34101e15d828" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>find</name></member>
      <member refid="classbzd_1_1Span_1add1510b3f86751b94a2c5976cfceb1ed" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>front</name></member>
      <member refid="classbzd_1_1Span_1a388f1b3918cd2885330566aa50f3d087" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>front</name></member>
      <member refid="classbzd_1_1Span_1a77d2842477c7adccf5834b6817e7dc9c" prot="protected" virt="non-virtual"><scope>bzd::Span</scope><name>IsConst</name></member>
      <member refid="classbzd_1_1Span_1a05be10d237f4241e1301e0016cfe6bc5" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>Iterator</name></member>
      <member refid="classbzd_1_1Span_1a8b2929e3d864dfb438a5c0e4179c5589" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>npos</name></member>
      <member refid="classbzd_1_1Span_1abab84fd06746b5a412fc19540a948014" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>operator[]</name></member>
      <member refid="classbzd_1_1Span_1ae97940edf6fee163354ff8b2157c96d6" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>operator[]</name></member>
      <member refid="classbzd_1_1Span_1a184448cd70596a0d1fbe20ac2652a5ea" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>reverse</name></member>
      <member refid="classbzd_1_1Span_1a2f766718aa55276d578bdb80d2f7de99" prot="protected" virt="non-virtual"><scope>bzd::Span</scope><name>SelfType</name></member>
      <member refid="classbzd_1_1Span_1adf6b4d628d334aa39cef146885c7dfdd" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>size</name></member>
      <member refid="classbzd_1_1Span_1a2bb038c31c95eace73b760b69da48cec" prot="protected" virt="non-virtual"><scope>bzd::Span</scope><name>size_</name></member>
      <member refid="classbzd_1_1Span_1a366eba5cfa37dd3e2ca31cdf6ae5b799" prot="protected" virt="non-virtual"><scope>bzd::Span</scope><name>Span</name></member>
      <member refid="classbzd_1_1Span_1a9b3fc1dc0e73b8a4afb332924feaa4ac" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>Span</name></member>
      <member refid="classbzd_1_1Span_1ad82bd5d0d52656d5e09dff6933330418" prot="public" virt="non-virtual"><scope>bzd::Span</scope><name>Span</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
