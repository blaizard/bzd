module(
    name = "bzd",
    version = "0.1",
)

bazel_dep(name = "bzd_lib", version = "1.0")
bazel_dep(name = "bzd_bdl", version = "1.0")
bazel_dep(name = "bzd_coverage", version = "1.0")
bazel_dep(name = "bzd_rules_doc", version = "1.0")
bazel_dep(name = "bzd_toolchain_cc", version = "1.0")
bazel_dep(name = "bzd_rules_nodejs", version = "1.0")
bazel_dep(name = "bzd_platforms", version = "1.0")
bazel_dep(name = "bzd_dns", version = "1.0")
bazel_dep(name = "bzd_sanitizer", version = "1.0")
bazel_dep(name = "bzd_package", version = "1.0")
bazel_dep(name = "bzd_bundle", version = "1.0")
bazel_dep(name = "bzd_rules_oci", version = "1.0")
bazel_dep(name = "bzd_python", version = "1.0")
bazel_dep(name = "platforms", version = "1.0.0")
bazel_dep(name = "rules_python", version = "1.4.1")
bazel_dep(name = "rules_rust", version = "0.61.0")
bazel_dep(name = "rules_cc", version = "0.1.2")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "stardoc", version = "0.8.0")
bazel_dep(name = "rules_pkg", version = "1.1.0")

# Override some of the modules that are local.
[local_path_override(
    module_name = name,
    path = "tools/bazel_build/modules/" + name,
) for name in (
    "bzd_lib",
    "bzd_bdl",
    "bzd_coverage",
    "bzd_rules_doc",
    "bzd_toolchain_cc",
    "bzd_rules_nodejs",
    "bzd_rules_oci",
    "bzd_bundle",
    "bzd_platforms",
    "bzd_sanitizer",
    "bzd_package",
    "bzd_dns",
)]

local_path_override(
    module_name = "bzd_python",
    path = "python",
)

# Python

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    ignore_root_user_error = True,
    is_default = True,
    python_version = "3.12",
)

pip_platforms = {
    "pip_linux_arm64": "manylinux2014_aarch64",
    "pip_linux_x86_64": "manylinux2014_x86_64",
}

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

[
    pip.parse(
        download_only = True,
        extra_pip_args = [
            "--platform",
            platform,
        ],
        hub_name = name,
        python_version = "3.12",
        requirements_lock = "//tools/python:requirements.txt",
    )
    for name, platform in pip_platforms.items()
]

[use_repo(pip, name) for name in pip_platforms.keys()]

# C++

toolchain_cc = use_extension("@bzd_toolchain_cc//:extensions.bzl", "toolchain_cc")
toolchain_cc.toolchain(
    name = "clang",
    default = True,
    version = "clang_19.1.7",
)
use_repo(toolchain_cc, "clang")

register_toolchains("@clang//:all")

toolchain_cc.toolchain(
    name = "esp32",
    version = "esp32_gcc_14.2.0",
)
use_repo(toolchain_cc, "esp32")

register_toolchains("@esp32//:all")

toolchain_cc.toolchain(
    name = "esp32s3",
    version = "esp32s3_gcc_14.2.0",
)
use_repo(toolchain_cc, "esp32s3")

register_toolchains("@esp32s3//:all")

toolchain_cc.toolchain(
    name = "gcc",
    version = "gcc_14.2.0",
)
use_repo(toolchain_cc, "gcc")

register_toolchains("@gcc//:all")

# Bdl

bdl_extension = use_extension("@bzd_bdl//:extensions.bzl", "bdl_extension")
bdl_extension.register(
    name = "cc",
    composition = "//cc/bdl/generator:composition",
    extension = "//cc/bdl:extension.bzl",
    format = "//cc/bdl/generator:format",
)

# NodeJs

toolchain_nodejs = use_extension("@bzd_rules_nodejs//:extensions.bzl", "toolchain_nodejs")
toolchain_nodejs.toolchain(
    name = "nodejs",
    default = True,
    version = "23.1.0",
)
use_repo(toolchain_nodejs, "nodejs")

register_toolchains("@nodejs//:all")

requirements_nodejs = use_extension("@bzd_rules_nodejs//:requirements.bzl", "requirements_nodejs")
requirements_nodejs.parse(
    name = "nodejs_deps",
    requirements = "//tools/nodejs:requirements.json",
)
use_repo(requirements_nodejs, "nodejs_deps")

# Rust

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    versions = ["1.75.0"],
)
use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

# Docker

images = use_extension("@bzd_rules_oci//:extensions.bzl", "images")
images.pull(
    name = "oci_bridge",
    digest = "sha256:3ae86fc21f2a6e5b1b7d26018bdecc8f1801919d7c23d56e93c9311c6a051d40",
    image = "index.docker.io/blaizard/bridge",
)
images.pull(
    name = "oci_compiler_explorer",
    digest = "sha256:d61369a460589987fa292f7a083720c4057e4b3170cc08e265c6b5cfc6c2eb50",
    image = "index.docker.io/blaizard/compiler_explorer",
)
images.pull(
    name = "oci_nodejs_puppeteer",
    digest = "sha256:68c92c4b27229e1a3ab27e359fb5474a6edc8cfb572e9b2d46fefc230ead7f65",
    image = "index.docker.io/blaizard/nodejs_puppeteer",
)
images.pull(
    name = "oci_xtensa_qemu",
    digest = "sha256:c6060b4cfba287f7ca7cb0290d27a8b5f6884d34c744742b5fc9672ed02a81dc",
    image = "index.docker.io/blaizard/xtensa_qemu",
)
images.pull(
    name = "oci_ebook",
    digest = "sha256:9bdf40cd46310c4e5bef75b7723e060629a78ce4ce7fa529522e49a433bae1bf",
    image = "index.docker.io/blaizard/ebook",
)
use_repo(images, "oci_bridge", "oci_ebook", "oci_nodejs_puppeteer")

# Sanitizer

sanitizer = use_extension("@bzd_sanitizer//:extensions.bzl", "sanitizer")
sanitizer.clang_tidy(
    binary = "@clang//:clang_tidy",
    config = "//tools/cc:.clang-tidy",
)
sanitizer.mypy(
    binary = "//tools/python:mypy",
    config = "//tools/python:pyproject.toml",
)
