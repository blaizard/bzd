module(name = "bzd", version = "0.1")

bazel_dep(name = "platforms", version = "0.0.6")
bazel_dep(name = "bzd_utils", version = "1.0")
bazel_dep(name = "bzd_rules_doc", version = "1.0")
bazel_dep(name = "bzd_toolchain_cc", version = "1.0")
bazel_dep(name = "bzd_platforms", version = "1.0")
bazel_dep(name = "bzd_sanitizer", version = "1.0")
bazel_dep(name = "bazel_skylib", version = "1.4.2")
bazel_dep(name = "stardoc", version = "0.5.6")
bazel_dep(name = "bzd_bundle", version = "1.0")
bazel_dep(name = "rules_python", version = "0.24.0")

# Override some of the modules that are local.
[local_path_override(
    module_name = name,
    path = "tools/bazel_build/modules/" + name
) for name in ("bzd_utils", "bzd_rules_doc", "bzd_toolchain_cc", "bzd_bundle", "bzd_platforms", "bzd_python", "bzd_sanitizer", )]

# Python

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    python_version = "3.8",
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pip",
    requirements_lock = "//tools/python:requirements.txt",
)
use_repo(pip, "pip")

# C++

toolchain_cc = use_extension("@bzd_toolchain_cc//:extensions.bzl", "toolchain_cc")
toolchain_cc.toolchain(
    name = "clang",
    version = "clang_17.0.0",
    default = True
)
use_repo(toolchain_cc, "clang")
register_toolchains("@clang//:all")

toolchain_cc.toolchain(
    name = "esp32",
    version = "esp32_gcc_12.2.0"
)
use_repo(toolchain_cc, "esp32")
register_toolchains("@esp32//:all")

toolchain_cc.toolchain(
    name = "gcc",
    version = "gcc_13.1.0"
)
use_repo(toolchain_cc, "gcc")
register_toolchains("@gcc//:all")
